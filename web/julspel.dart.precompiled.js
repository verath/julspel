// Generated by dart2js, the Dart to JavaScript compiler version: 1.0.0.10_r30798.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
(function($) {
var A = {};
delete A.x;
var B = {};
delete B.x;
var C = {};
delete C.x;
var D = {};
delete D.x;
var E = {};
delete E.x;
var F = {};
delete F.x;
var G = {};
delete G.x;
var H = {};
delete H.x;
var J = {};
delete J.x;
var K = {};
delete K.x;
var L = {};
delete L.x;
var M = {};
delete M.x;
var N = {};
delete N.x;
var O = {};
delete O.x;
var P = {};
delete P.x;
var Q = {};
delete Q.x;
var R = {};
delete R.x;
var S = {};
delete S.x;
var T = {};
delete T.x;
var U = {};
delete U.x;
var V = {};
delete V.x;
var W = {};
delete W.x;
var X = {};
delete X.x;
var Y = {};
delete Y.x;
var Z = {};
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
// Method closures
$$.BoundClosure$i4 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$4: function(p0, p1, p2, p3) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0, p1, p2, p3);
  }
}];

$$.BoundClosure$i0 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self, this._receiver);
  }
}];

$$.BoundClosure$1 = [H, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, p0);
  },
  $is_args1: true
}];

$$.BoundClosure$2 = [V, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  $is_args2: true
}];

$$.BoundClosure$20 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$2: function(p0, p1) {
    return this.__js_helper$_target.call(this._self, p0, p1);
  },
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.BoundClosure$0 = [P, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$0: function() {
    return this.__js_helper$_target.call(this._self);
  }
}];

$$.BoundClosure$i1 = [W, {"": "BoundClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  call$1: function(p0) {
    return this.__js_helper$_target.call(this._self, this._receiver, p0);
  },
  $is_args1: true
}];

$$.Closure$2 = [H, {"": "Closure;call$2,$name", $is_args2: true}];

$$.Closure$0 = [H, {"": "Closure;call$0,$name"}];

$$.Closure$7 = [H, {"": "Closure;call$7,$name"}];

$$.Closure$1 = [P, {"": "Closure;call$1,$name", $is_args1: true}];

$$.Closure$20 = [P, {"": "Closure;call$2,$name",
  call$1: function(p0) {
    return this.call$2(p0, null);
  },
  $is_args2: true,
  $is_args1: true
}];

$$.Closure$4 = [W, {"": "Closure;call$4,$name"}];

(function (reflectionData) {
  function map(x){x={x:x};delete x.x;return x}
  if (!init.libraries) init.libraries = [];
  if (!init.mangledNames) init.mangledNames = map();
  if (!init.mangledGlobalNames) init.mangledGlobalNames = map();
  if (!init.statics) init.statics = map();
  if (!init.typeInformation) init.typeInformation = map();
  if (!init.globalFunctions) init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor[""];
    var classes = [];
    var functions = [];
    function processStatics(descriptor) {
      for (var property in descriptor) {
        if (!hasOwnProperty.call(descriptor, property)) continue;
        if (property === "") continue;
        var element = descriptor[property];
        var firstChar = property.substring(0, 1);
        var previousProperty;
        if (firstChar === "+") {
          mangledGlobalNames[previousProperty] = property.substring(1);
          if (descriptor[property] == 1) descriptor[previousProperty].$reflectable = 1;
          if (element && element.length) init.typeInformation[previousProperty] = element;
        } else if (firstChar === "@") {
          property = property.substring(1);
          $[property]["@"] = element;
        } else if (firstChar === "*") {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods) {
            descriptor.$methodsWithOptionalArguments = optionalMethods = {}
          }
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
          init.globalFunctions[property] = element;
        } else {
          previousProperty = property;
          var newDesc = {};
          var previousProp;
          for (var prop in element) {
            if (!hasOwnProperty.call(element, prop)) continue;
            firstChar = prop.substring(0, 1);
            if (prop === "static") {
              processStatics(init.statics[property] = element[prop]);
            } else if (firstChar === "+") {
              mangledNames[previousProp] = prop.substring(1);
              if (element[prop] == 1) element[previousProp].$reflectable = 1;
            } else if (firstChar === "@" && prop !== "@") {
              newDesc[prop.substring(1)]["@"] = element[prop];
            } else if (firstChar === "*") {
              newDesc[previousProp].$defaultValues = element[prop];
              var optionalMethods = newDesc.$methodsWithOptionalArguments;
              if (!optionalMethods) {
                newDesc.$methodsWithOptionalArguments = optionalMethods={}
              }
              optionalMethods[prop] = previousProp;
            } else {
              newDesc[previousProp = prop] = element[prop];
            }
          }
          $$[property] = [globalObject, newDesc];
          classes.push(property);
        }
      }
    }
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot,
                    globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
JS_CONST: {"": "Object;code"}}],
["_interceptors", "dart:_interceptors", , J, {
getInterceptor: function(object) {
  return void 0;
},

makeDispatchRecord: function(interceptor, proto, extension, indexability) {
  return {i: interceptor, p: proto, e: extension, x: indexability};
},

getNativeInterceptor: function(object) {
  var record, proto, objectProto, interceptor;
  record = object[init.dispatchPropertyName];
  if (record == null)
    if ($.initNativeDispatchFlag == null) {
      H.initNativeDispatch();
      record = object[init.dispatchPropertyName];
    }
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
  }
  interceptor = H.lookupAndCacheInterceptor(object);
  if (interceptor == null)
    return C.UnknownJavaScriptObject_methods;
  return interceptor;
},

Interceptor: {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return H.Primitives_objectToString(receiver);
  },
  "%": "ArrayBuffer|Blob|CanvasGradient|CanvasPattern|DOMError|DOMImplementation|File|FileError|MediaError|MediaKeyError|Navigator|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedTransformList|SVGPointList"
},

JSBool: {"": "bool/Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
},

JSNull: {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
},

JavaScriptObject: {"": "Interceptor;",
  get$hashCode: function(_) {
    return 0;
  }
},

PlainJavaScriptObject: {"": "JavaScriptObject;"},

UnknownJavaScriptObject: {"": "JavaScriptObject;"},

JSArray: {"": "List/Interceptor;",
  remove$1: function(receiver, element) {
    var i;
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("remove"));
    for (i = 0; i < receiver.length; ++i)
      if (J.$eq(receiver[i], element)) {
        receiver.splice(i, 1);
        return true;
      }
    return false;
  },
  forEach$1: function(receiver, f) {
    return H.IterableMixinWorkaround_forEach(receiver, f);
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  get$first: function(receiver) {
    if (receiver.length > 0)
      return receiver[0];
    throw H.wrapException(P.StateError$("No elements"));
  },
  toString$0: function(receiver) {
    return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
  },
  toList$1$growable: function(receiver, growable) {
    return P.List_List$from(receiver, growable, H.getRuntimeTypeArgument(receiver, "JSArray", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, receiver.length, 0, null);
  },
  get$hashCode: function(receiver) {
    return H.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (newLength < 0)
      throw H.wrapException(P.RangeError$value(newLength));
    if (!!receiver.fixed$length)
      H.throwExpression(P.UnsupportedError$("set length"));
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      H.throwExpression(P.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $asList: null,
  $isList: true,
  $isEfficientLength: true
},

JSMutableArray: {"": "JSArray;", $isJSMutableArray: true,
  $asJSArray: function() {
    return [null];
  },
  $asList: function() {
    return [null];
  }
},

JSFixedArray: {"": "JSMutableArray;"},

JSExtendableArray: {"": "JSMutableArray;", $isJSExtendableArray: true},

JSNumber: {"": "num/Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (typeof b !== "number")
      throw H.wrapException(new P.ArgumentError(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  toInt$0: function(receiver) {
    var t1;
    if (receiver >= -2147483648 && receiver <= 2147483647)
      return receiver | 0;
    if (isFinite(receiver)) {
      t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
      return t1 + 0;
    }
    throw H.wrapException(P.UnsupportedError$('' + receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
      return receiver / other | 0;
    else
      return this._slowTdiv$1(receiver, other);
  },
  _slowTdiv$1: function(receiver, other) {
    return this.toInt$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw H.wrapException(P.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver > other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw H.wrapException(P.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true,
  static: {
"": "JSNumber__MIN_INT32,JSNumber__MAX_INT32",
}

},

JSInt: {"": "int/JSNumber;", $isdouble: true, $isnum: true, $isint: true},

JSDouble: {"": "double/JSNumber;", $isdouble: true, $isnum: true},

JSString: {"": "String/Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(P.ArgumentError$(index));
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    if (index >= receiver.length)
      throw H.wrapException(P.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    return receiver + other;
  },
  startsWith$2: function(receiver, pattern, index) {
    var endIndex;
    if (index < 0 || index > receiver.length)
      throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
    endIndex = index + pattern.length;
    if (endIndex > receiver.length)
      return false;
    return pattern === receiver.substring(index, endIndex);
  },
  startsWith$1: function($receiver, pattern) {
    return this.startsWith$2($receiver, pattern, 0);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
      H.throwExpression(P.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (typeof endIndex !== "number")
      throw H.iae(endIndex);
    if (startIndex > endIndex)
      throw H.wrapException(P.RangeError$value(startIndex));
    if (endIndex > receiver.length)
      throw H.wrapException(P.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (typeof other !== "string")
      throw H.wrapException(new P.ArgumentError(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var t1, hash, i;
    for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw H.wrapException(new P.ArgumentError(index));
    if (index >= receiver.length || index < 0)
      throw H.wrapException(P.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
}}],
["_isolate_helper", "dart:_isolate_helper", , H, {
_callInIsolate: function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
},

startRootIsolate: function(entry) {
  var rootContext;
  $globalState = H._Manager$(entry);
  if ($globalState.isWorker === true)
    return;
  rootContext = H._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  if (!!entry.$is_args1)
    rootContext.eval$1(new H.startRootIsolate_closure(entry));
  else if (!!entry.$is_args2)
    rootContext.eval$1(new H.startRootIsolate_closure0(entry));
  else
    rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
},

IsolateNatives_computeThisScript: function() {
  var currentScript = init.currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  if (typeof version == "function" && typeof os == "object" && "system" in os)
    return H.IsolateNatives_computeThisScriptD8();
  if (typeof version == "function" && typeof system == "function")
    return thisFilename();
  return;
},

IsolateNatives_computeThisScriptD8: function() {
  var stack, matches;
  stack = new Error().stack;
  if (stack == null) {
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
    if (stack == null)
      throw H.wrapException(P.UnsupportedError$("No stack trace"));
  }
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + stack + "\""));
},

IsolateNatives__processWorkerMessage: function(sender, e) {
  var msg, t1, functionName, entryPoint, args, message, isSpawnUri, replyTo, context, t2;
  msg = H._deserializeMessage(e.data);
  t1 = J.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      functionName = t1.$index(msg, "functionName");
      entryPoint = functionName == null ? $globalState.entry : init.globalFunctions[functionName];
      args = t1.$index(msg, "args");
      message = H._deserializeMessage(t1.$index(msg, "msg"));
      isSpawnUri = t1.$index(msg, "isSpawnUri");
      replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
      context = H._IsolateContext$();
      $globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      H.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "args"), t1.$index(msg, "msg"), t1.$index(msg, "isSpawnUri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      t1 = $globalState.managers;
      t2 = $.get$IsolateNatives_workerIds();
      t1.remove$1(t1, t2.$index(t2, sender));
      sender.terminate();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      H.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "print", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      } else
        P.print(t1.$index(msg, "msg"));
      break;
    case "error":
      throw H.wrapException(t1.$index(msg, "msg"));
    default:
  }
},

IsolateNatives__log: function(msg) {
  var trace, t1, t2, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t2 = H._serializeMessage(H.fillLiteralMap(["command", "log", "msg", msg], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    t1.toString;
    self.postMessage(t2);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      H.unwrapException(exception);
      trace = new H._StackTrace(exception, null);
      throw H.wrapException(P.Exception_Exception(trace));
    }

},

IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, replyTo) {
  var t1;
  H.Primitives_initializeStatics($globalState.currentContext.id);
  $.lazyPort = H.ReceivePortImpl$();
  t1 = $.lazyPort;
  t1.toString;
  J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, $globalState.currentContext.id)]);
  if (isSpawnUri !== true)
    topLevel.call$1(message);
  else {
    t1 = J.getInterceptor(topLevel);
    if (!!t1.$is_args2)
      topLevel.call$2(args, message);
    else if (!!t1.$is_args1)
      topLevel.call$1(args);
    else
      topLevel.call$0();
  }
},

IsolateNatives__spawnWorker: function(functionName, uri, args, message, isSpawnUri, replyPort) {
  var worker, t1, workerId;
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.onmessage = function(e) { H.IsolateNatives__processWorkerMessage$closure.call$2(worker, e); };
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  t1 = $.get$IsolateNatives_workerIds();
  t1.$indexSet(t1, worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage(H._serializeMessage(H.fillLiteralMap(["command", "start", "id", workerId, "replyTo", H._serializeMessage(replyPort), "args", args, "msg", H._serializeMessage(message), "isSpawnUri", isSpawnUri, "functionName", functionName], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null))));
},

_waitForPendingPorts: function(message, callback) {
  var finder = H._PendingSendPortFinder$();
  finder.traverse$1(message);
  P.Future_wait(finder.ports).then$1(new H._waitForPendingPorts_closure(callback));
},

_serializeMessage: function(message) {
  var t1;
  if ($globalState.supportsWorkers === true) {
    t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  } else {
    t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
    t1._visited = new H._JsVisitedMap(null);
    return t1.traverse$1(message);
  }
},

_deserializeMessage: function(message) {
  if ($globalState.supportsWorkers === true)
    return new H._JsDeserializer(null).deserialize$1(message);
  else
    return message;
},

_MessageTraverser_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

_Deserializer_isPrimitive: function(x) {
  return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
},

startRootIsolate_closure: {"": "Closure;entry_0",
  call$0: function() {
    this.entry_0.call$1([]);
  }
},

startRootIsolate_closure0: {"": "Closure;entry_1",
  call$0: function() {
    this.entry_1.call$2([], null);
  }
},

_Manager: {"": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { H.IsolateNatives__processWorkerMessage$closure.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  _Manager$1: function(entry) {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, H._IsolateContext);
    this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, null);
    if (this.isWorker === true) {
      this.mainManager = new H._MainManagerStub();
      this._nativeInitWorkerMessageHandler$0();
    }
  },
  static: {
_Manager$: function(entry) {
  var t1 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
  t1._Manager$1(entry);
  return t1;
}}

},

_IsolateContext: {"": "Object;id,ports,isolateStatics<",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        $ = old.get$isolateStatics();
    }
    return result;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId))
      throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    if (this.ports._collection$_length === 0) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $globalState;
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = P.LinkedHashMap_LinkedHashMap(null, null, null, J.JSInt, P.ReceivePort);
    this.isolateStatics = new Isolate();
  },
  static: {
_IsolateContext$: function() {
  var t1 = new H._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
}}

},

_EventLoop: {"": "Object;events,activeTimerCount",
  dequeue$0: function() {
    var t1 = this.events;
    if (t1._head === t1._tail)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null && $globalState.isolates.containsKey$1($globalState.rootContext.id) && $globalState.fromCommandLine === true && $globalState.rootContext.ports._collection$_length === 0)
      throw H.wrapException(P.Exception_Exception("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event, t1, t2;
    $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      t1 = $globalState;
      if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop.activeTimerCount === 0) {
        t1 = t1.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "close"], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new H._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1, t2;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        trace = new H._StackTrace(exception, null);
        t1 = $globalState.mainManager;
        t2 = H._serializeMessage(H.fillLiteralMap(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
        t1.toString;
        self.postMessage(t2);
      }

  }
},

_EventLoop__runHelper_next: {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    P.Timer_Timer(C.Duration_0, this);
  }
},

_IsolateEvent: {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
},

_MainManagerStub: {"": "Object;"},

IsolateNatives__processWorkerMessage_closure: {"": "Closure;entryPoint_0,args_1,message_2,isSpawnUri_3,replyTo_4",
  call$0: function() {
    H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.replyTo_4);
  }
},

_BaseSendPort: {"": "Object;", $isSendPort: true},

_NativeJsSendPort: {"": "_BaseSendPort;_receivePort,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._NativeJsSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
},

_NativeJsSendPort_send_closure: {"": "Closure;this_1,message_2",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = $globalState.isolates;
    t3 = this.this_1;
    t4 = t3._isolateId;
    isolate = t2.$index(t2, t4);
    if (isolate == null)
      return;
    if ((t3._receivePort.get$_controller()._state & 4) !== 0)
      return;
    shouldSerialize = $globalState.currentContext != null && $globalState.currentContext.id !== t4;
    msg = this.message_2;
    t1.msg_0 = msg;
    if (shouldSerialize)
      t1.msg_0 = H._serializeMessage(t1.msg_0);
    t2 = $globalState.topEventLoop;
    t4 = "receive " + H.S(msg);
    t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send__closure(t1, t3, shouldSerialize), t4));
  }
},

_NativeJsSendPort_send__closure: {"": "Closure;box_0,this_3,shouldSerialize_4",
  call$0: function() {
    var t1, t2;
    t1 = this.this_3._receivePort;
    if ((t1.get$_controller()._state & 4) === 0) {
      if (this.shouldSerialize_4) {
        t2 = this.box_0;
        t2.msg_0 = H._deserializeMessage(t2.msg_0);
      }
      t1 = t1._controller;
      t2 = this.box_0.msg_0;
      if (t1._state >= 4)
        H.throwExpression(t1._badEventState$0());
      t1._async$_add$1(t2);
    }
  }
},

_WorkerSendPort: {"": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
  send$1: function(_, message) {
    H._waitForPendingPorts(message, new H._WorkerSendPort_send_closure(this, message));
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = this._workerId;
    if (typeof t1 !== "number")
      throw t1.$shl();
    t2 = this._isolateId;
    if (typeof t2 !== "number")
      throw t2.$shl();
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw H.iae(t3);
    return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
},

_WorkerSendPort_send_closure: {"": "Closure;this_0,message_1",
  call$0: function() {
    var t1, workerMessage, t2, manager;
    t1 = this.this_0;
    workerMessage = H._serializeMessage(H.fillLiteralMap(["command", "message", "port", t1, "msg", this.message_1], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null)));
    if ($globalState.isWorker === true) {
      $globalState.mainManager.toString;
      self.postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1._workerId);
      if (manager != null)
        manager.postMessage(workerMessage);
    }
  }
},

ReceivePortImpl: {"": "Stream;_id<,_controller<",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = this._controller;
    t1.toString;
    t1 = new P._ControllerStream(t1);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1.listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
  },
  close$0: function(_) {
    var t1 = this._controller;
    if ((t1._state & 4) !== 0)
      return;
    t1.close$0(t1);
    $globalState.currentContext.unregister$1(this._id);
  },
  get$close: function(_receiver) {
    return new H.BoundClosure$i0(this, H.ReceivePortImpl.prototype.close$0, _receiver, "close$0");
  },
  ReceivePortImpl$0: function() {
    this._controller = P.StreamController_StreamController(this.get$close(this), null, null, null, true, null);
    var t1 = $globalState.currentContext;
    t1.register$2(t1, this._id, this);
  },
  static: {
"": "ReceivePortImpl__nextFreeId",
ReceivePortImpl$: function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = t1 + 1;
  t1 = new H.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
}}

},

_waitForPendingPorts_closure: {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $is_args1: true
},

_PendingSendPortFinder: {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    J.forEach$1$ax(list, this.get$_dispatch());
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    J.forEach$1$ax(map.get$values(map), this.get$_dispatch());
  },
  visitSendPort$1: function(port) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = new H._JsVisitedMap(null);
  },
  static: {
_PendingSendPortFinder$: function() {
  var t1 = new H._PendingSendPortFinder([], new H._MessageTraverserVisitedMap());
  t1._PendingSendPortFinder$0();
  return t1;
}}

},

_JsSerializer: {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (!!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsCopier: {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (!!x.$is_NativeJsSendPort)
      return new H._NativeJsSendPort(x._receivePort, x._isolateId);
    if (!!x.$is_WorkerSendPort)
      return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
    throw H.wrapException("Illegal underlying port " + H.S(x));
  }
},

_JsDeserializer: {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = J.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if (J.$eq(managerId, $globalState.currentManagerId)) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return new H._NativeJsSendPort(receivePort, isolateId);
    } else
      return new H._WorkerSendPort(managerId, receivePortId, isolateId);
  }
},

_JsVisitedMap: {"": "Object;tagged",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    this.tagged.push(object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = P.List_List(null, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
},

_MessageTraverserVisitedMap: {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
},

_MessageTraverser: {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    if (H._MessageTraverser_isPrimitive(x))
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    var t1;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    t1 = J.getInterceptor(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!t1.$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!t1.$isSendPort)
      return this.visitSendPort$1(x);
    return this.visitObject$1(x);
  },
  get$_dispatch: function() {
    return new H.BoundClosure$1(this, H._MessageTraverser.prototype._dispatch$1, null, "_dispatch$1");
  },
  visitObject$1: function(x) {
    throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
  }
},

_Copier: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, t2, i;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = P.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(copy, i);
      copy[i] = t2;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new H._Copier_visitMap_closure(t1, this));
    return t1.copy_0;
  }
},

_Copier_visitMap_closure: {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1 = this.this_1;
    J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
  },
  $is_args2: true
},

_Serializer: {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var t1, len, result, i, t2;
    t1 = J.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = P.List_List(len, null);
    for (i = 0; i < len; ++i) {
      t2 = this._dispatch$1(t1.$index(list, i));
      if (i >= len)
        throw H.ioore(result, i);
      result[i] = t2;
    }
    return result;
  }
},

_Deserializer: {"": "Object;",
  deserialize$1: function(x) {
    if (H._Deserializer_isPrimitive(x))
      return x;
    this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    t1 = J.getInterceptor$asx(x);
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = J.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    if (typeof len !== "number")
      throw H.iae(len);
    i = 0;
    for (; i < len; ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i;
    result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
    t1 = J.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    values = t1.$index(x, 3);
    t1 = J.getInterceptor$asx(keys);
    len = t1.get$length(keys);
    if (typeof len !== "number")
      throw H.iae(len);
    t2 = J.getInterceptor$asx(values);
    i = 0;
    for (; i < len; ++i)
      result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
    return result;
  },
  deserializeObject$1: function(x) {
    throw H.wrapException("Unexpected serialized object");
  }
},

TimerImpl: {"": "Object;_once,_inEventLoop,_handle",
  TimerImpl$2: function(milliseconds, callback) {
    var t1, t2;
    if (milliseconds === 0)
      t1 = $.get$globalThis().setTimeout == null || $globalState.isWorker === true;
    else
      t1 = false;
    if (t1) {
      this._handle = 1;
      t1 = $globalState.topEventLoop;
      t2 = $globalState.currentContext;
      t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
      this._inEventLoop = true;
    } else if ($.get$globalThis().setTimeout != null) {
      t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
    } else
      throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
  },
  static: {
TimerImpl$: function(milliseconds, callback) {
  var t1 = new H.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
}}

},

TimerImpl_internalCallback: {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.this_0._handle = null;
    this.callback_1.call$0();
  }
},

TimerImpl_internalCallback0: {"": "Closure;this_2,callback_3",
  call$0: function() {
    this.this_2._handle = null;
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
    this.callback_3.call$0();
  }
}}],
["_js_helper", "dart:_js_helper", , H, {
isJsIndexable: function(object, record) {
  var result, t1;
  if (record != null) {
    result = record.x;
    if (result != null)
      return result;
  }
  t1 = J.getInterceptor(object);
  return typeof object === "object" && object !== null && !!t1.$isJavaScriptIndexingBehavior;
},

S: function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = J.toString$0(value);
  if (typeof res !== "string")
    throw H.wrapException(P.ArgumentError$(value));
  return res;
},

Primitives_initializeStatics: function(id) {
  $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + H.S(id));
  $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + H.S(id));
},

Primitives_objectHashCode: function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = Math.random() * 0x3fffffff | 0;
    object.$identityHash = hash;
  }
  return hash;
},

Primitives_objectTypeName: function(object) {
  var $name, decompiled;
  $name = C.JS_CONST_86y(J.getInterceptor(object));
  if ($name === "Object") {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  if (J.getInterceptor$s($name).codeUnitAt$1($name, 0) === 36)
    $name = C.JSString_methods.substring$1($name, 1);
  return $name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null);
},

Primitives_objectToString: function(object) {
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Primitives_newFixedList: function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
},

Primitives__fromCharCodeApply: function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
},

Primitives_stringFromCodePoints: function(codePoints) {
  var a, t1, i;
  a = [];
  a.$builtinTypeInfo = [J.JSInt];
  for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + (C.JSInt_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw H.wrapException(P.ArgumentError$(i));
  }
  return H.Primitives__fromCharCodeApply(a);
},

Primitives_stringFromCharCodes: function(charCodes) {
  var t1, i;
  for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
    i = t1._current;
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw H.wrapException(P.ArgumentError$(i));
    if (i < 0)
      throw H.wrapException(P.ArgumentError$(i));
    if (i > 65535)
      return H.Primitives_stringFromCodePoints(charCodes);
  }
  return H.Primitives__fromCharCodeApply(charCodes);
},

Primitives_getProperty: function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  return object[key];
},

Primitives_setProperty: function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw H.wrapException(new P.ArgumentError(object));
  object[key] = value;
},

iae: function(argument) {
  throw H.wrapException(P.ArgumentError$(argument));
},

ioore: function(receiver, index) {
  if (receiver == null)
    J.get$length$asx(receiver);
  if (typeof index !== "number" || Math.floor(index) !== index)
    H.iae(index);
  throw H.wrapException(P.RangeError$value(index));
},

wrapException: function(ex) {
  var wrapper;
  if (ex == null)
    ex = new P.NullThrownError();
  wrapper = new Error();
  wrapper.dartException = ex;
  if ("defineProperty" in Object) {
    Object.defineProperty(wrapper, "message", { get: H.toStringWrapper$closure.call$0 });
    wrapper.name = "";
  } else
    wrapper.toString = H.toStringWrapper$closure.call$0;
  return wrapper;
},

toStringWrapper: function() {
  return J.toString$0(this.dartException);
},

throwExpression: function(ex) {
  throw H.wrapException(ex);
},

unwrapException: function(ex) {
  var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
  t1 = new H.unwrapException_saveStackTrace(ex);
  if (ex == null)
    return;
  if (typeof ex !== "object")
    return ex;
  if ("dartException" in ex)
    return t1.call$1(ex.dartException);
  else if (!("message" in ex))
    return ex;
  message = ex.message;
  if ("number" in ex && typeof ex.number == "number") {
    number = ex.number;
    ieErrorCode = number & 65535;
    if ((C.JSInt_methods.$shr(number, 16) & 8191) === 10)
      switch (ieErrorCode) {
        case 438:
          return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
        case 445:
        case 5007:
          t2 = H.S(message) + " (Error " + ieErrorCode + ")";
          return t1.call$1(new H.NullError(t2, null));
        default:
      }
  }
  if (ex instanceof TypeError) {
    t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
    t3 = $.get$TypeErrorDecoder_notClosurePattern();
    t4 = $.get$TypeErrorDecoder_nullCallPattern();
    nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
    t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
    t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
    t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
    $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
    t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
    t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
    match = t2.matchTypeError$1(message);
    if (match != null)
      return t1.call$1(H.JsNoSuchMethodError$(message, match));
    else {
      match = t3.matchTypeError$1(message);
      if (match != null) {
        match.method = "call";
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      } else {
        match = t4.matchTypeError$1(message);
        if (match == null) {
          match = nullLiteralCall.matchTypeError$1(message);
          if (match == null) {
            match = t5.matchTypeError$1(message);
            if (match == null) {
              match = t6.matchTypeError$1(message);
              if (match == null) {
                match = t7.matchTypeError$1(message);
                if (match == null) {
                  match = nullLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = t8.matchTypeError$1(message);
                    if (match == null) {
                      match = t9.matchTypeError$1(message);
                      t2 = match != null;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
        } else
          t2 = true;
        if (t2) {
          t2 = match == null ? null : match.method;
          return t1.call$1(new H.NullError(message, t2));
        }
      }
    }
    t2 = typeof message === "string" ? message : "";
    return t1.call$1(new H.UnknownJsTypeError(t2));
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return new P.StackOverflowError();
    return t1.call$1(new P.ArgumentError(null));
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return new P.StackOverflowError();
  return ex;
},

objectHashCode: function(object) {
  if (object == null || typeof object != 'object')
    return J.get$hashCode$(object);
  else
    return H.Primitives_objectHashCode(object);
},

fillLiteralMap: function(keyValuePairs, result) {
  var $length, index, index0, index1;
  $length = keyValuePairs.length;
  for (index = 0; index < $length; index = index1) {
    index0 = index + 1;
    index1 = index0 + 1;
    result.$indexSet(result, keyValuePairs[index], keyValuePairs[index0]);
  }
  return result;
},

invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
  var t1 = J.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0))
    return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
  else if (t1.$eq(numberOfArguments, 1))
    return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2))
    return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
  else if (t1.$eq(numberOfArguments, 3))
    return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
  else if (t1.$eq(numberOfArguments, 4))
    return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
  else
    throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
},

convertDartClosureToJS: function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function(closure, arity, context, invoke) {  return function(a1, a2, a3, a4) {     return invoke(closure, context, arity, a1, a2, a3, a4);  };})(closure,arity,$globalState.currentContext,H.invokeClosure$closure.call$7);
  closure.$identity = $function;
  return $function;
},

throwCyclicInit: function(staticName) {
  throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
},

createRuntimeType: function($name) {
  return new H.TypeImpl($name, null);
},

setRuntimeTypeInfo: function(target, typeInfo) {
  if (target != null)
    target.$builtinTypeInfo = typeInfo;
  return target;
},

getRuntimeTypeInfo: function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
},

getRuntimeTypeArguments: function(target, substitutionName) {
  return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
},

getRuntimeTypeArgument: function(target, substitutionName, index) {
  var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
  return $arguments == null ? null : $arguments[index];
},

getRuntimeTypeAsString: function(runtimeType, onTypeVariable) {
  return runtimeType[0].builtin$cls + H.joinArguments(runtimeType, 1, onTypeVariable);
},

runtimeTypeToString: function(type, onTypeVariable) {
  if (type == null)
    return "dynamic";
  else if (typeof type === "object" && type !== null && type.constructor === Array)
    return H.getRuntimeTypeAsString(type, onTypeVariable);
  else if (typeof type == "function")
    return type.builtin$cls;
  else if (typeof type === "number" && Math.floor(type) === type)
    return C.JSInt_methods.toString$0(type);
  else
    return;
},

joinArguments: function(types, startIndex, onTypeVariable) {
  var buffer, index, firstArgument, allDynamic, argument, str;
  if (types == null)
    return "";
  buffer = P.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    str = H.runtimeTypeToString(argument, onTypeVariable);
    str = typeof str === "string" ? str : H.S(str);
    buffer._contents = buffer._contents + str;
  }
  return allDynamic ? "" : "<" + H.S(buffer) + ">";
},

substitute: function(substitution, $arguments) {
  if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function") {
    substitution = H.invokeOn(substitution, null, $arguments);
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function")
      $arguments = H.invokeOn(substitution, null, $arguments);
  }
  return $arguments;
},

computeSignature: function(signature, context, contextName) {
  return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
},

invokeOn: function($function, receiver, $arguments) {
  return $function.apply(receiver, $arguments);
},

toStringForNativeObject: function(obj) {
  var t1 = $.getTagFunction;
  return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
},

hashCodeForNativeObject: function(object) {
  return H.Primitives_objectHashCode(object);
},

defineProperty: function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
},

lookupAndCacheInterceptor: function(obj) {
  var tag, record, interceptor, interceptorClass, mark, t1;
  tag = $.getTagFunction.call$1(obj);
  record = $.dispatchRecordsForInstanceTags[tag];
  if (record != null) {
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  interceptor = $.interceptorsForUncacheableTags[tag];
  if (interceptor != null)
    return interceptor;
  interceptorClass = init.interceptorsByTag[tag];
  if (interceptorClass == null) {
    tag = $.alternateTagFunction.call$2(obj, tag);
    if (tag != null) {
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
    }
  }
  if (interceptorClass == null)
    return;
  interceptor = interceptorClass.prototype;
  mark = tag[0];
  if (mark === "!") {
    record = H.makeLeafDispatchRecord(interceptor);
    $.dispatchRecordsForInstanceTags[tag] = record;
    Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return record.i;
  }
  if (mark === "~") {
    $.interceptorsForUncacheableTags[tag] = interceptor;
    return interceptor;
  }
  if (mark === "-") {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  }
  if (mark === "+")
    return H.patchInteriorProto(obj, interceptor);
  if (mark === "*")
    throw H.wrapException(P.UnimplementedError$(tag));
  if (init.leafTags[tag] === true) {
    t1 = H.makeLeafDispatchRecord(interceptor);
    Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
    return t1.i;
  } else
    return H.patchInteriorProto(obj, interceptor);
},

patchInteriorProto: function(obj, interceptor) {
  var proto, record;
  proto = Object.getPrototypeOf(obj);
  record = J.makeDispatchRecord(interceptor, proto, null, null);
  Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
  return interceptor;
},

makeLeafDispatchRecord: function(interceptor) {
  return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
},

makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
  var interceptor = interceptorClass.prototype;
  if (init.leafTags[tag] === true)
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  else
    return J.makeDispatchRecord(interceptor, proto, null, null);
},

initNativeDispatch: function() {
  if (true === $.initNativeDispatchFlag)
    return;
  $.initNativeDispatchFlag = true;
  H.initNativeDispatchContinue();
},

initNativeDispatchContinue: function() {
  var map, tags, i, tag, proto, record, interceptorClass;
  $.dispatchRecordsForInstanceTags = Object.create(null);
  $.interceptorsForUncacheableTags = Object.create(null);
  H.initHooks();
  map = init.interceptorsByTag;
  tags = Object.getOwnPropertyNames(map);
  if (typeof window != "undefined") {
    window;
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      proto = $.prototypeForTagFunction.call$1(tag);
      if (proto != null) {
        record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
        if (record != null)
          Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      }
    }
  }
  for (i = 0; i < tags.length; ++i) {
    tag = tags[i];
    if (/^[A-Za-z_]/.test(tag)) {
      interceptorClass = map[tag];
      map["!" + tag] = interceptorClass;
      map["~" + tag] = interceptorClass;
      map["-" + tag] = interceptorClass;
      map["+" + tag] = interceptorClass;
      map["*" + tag] = interceptorClass;
    }
  }
},

initHooks: function() {
  var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
  hooks = C.JS_CONST_TtD();
  hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_rD3, H.applyHooksTransformer(C.JS_CONST_6qb, H.applyHooksTransformer(C.JS_CONST_Cbr(C.JS_CONST_86y), hooks))))));
  if (typeof dartNativeDispatchHooksTransformer != "undefined") {
    transformers = dartNativeDispatchHooksTransformer;
    if (typeof transformers == "function")
      transformers = [transformers];
    if (transformers.constructor == Array)
      for (i = 0; i < transformers.length; ++i) {
        transformer = transformers[i];
        if (typeof transformer == "function")
          hooks = transformer(hooks) || hooks;
      }
  }
  getTag = hooks.getTag;
  getUnknownTag = hooks.getUnknownTag;
  prototypeForTag = hooks.prototypeForTag;
  $.getTagFunction = new H.initHooks_closure(getTag);
  $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
  $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
},

applyHooksTransformer: function(transformer, hooks) {
  return transformer(hooks) || hooks;
},

TypeErrorDecoder: {"": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
  matchTypeError$1: function(message) {
    var match, result, t1;
    match = new RegExp(this._pattern).exec(message);
    if (match == null)
      return;
    result = {};
    t1 = this._arguments;
    if (t1 !== -1)
      result.arguments = match[t1 + 1];
    t1 = this._argumentsExpr;
    if (t1 !== -1)
      result.argumentsExpr = match[t1 + 1];
    t1 = this._expr;
    if (t1 !== -1)
      result.expr = match[t1 + 1];
    t1 = this._method;
    if (t1 !== -1)
      result.method = match[t1 + 1];
    t1 = this._receiver;
    if (t1 !== -1)
      result.receiver = match[t1 + 1];
    return result;
  },
  static: {
"": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern",
TypeErrorDecoder_extractPattern: function(message) {
  var match, $arguments, argumentsExpr, expr, method, receiver;
  message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
  match = message.match(/\\\$[a-zA-Z]+\\\$/g);
  if (match == null)
    match = [];
  $arguments = match.indexOf("\\$arguments\\$");
  argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
  expr = match.indexOf("\\$expr\\$");
  method = match.indexOf("\\$method\\$");
  receiver = match.indexOf("\\$receiver\\$");
  return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
},

TypeErrorDecoder_provokeCallErrorOn: function(expression) {
  return function($expr$) {
  var $argumentsExpr$ = '$arguments$'
  try {
    $expr$.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokeCallErrorOnNull: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    null.$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
  return function() {
  var $argumentsExpr$ = '$arguments$'
  try {
    (void 0).$method$($argumentsExpr$);
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
  return function($expr$) {
  try {
    $expr$.$method$;
  } catch (e) {
    return e.message;
  }
}(expression);
},

TypeErrorDecoder_provokePropertyErrorOnNull: function() {
  return function() {
  try {
    null.$method$;
  } catch (e) {
    return e.message;
  }
}();
},

TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
  return function() {
  try {
    (void 0).$method$;
  } catch (e) {
    return e.message;
  }
}();
}}

},

NullError: {"": "Error;_message,_method",
  toString$0: function(_) {
    var t1 = this._method;
    if (t1 == null)
      return "NullError: " + H.S(this._message);
    return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
  },
  $isError: true
},

JsNoSuchMethodError: {"": "Error;_message,_method,_receiver",
  toString$0: function(_) {
    var t1, t2;
    t1 = this._method;
    if (t1 == null)
      return "NoSuchMethodError: " + H.S(this._message);
    t2 = this._receiver;
    if (t2 == null)
      return "NoSuchMethodError: Cannot call \"" + t1 + "\" (" + H.S(this._message) + ")";
    return "NoSuchMethodError: Cannot call \"" + t1 + "\" on \"" + t2 + "\" (" + H.S(this._message) + ")";
  },
  $isError: true,
  static: {
JsNoSuchMethodError$: function(_message, match) {
  var t1, t2;
  t1 = match == null;
  t2 = t1 ? null : match.method;
  t1 = t1 ? null : match.receiver;
  return new H.JsNoSuchMethodError(_message, t2, t1);
}}

},

UnknownJsTypeError: {"": "Error;_message",
  toString$0: function(_) {
    var t1 = this._message;
    return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
  }
},

unwrapException_saveStackTrace: {"": "Closure;ex_0",
  call$1: function(error) {
    var t1 = J.getInterceptor(error);
    if (typeof error === "object" && error !== null && !!t1.$isError)
      if (error.$thrownJsError == null)
        error.$thrownJsError = this.ex_0;
    return error;
  },
  $is_args1: true
},

_StackTrace: {"": "Object;_exception,_trace",
  toString$0: function(_) {
    var t1, trace;
    t1 = this._trace;
    if (t1 != null)
      return t1;
    t1 = this._exception;
    trace = typeof t1 === "object" ? t1.stack : null;
    t1 = trace == null ? "" : trace;
    this._trace = t1;
    return t1;
  }
},

invokeClosure_closure: {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
},

invokeClosure_closure0: {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
},

invokeClosure_closure1: {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
},

invokeClosure_closure2: {"": "Closure;closure_6,arg1_7,arg2_8,arg3_9",
  call$0: function() {
    return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
  }
},

invokeClosure_closure3: {"": "Closure;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
  call$0: function() {
    return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
  }
},

Closure: {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
},

BoundClosure: {"": "Closure;_self,__js_helper$_target,_receiver,__js_helper$_name",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isBoundClosure)
      return false;
    return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
  },
  get$hashCode: function(_) {
    var t1, receiverHashCode;
    t1 = this._receiver;
    if (t1 == null)
      receiverHashCode = H.Primitives_objectHashCode(this._self);
    else
      receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
    return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
  },
  $isBoundClosure: true
},

TypeImpl: {"": "Object;_typeName,_unmangledName",
  toString$0: function(_) {
    var t1, unmangledName, unmangledName0;
    t1 = this._unmangledName;
    if (t1 != null)
      return t1;
    unmangledName = this._typeName;
    unmangledName0 = H.unmangleGlobalNameIfPreservedAnyways(unmangledName);
    unmangledName = unmangledName0 == null ? unmangledName : unmangledName0;
    this._unmangledName = unmangledName;
    return unmangledName;
  },
  get$hashCode: function(_) {
    return J.get$hashCode$(this._typeName);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    return typeof other === "object" && other !== null && !!t1.$isTypeImpl && J.$eq(this._typeName, other._typeName);
  },
  $isTypeImpl: true
},

initHooks_closure: {"": "Closure;getTag_0",
  call$1: function(o) {
    return this.getTag_0(o);
  },
  $is_args1: true
},

initHooks_closure0: {"": "Closure;getUnknownTag_1",
  call$2: function(o, tag) {
    return this.getUnknownTag_1(o, tag);
  },
  $is_args2: true
},

initHooks_closure1: {"": "Closure;prototypeForTag_2",
  call$1: function(tag) {
    return this.prototypeForTag_2(tag);
  },
  $is_args1: true
}}],
["box2d", "package:box2d/box2d.dart", , V, {
MathBox_distanceSquared: function(v1, v2) {
  var t1, t2, dx, dy;
  t1 = v1.storage;
  t2 = v2.storage;
  dx = t1[0] - t2[0];
  dy = t1[1] - t2[1];
  return dx * dx + dy * dy;
},

Vector2_crossVectorAndNumToOut: function(a, s, out) {
  var t1, t2, t3;
  t1 = a.storage;
  t2 = t1[0];
  t1 = t1[1];
  t3 = out.storage;
  t3[0] = s * t1;
  t3[1] = -s * t2;
},

ContactFilter: {"": "Object;",
  shouldCollide$2: function(fixtureA, fixtureB) {
    var filterA, filterB, t1;
    filterA = fixtureA.get$filter();
    filterB = fixtureB.get$filter();
    t1 = filterA.groupIndex;
    if (t1 !== 0 && t1 === filterB.groupIndex)
      return t1 > 0;
    return (filterA.maskBits & filterB.categoryBits) >>> 0 !== 0 && (filterA.categoryBits & filterB.maskBits) >>> 0 !== 0;
  }
},

ContactImpulse: {"": "Object;normalImpulses,tangentImpulses", static: {
ContactImpulse$: function() {
  var t1, t2;
  t1 = P.List_List(2, J.JSDouble);
  H.setRuntimeTypeInfo(t1, [J.JSDouble]);
  t2 = P.List_List(2, J.JSDouble);
  H.setRuntimeTypeInfo(t2, [J.JSDouble]);
  return new V.ContactImpulse(t1, t2);
}}
},

DebugDraw: {"": "Object;"},

AxisAlignedBox: {"": "Object;lowerBound<,upperBound",
  setFromCombination$2: function(boxOne, boxTwo) {
    var t1, t2;
    t1 = this.lowerBound;
    t2 = P.min(boxOne.lowerBound.storage[0], boxTwo.lowerBound.storage[0]);
    t1.storage[0] = t2;
    t2 = this.lowerBound;
    t1 = P.min(boxOne.lowerBound.storage[1], boxTwo.lowerBound.storage[1]);
    t2.storage[1] = t1;
    t1 = this.upperBound;
    t2 = P.max(boxOne.upperBound.storage[0], boxTwo.upperBound.storage[0]);
    t1.storage[0] = t2;
    t2 = this.upperBound;
    t1 = P.max(boxOne.upperBound.storage[1], boxTwo.upperBound.storage[1]);
    t2.storage[1] = t1;
  },
  contains$1: function(_, aabb) {
    var t1, t2, t3;
    t1 = this.lowerBound.storage;
    t2 = t1[0];
    t3 = aabb.lowerBound.storage;
    if (t2 > t3[0])
      if (t1[1] > t3[1]) {
        t1 = this.upperBound.storage;
        t2 = t1[1];
        t3 = aabb.upperBound.storage;
        t1 = t2 < t3[1] && t1[0] < t3[0];
      } else
        t1 = false;
    else
      t1 = false;
    return t1;
  },
  setFrom$1: function(other) {
    this.lowerBound.setFrom$1(other.get$lowerBound());
    this.upperBound.setFrom$1(other.upperBound);
  },
  toString$0: function(_) {
    return H.S(this.lowerBound) + ", " + H.S(this.upperBound);
  },
  AxisAlignedBox$2: function(lowerBound, upperBound) {
    var t1;
    if (this.lowerBound == null) {
      t1 = new Float32Array(2);
      t1.$dartCachedLength = t1.length;
      this.lowerBound = new T.Vector2(t1);
    }
    if (this.upperBound == null) {
      t1 = new Float32Array(2);
      t1.$dartCachedLength = t1.length;
      this.upperBound = new T.Vector2(t1);
    }
  },
  static: {
AxisAlignedBox$: function(lowerBound, upperBound) {
  var t1 = new V.AxisAlignedBox(lowerBound, upperBound);
  t1.AxisAlignedBox$2(lowerBound, upperBound);
  return t1;
},

AxisAlignedBox_testOverlap: function(a, b) {
  var t1, t2, t3;
  t1 = b.lowerBound.storage;
  t2 = t1[0];
  t3 = a.upperBound.storage;
  if (!(t2 > t3[0] || t1[1] > t3[1])) {
    t1 = a.lowerBound.storage;
    t2 = t1[0];
    t3 = b.upperBound.storage;
    t1 = t2 > t3[0] || t1[1] > t3[1];
  } else
    t1 = true;
  return !t1;
}}

},

BroadPhase: {"": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
  createProxy$2: function(box, userData) {
    var node = this._tree.createProxy$2(box, userData);
    this.proxyCount = this.proxyCount + 1;
    this.moveBuffer.push(node);
    return node;
  },
  updatePairs$1: function(callback) {
    var t1, i, t2, t3, pairBuffer, primaryPair, pair, t4, t5;
    this._pairCount = 0;
    for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
      this.queryProxy = t2[i];
      t2 = this.queryProxy;
      if (t2 == null)
        continue;
      t1._query$4(this, t2.box, t1._root, 1);
    }
    t2 = P.List_List(null, V.DynamicTreeNode);
    H.setRuntimeTypeInfo(t2, [V.DynamicTreeNode]);
    this.moveBuffer = t2;
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    t2.toString;
    H.IterableMixinWorkaround__rangeCheck(t2, 0, t3);
    pairBuffer = P.List_List$from(H.SubListIterable$(t2, 0, t3, null), true, null);
    H.IterableMixinWorkaround_sortList(pairBuffer, new V.BroadPhase_updatePairs_closure());
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    t2.toString;
    if (typeof t2 !== "object" || t2 === null || !!t2.immutable$list)
      H.throwExpression(P.UnsupportedError$("set range"));
    H.IterableMixinWorkaround_setRangeList(t2, 0, t3, pairBuffer, 0);
    for (i = 0; i < this._pairCount;) {
      t2 = this._pairBuffer;
      if (i < 0 || i >= t2.length)
        throw H.ioore(t2, i);
      primaryPair = t2[i];
      callback.call$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
      ++i;
      for (t2 = this._pairCount, t3 = this._pairBuffer; i < t2;) {
        if (i >= t3.length)
          throw H.ioore(t3, i);
        pair = t3[i];
        t4 = pair.get$proxyA();
        t5 = primaryPair.get$proxyA();
        if (t4 == null ? t5 == null : t4 === t5) {
          t4 = pair.get$proxyB();
          t5 = primaryPair.get$proxyB();
          t5 = t4 == null ? t5 != null : t4 !== t5;
          t4 = t5;
        } else
          t4 = true;
        if (t4)
          break;
        ++i;
      }
    }
    t1.rebalance$1(4);
  },
  treeCallback$1: function(proxy) {
    var t1, t2, oldBuffer, i, i0, t3, t4, t5;
    if (proxy === this.queryProxy)
      return true;
    t1 = this._pairCount;
    t2 = this._pairCapacity;
    if (t1 === t2) {
      oldBuffer = this._pairBuffer;
      if (typeof t2 !== "number")
        throw t2.$mul();
      this._pairCapacity = t2 * 2;
      t1 = P.List_List(this._pairCapacity, V.Pair);
      H.setRuntimeTypeInfo(t1, [V.Pair]);
      this._pairBuffer = t1;
      for (i = oldBuffer.length, t1 = this._pairBuffer, i0 = 0; i0 < i; ++i0) {
        t2 = oldBuffer[i0];
        if (i0 >= t1.length)
          throw H.ioore(t1, i0);
        t1[i0] = t2;
      }
      t2 = this._pairCapacity;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      for (; i < t2; ++i) {
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t1[i] = new V.Pair(null, null);
      }
    }
    t1 = proxy.key;
    t2 = this.queryProxy;
    t3 = t2.key;
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = this._pairBuffer;
    t5 = this._pairCount;
    if (t1 < t3) {
      if (t5 < 0 || t5 >= t4.length)
        throw H.ioore(t4, t5);
      t4[t5].set$proxyA(proxy);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 < 0 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      t1[t2].set$proxyB(this.queryProxy);
    } else {
      if (t5 < 0 || t5 >= t4.length)
        throw H.ioore(t4, t5);
      t4[t5].set$proxyA(t2);
      t1 = this._pairBuffer;
      t2 = this._pairCount;
      if (t2 < 0 || t2 >= t1.length)
        throw H.ioore(t1, t2);
      t1[t2].set$proxyB(proxy);
    }
    this._pairCount = this._pairCount + 1;
    return true;
  },
  BroadPhase$0: function() {
    var t1, t2, i;
    t1 = P.List_List(null, V.DynamicTreeNode);
    H.setRuntimeTypeInfo(t1, [V.DynamicTreeNode]);
    this.moveBuffer = t1;
    t1 = P.List_List(this._pairCapacity, V.Pair);
    H.setRuntimeTypeInfo(t1, [V.Pair]);
    this._pairBuffer = t1;
    t1 = this._pairCapacity;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t2 = this._pairBuffer;
    i = 0;
    for (; i < t1; ++i) {
      if (i >= t2.length)
        throw H.ioore(t2, i);
      t2[i] = new V.Pair(null, null);
    }
  },
  static: {
"": "BroadPhase_NULL_PROXY,BroadPhase_PAIR_CAPACITY",
BroadPhase$: function() {
  var t1 = new V.BroadPhase(V.DynamicTree$(), 0, null, null, 16, 0, null);
  t1.BroadPhase$0();
  return t1;
}}

},

BroadPhase_updatePairs_closure: {"": "Closure;",
  call$2: function(a, b) {
    return J.compareTo$1$ns(a, b);
  },
  $is_args2: true
},

DynamicTree: {"": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center,deltaOne,deltaTwo",
  createProxy$2: function(box, userData) {
    var proxy, t1, t2, t3, t4, iterationCount, height, tryCount;
    proxy = this._allocateNode$0();
    t1 = proxy.box;
    t2 = t1.lowerBound;
    t3 = box.lowerBound.storage;
    t4 = t3[0];
    t2 = t2.storage;
    t2[0] = t4 - 0.1;
    t2[1] = t3[1] - 0.1;
    t1 = t1.upperBound;
    t3 = box.upperBound.storage;
    t2 = t3[0];
    t1 = t1.storage;
    t1[0] = t2 + 0.1;
    t1[1] = t3[1] + 0.1;
    proxy.userData = userData;
    this._insertLeaf$1(proxy);
    iterationCount = C.JSInt_methods.$shr(this._nodeCount, 4);
    height = this._computeHeight$1(this._root);
    tryCount = 0;
    while (true) {
      if (!(height > 64 && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  moveProxy$3: function(argProxy, argBox, displacement) {
    var t1, t2, t3, t4;
    t1 = argProxy.box;
    if (t1.contains$1(t1, argBox))
      return false;
    this._removeLeaf$1(argProxy);
    t2 = argBox.lowerBound.storage;
    t2[0] = t2[0] - 0.1;
    t2[1] = t2[1] - 0.1;
    t2 = argBox.upperBound.storage;
    t2[0] = t2[0] + 0.1;
    t2[1] = t2[1] + 0.1;
    t2 = this._tempVector;
    t2.setFrom$1(displacement);
    t2.scale$1(t2, 2);
    t2 = t2.storage;
    t3 = t2[0];
    if (t3 < 0) {
      t4 = argBox.lowerBound.storage;
      t4[0] = t4[0] + t3;
    } else {
      t4 = argBox.upperBound.storage;
      t4[0] = t4[0] + t3;
    }
    t2 = t2[1];
    if (t2 < 0) {
      t3 = argBox.lowerBound.storage;
      t3[1] = t3[1] + t2;
    } else {
      t3 = argBox.upperBound.storage;
      t3[1] = t3[1] + t2;
    }
    t1.lowerBound.setFrom$1(argBox.lowerBound);
    t1.upperBound.setFrom$1(argBox.upperBound);
    this._insertLeaf$1(argProxy);
    return true;
  },
  _allocateNode$0: function() {
    var t1, i, t2, t3, node;
    t1 = this._nodeStack;
    if (t1._head === t1._tail)
      for (i = 0; i < 6; ++i) {
        t2 = new V.AxisAlignedBox(null, null);
        if (t2.lowerBound == null) {
          t3 = new Float32Array(2);
          t3.$dartCachedLength = t3.length;
          t2.lowerBound = new T.Vector2(t3);
        }
        if (t2.upperBound == null) {
          t3 = new Float32Array(2);
          t3.$dartCachedLength = t3.length;
          t2.upperBound = new T.Vector2(t3);
        }
        t1.addFirst$1(new V.DynamicTreeNode(t2, null, null, null, null, null, null));
      }
    node = t1.removeFirst$0();
    J.set$parent$x(node, null);
    node.childOne = null;
    node.childTwo = null;
    node.userData = null;
    node.key = this._nodeCounter;
    this._nodeCounter = this._nodeCounter + 1;
    this._nodeCount = this._nodeCount + 1;
    return node;
  },
  _query$4: function(callback, argBox, node, count) {
    var t1;
    if (node == null)
      return true;
    if (V.AxisAlignedBox_testOverlap(argBox, node.box)) {
      t1 = node.childOne;
      if (t1 == null) {
        if (!callback.treeCallback$1(node))
          return false;
      } else {
        if (count < 64) {
          ++count;
          if (!this._query$4(callback, argBox, t1, count))
            return false;
        }
        if (count < 64)
          if (!this._query$4(callback, argBox, node.childTwo, count + 1))
            return false;
      }
    }
    return true;
  },
  _insertLeaf$1: function(node) {
    var t1, t2, t3, t4, c, sibling, t5, t6, childOne, childTwo, t7, t8, t9, node1, node2, node10;
    this._insertionCount = this._insertionCount + 1;
    if (this._root == null) {
      this._root = node;
      node.parent = null;
      return;
    }
    t1 = this.center;
    t2 = node.box;
    t3 = t2.lowerBound;
    t4 = new Float32Array(2);
    t4.$dartCachedLength = t4.length;
    c = new T.Vector2(t4);
    t4 = c.storage;
    t3 = t3.storage;
    t4[1] = t3[1];
    t4[0] = t3[0];
    c.add$1(c, t2.upperBound);
    t4[1] = t4[1] * 0.5;
    t4[0] = t4[0] * 0.5;
    t3 = t1.storage;
    t3[1] = t4[1];
    t3[0] = t4[0];
    sibling = this._root;
    if (sibling.childOne != null) {
      t3 = this.deltaOne;
      t4 = t3.storage;
      t5 = this.deltaTwo;
      t6 = t5.storage;
      do {
        childOne = sibling.childOne;
        childTwo = sibling.childTwo;
        t7 = childOne.box;
        t8 = t7.lowerBound;
        t9 = new Float32Array(2);
        t9.$dartCachedLength = t9.length;
        c = new T.Vector2(t9);
        t9 = c.storage;
        t8 = t8.storage;
        t9[1] = t8[1];
        t9[0] = t8[0];
        c.add$1(c, t7.upperBound);
        t9[1] = t9[1] * 0.5;
        t9[0] = t9[0] * 0.5;
        t4[1] = t9[1];
        t4[0] = t9[0];
        t9 = childTwo.box;
        t7 = t9.lowerBound;
        t8 = new Float32Array(2);
        t8.$dartCachedLength = t8.length;
        c = new T.Vector2(t8);
        t8 = c.storage;
        t7 = t7.storage;
        t8[1] = t7[1];
        t8[0] = t7[0];
        c.add$1(c, t9.upperBound);
        t8[1] = t8[1] * 0.5;
        t8[0] = t8[0] * 0.5;
        t6[1] = t8[1];
        t6[0] = t8[0];
        t8 = t3.sub$1(t1).storage;
        t8[1] = Math.abs(t8[1]);
        t8[0] = Math.abs(t8[0]);
        t8 = t5.sub$1(t1).storage;
        t8[1] = Math.abs(t8[1]);
        t8[0] = Math.abs(t8[0]);
        sibling = t4[0] + t4[1] < t6[0] + t6[1] ? childOne : childTwo;
      } while (sibling.childOne != null);
    }
    node1 = sibling.parent;
    node2 = this._allocateNode$0();
    node2.parent = node1;
    node2.userData = null;
    node2.box.setFromCombination$2(t2, sibling.box);
    if (node1 != null) {
      t1 = sibling.parent.childOne;
      if (t1 == null ? sibling == null : t1 === sibling)
        node1.childOne = node2;
      else
        node1.childTwo = node2;
      node2.childOne = sibling;
      node2.childTwo = node;
      sibling.parent = node2;
      node.parent = node2;
      do {
        t1 = node1.box;
        if (t1.contains$1(t1, node2.box))
          break;
        t1.setFromCombination$2(node1.childOne.box, node1.childTwo.box);
        node10 = node1.parent;
        if (node10 != null) {
          node2 = node1;
          node1 = node10;
          continue;
        } else
          break;
      } while (true);
    } else {
      node2.childOne = sibling;
      node2.childTwo = node;
      sibling.parent = node2;
      node.parent = node2;
      this._root = node2;
    }
  },
  _removeLeaf$1: function(argNode) {
    var t1, node2, node1, sibling, t2, t3, t4;
    t1 = this._root;
    if (argNode == null ? t1 == null : argNode === t1) {
      this._root = null;
      t1 = this._lastLeaf;
      if (t1 == null ? argNode == null : t1 === argNode)
        this._lastLeaf = null;
      return;
    }
    node2 = argNode.parent;
    node1 = node2.parent;
    sibling = node2.childOne;
    if (sibling == null ? argNode == null : sibling === argNode)
      sibling = node2.childTwo;
    if (node1 != null) {
      t1 = node1.childOne;
      if (t1 == null ? node2 == null : t1 === node2)
        node1.childOne = sibling;
      else
        node1.childTwo = sibling;
      sibling.parent = node1;
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
      for (t1 = this._tempBox; node1 != null;) {
        t2 = node1.box;
        t3 = t1.lowerBound;
        t4 = t2.lowerBound;
        t3 = t3.storage;
        t4 = t4.storage;
        t3[1] = t4[1];
        t3[0] = t4[0];
        t4 = t1.upperBound;
        t3 = t2.upperBound;
        t4 = t4.storage;
        t3 = t3.storage;
        t4[1] = t3[1];
        t4[0] = t3[0];
        t2.setFromCombination$2(node1.childOne.box, node1.childTwo.box);
        if (t1.contains$1(t1, t2))
          break;
        node1 = node1.parent;
      }
    } else {
      this._root = sibling;
      sibling.parent = null;
      this._nodeStack.addFirst$1(node2);
      this._nodeCount = this._nodeCount - 1;
    }
    t1 = this._lastLeaf;
    if (t1 == null ? argNode == null : t1 === argNode)
      this._lastLeaf = this._root;
  },
  _computeHeight$1: function(node) {
    if (node == null)
      return 0;
    return 1 + P.max(this._computeHeight$1(node.childOne), this._computeHeight$1(node.childTwo));
  },
  rebalance$1: function(iterations) {
    var i, current, t1, bit, current0;
    if (this._root == null)
      return;
    for (i = 0; i < iterations; ++i) {
      current = this._root;
      for (t1 = this._path, bit = 0; current0 = current.childOne, current0 != null;) {
        current = (C.JSInt_methods.$shr(t1, bit) & 1) === 0 ? current0 : current.childTwo;
        bit = bit + 1 & 31;
      }
      this._path = t1 + 1;
      this._removeLeaf$1(current);
      this._insertLeaf$1(current);
    }
  },
  DynamicTree$0: function() {
    var t1, i, t2;
    for (t1 = this._drawVectors, i = 0; i < 4; ++i) {
      t2 = new Float32Array(2);
      t2.$dartCachedLength = t2.length;
      t1[i] = new T.Vector2(t2);
    }
  },
  static: {
"": "DynamicTree_MAX_STACK_SIZE,DynamicTree__DEFAULT_NODE_ADDITION",
DynamicTree$: function() {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = P.List_List(4, T.Vector2);
  H.setRuntimeTypeInfo(t1, [T.Vector2]);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = V.AxisAlignedBox$(null, null);
  t4 = P.ListQueue$(null, V.DynamicTreeNode);
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(2);
  t6.$dartCachedLength = t6.length;
  t7 = new Float32Array(2);
  t7.$dartCachedLength = t7.length;
  t7 = new V.DynamicTree(null, 0, null, 0, 0, t4, t1, 0, new T.Vector2(t2), t3, new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7));
  t7.DynamicTree$0();
  return t7;
}}

},

DynamicTreeNode: {"": "Object;box,parent',next,childOne,childTwo,userData<,key>",
  toString$0: function(_) {
    var t1 = this.box;
    return H.S(t1.lowerBound) + ", " + H.S(t1.upperBound);
  }
},

Pair: {"": "Object;proxyA@,proxyB@",
  compareTo$1: function(_, pair2) {
    var t1, t2;
    t1 = this.proxyA.key;
    t2 = pair2.get$proxyA();
    t2 = t2.get$key(t2);
    if (typeof t1 !== "number")
      throw t1.$lt();
    if (typeof t2 !== "number")
      throw H.iae(t2);
    if (t1 < t2)
      return -1;
    if (t1 === t2) {
      t1 = this.proxyB.key;
      t2 = pair2.get$proxyB();
      t2 = t2.get$key(t2);
      if (typeof t1 !== "number")
        throw t1.$lt();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (t1 < t2)
        t1 = -1;
      else
        t1 = t1 === t2 ? 0 : 1;
      return t1;
    }
    return 1;
  }
},

Collision: {"": "Object;_pool,cache,input,output,results1,results2,incidentEdge,localTangent,localNormal,planePoint,tangent,normal,normal1,v11,v12,clipPoints1,clipPoints2",
  testOverlap$4: function(shapeA, shapeB, transformA, transformB) {
    var t1, t2, t3;
    t1 = this.input;
    t1.proxyA.setFromShape$1(shapeA);
    t1.proxyB.setFromShape$1(shapeB);
    t2 = t1.transformA;
    t2.position.setFrom$1(transformA.position);
    t2.rotation.setFrom$1(transformA.rotation);
    t2 = t1.transformB;
    t2.position.setFrom$1(transformB.position);
    t2.rotation.setFrom$1(transformB.rotation);
    t1.useRadii = true;
    t2 = this.cache;
    t2.count = 0;
    t3 = this.output;
    this._pool.distance.distance$3(t3, t2, t1);
    t3 = t3.distance;
    if (typeof t3 !== "number")
      throw t3.$lt();
    return t3 < 0.000001192;
  },
  collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
    var v, t1, t2, t3, t4, t5, t6, v1, t7, t8, dx, dy, radius;
    manifold.pointCount = 0;
    v = circle1.get$position(circle1);
    t1 = xfA.position.storage;
    t2 = t1[1];
    t3 = xfA.rotation.storage;
    t4 = C.JSNumber_methods.$mul(t3[1], v.get$x(v));
    t5 = C.JSNumber_methods.$mul(t3[3], v.get$y(v));
    t1 = t1[0];
    t6 = C.JSNumber_methods.$mul(t3[0], v.get$x(v));
    t3 = C.JSNumber_methods.$mul(t3[2], v.get$y(v));
    v1 = circle2.get$position(circle2);
    t7 = xfB.position.storage;
    t8 = xfB.rotation.storage;
    dx = t7[0] + C.JSNumber_methods.$mul(t8[0], v1.get$x(v1)) + C.JSNumber_methods.$mul(t8[2], v1.get$y(v1)) - (t1 + t6 + t3);
    dy = t7[1] + C.JSNumber_methods.$mul(t8[1], v1.get$x(v1)) + C.JSNumber_methods.$mul(t8[3], v1.get$y(v1)) - (t2 + t4 + t5);
    t5 = circle1.radius;
    radius = t5.$add(t5, circle2.radius);
    if (C.JSNumber_methods.$gt(dx * dx + dy * dy, radius.$mul(radius, radius)))
      return;
    manifold.type = 0;
    manifold.localPoint.setFrom$1(circle1.get$position(circle1));
    manifold.localNormal.setZero$0();
    manifold.pointCount = 1;
    t1 = manifold.points;
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1[0].localPoint.setFrom$1(circle2.get$position(circle2));
    t1[0].id.features.zero$0();
  },
  collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
    var v, t1, t2, t3, v1x, v1y, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, t4, t5, s, vertIndex2, v1, v2, mpoint, temp2X, t6, t7, t8, t9, temp4X, t10, t11, dx, dy, fcx, fcy, norm;
    manifold.pointCount = 0;
    v = circle.get$position(circle);
    t1 = xfB.position.storage;
    t2 = xfB.rotation.storage;
    t3 = xfA.position.storage;
    v1x = t1[0] + C.JSNumber_methods.$mul(t2[0], v.get$x(v)) + C.JSNumber_methods.$mul(t2[2], v.get$y(v)) - t3[0];
    v1y = t1[1] + C.JSNumber_methods.$mul(t2[1], v.get$x(v)) + C.JSNumber_methods.$mul(t2[3], v.get$y(v)) - t3[1];
    t3 = xfA.rotation.storage;
    cLocaly = v1x * t3[2] + v1y * t3[3];
    cLocalx = v1x * t3[0] + v1y * t3[1];
    radius = C.JSNumber_methods.$add(polygon.radius, circle.radius);
    vertexCount = polygon.vertexCount;
    vertices = polygon.vertices;
    normals = polygon.normals;
    for (t1 = vertices.length, t2 = normals.length, normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= t1)
        throw H.ioore(vertices, i);
      vertex = vertices[i];
      t3 = J.getInterceptor$x(vertex);
      t4 = t3.get$x(vertex);
      if (typeof t4 !== "number")
        throw H.iae(t4);
      t3 = t3.get$y(vertex);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      if (i >= t2)
        throw H.ioore(normals, i);
      t5 = normals[i].storage;
      s = t5[0] * (cLocalx - t4) + t5[1] * (cLocaly - t3);
      if (s > radius)
        return;
      if (s > separation) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    if (normalIndex < 0 || normalIndex >= t1)
      throw H.ioore(vertices, normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t1)
      throw H.ioore(vertices, vertIndex2);
    v2 = vertices[vertIndex2];
    if (separation < 1.192e-7) {
      manifold.pointCount = 1;
      manifold.type = 1;
      if (normalIndex >= t2)
        throw H.ioore(normals, normalIndex);
      t1 = normals[normalIndex].storage;
      t2 = manifold.localNormal.storage;
      t2[0] = t1[0];
      t2[1] = t1[1];
      t1 = J.getInterceptor$x(v1);
      t2 = J.getInterceptor$x(v2);
      t3 = manifold.localPoint.storage;
      t3[0] = J.$mul$n(J.$add$ns(t1.get$x(v1), t2.get$x(v2)), 0.5);
      t1 = t1.get$y(v1);
      t2 = t2.get$y(v2);
      if (typeof t1 !== "number")
        throw t1.$add();
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t3[1] = (t1 + t2) * 0.5;
      t2 = manifold.points;
      if (0 >= t2.length)
        throw H.ioore(t2, 0);
      mpoint = t2[0];
      t2 = mpoint.localPoint;
      t1 = circle.get$position(circle);
      t2 = t2.storage;
      t2[0] = t1.get$x(t1);
      t1 = circle.get$position(circle);
      t2[1] = t1.get$y(t1);
      mpoint.id.features.zero$0();
      return;
    }
    t1 = J.getInterceptor$x(v1);
    t3 = t1.get$x(v1);
    if (typeof t3 !== "number")
      throw H.iae(t3);
    t4 = t1.get$y(v1);
    if (typeof t4 !== "number")
      throw H.iae(t4);
    t5 = J.getInterceptor$x(v2);
    temp2X = J.$sub$n(t5.get$x(v2), t1.get$x(v1));
    t6 = t5.get$y(v2);
    t7 = t1.get$y(v1);
    if (typeof t6 !== "number")
      throw t6.$sub();
    if (typeof t7 !== "number")
      throw H.iae(t7);
    if (typeof temp2X !== "number")
      throw H.iae(temp2X);
    t8 = t5.get$x(v2);
    if (typeof t8 !== "number")
      throw H.iae(t8);
    t9 = t5.get$y(v2);
    if (typeof t9 !== "number")
      throw H.iae(t9);
    temp4X = J.$sub$n(t1.get$x(v1), t5.get$x(v2));
    t10 = t1.get$y(v1);
    t11 = t5.get$y(v2);
    if (typeof t10 !== "number")
      throw t10.$sub();
    if (typeof t11 !== "number")
      throw H.iae(t11);
    if (typeof temp4X !== "number")
      throw H.iae(temp4X);
    if ((cLocalx - t3) * temp2X + (cLocaly - t4) * (t6 - t7) <= 0) {
      t2 = t1.get$x(v1);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      dx = cLocalx - t2;
      t2 = t1.get$y(v1);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      dy = cLocaly - t2;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.pointCount = 1;
      manifold.type = 1;
      t2 = manifold.localNormal;
      t3 = t1.get$x(v1);
      if (typeof t3 !== "number")
        throw H.iae(t3);
      t4 = t2.storage;
      t4[0] = cLocalx - t3;
      t1 = t1.get$y(v1);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t4[1] = cLocaly - t1;
      t2.normalize$0();
      manifold.localPoint.setFrom$1(v1);
      t2 = manifold.points;
      if (0 >= t2.length)
        throw H.ioore(t2, 0);
      t2[0].localPoint.setFrom$1(circle.get$position(circle));
      t2[0].id.features.zero$0();
    } else if ((cLocalx - t8) * temp4X + (cLocaly - t9) * (t10 - t11) <= 0) {
      t1 = t5.get$x(v2);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      dx = cLocalx - t1;
      t1 = t5.get$y(v2);
      if (typeof t1 !== "number")
        throw H.iae(t1);
      dy = cLocaly - t1;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.pointCount = 1;
      manifold.type = 1;
      t1 = manifold.localNormal;
      t2 = t5.get$x(v2);
      if (typeof t2 !== "number")
        throw H.iae(t2);
      t3 = t1.storage;
      t3[0] = cLocalx - t2;
      t5 = t5.get$y(v2);
      if (typeof t5 !== "number")
        throw H.iae(t5);
      t3[1] = cLocaly - t5;
      t1.normalize$0();
      manifold.localPoint.setFrom$1(v2);
      t1 = manifold.points;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1[0].localPoint.setFrom$1(circle.get$position(circle));
      t1[0].id.features.zero$0();
    } else {
      fcx = J.$mul$n(J.$add$ns(t1.get$x(v1), t5.get$x(v2)), 0.5);
      t1 = t1.get$y(v1);
      t5 = t5.get$y(v2);
      if (typeof t1 !== "number")
        throw t1.$add();
      if (typeof t5 !== "number")
        throw H.iae(t5);
      fcy = (t1 + t5) * 0.5;
      if (typeof fcx !== "number")
        throw H.iae(fcx);
      if (normalIndex >= t2)
        throw H.ioore(normals, normalIndex);
      norm = normals[normalIndex];
      t2 = norm.storage;
      if ((cLocalx - fcx) * t2[0] + (cLocaly - fcy) * t2[1] > radius)
        return;
      manifold.pointCount = 1;
      manifold.type = 1;
      manifold.localNormal.setFrom$1(norm);
      t1 = manifold.localPoint.storage;
      t1[0] = fcx;
      t1[1] = fcy;
      t1 = manifold.points;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1[0].localPoint.setFrom$1(circle.get$position(circle));
      t1[0].id.features.zero$0();
    }
  },
  edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
    var vertices1, normals1, count2, vertices2, v, t1, t2, t3, t4, t5, normal1Worldy, normal1Worldx, normal1x, normal1y, index, minDot, i, a, dot, v3, t6, t7, t8, t9, t10, t11, t12, v4, t13, t14, t15, t16, t17, t18, t19, t20;
    vertices1 = poly1.vertices;
    normals1 = poly1.normals;
    count2 = poly2.vertexCount;
    vertices2 = poly2.vertices;
    if (edge1 < 0 || edge1 >= normals1.length)
      throw H.ioore(normals1, edge1);
    v = normals1[edge1];
    t1 = xf1.rotation.storage;
    t2 = t1[1];
    t3 = v.storage;
    t4 = t3[0];
    t5 = t1[3];
    t3 = t3[1];
    normal1Worldy = t2 * t4 + t5 * t3;
    normal1Worldx = t1[0] * t4 + t1[2] * t3;
    t3 = xf2.rotation.storage;
    normal1x = normal1Worldx * t3[0] + normal1Worldy * t3[1];
    normal1y = normal1Worldx * t3[2] + normal1Worldy * t3[3];
    for (t2 = vertices2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t2)
        throw H.ioore(vertices2, i);
      a = vertices2[i];
      t4 = J.getInterceptor$x(a);
      t5 = J.$mul$n(t4.get$x(a), normal1x);
      t4 = t4.get$y(a);
      if (typeof t4 !== "number")
        throw t4.$mul();
      dot = J.$add$ns(t5, t4 * normal1y);
      if (J.$lt$n(dot, minDot)) {
        minDot = dot;
        index = i;
      }
    }
    if (edge1 >= vertices1.length)
      throw H.ioore(vertices1, edge1);
    v3 = vertices1[edge1];
    t4 = xf1.position.storage;
    t5 = t4[1];
    t6 = t1[1];
    t7 = J.getInterceptor$x(v3);
    t8 = t7.get$x(v3);
    if (typeof t8 !== "number")
      throw H.iae(t8);
    t9 = t1[3];
    t10 = t7.get$y(v3);
    if (typeof t10 !== "number")
      throw H.iae(t10);
    t4 = t4[0];
    t11 = t1[0];
    t12 = t7.get$x(v3);
    if (typeof t12 !== "number")
      throw H.iae(t12);
    t1 = t1[2];
    t7 = t7.get$y(v3);
    if (typeof t7 !== "number")
      throw H.iae(t7);
    if (index < 0 || index >= t2)
      throw H.ioore(vertices2, index);
    v4 = vertices2[index];
    t2 = xf2.position.storage;
    t13 = t2[1];
    t14 = t3[1];
    t15 = J.getInterceptor$x(v4);
    t16 = t15.get$x(v4);
    if (typeof t16 !== "number")
      throw H.iae(t16);
    t17 = t3[3];
    t18 = t15.get$y(v4);
    if (typeof t18 !== "number")
      throw H.iae(t18);
    t2 = t2[0];
    t19 = t3[0];
    t20 = t15.get$x(v4);
    if (typeof t20 !== "number")
      throw H.iae(t20);
    t3 = t3[2];
    t15 = t15.get$y(v4);
    if (typeof t15 !== "number")
      throw H.iae(t15);
    return (t2 + t19 * t20 + t3 * t15 - (t4 + t11 * t12 + t1 * t7)) * normal1Worldx + (t13 + t14 * t16 + t17 * t18 - (t5 + t6 * t8 + t9 * t10)) * normal1Worldy;
  },
  findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
    var count1, normals1, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, dx, dy, dLocal1x, dLocal1y, edge, maxDot, i, dot, s, prevEdge, sPrev, nextEdge, sNext, bestSeparation, bestEdge, increment, edge0;
    count1 = poly1.vertexCount;
    normals1 = poly1.normals;
    t1 = xf2.position.storage;
    t2 = t1[1];
    t3 = xf2.rotation.storage;
    t4 = t3[1];
    t5 = poly2.centroid.storage;
    t6 = t5[0];
    t7 = t3[3];
    t5 = t5[1];
    t1 = t1[0];
    t8 = t3[0];
    t3 = t3[2];
    t9 = xf1.position.storage;
    t10 = t9[1];
    t11 = xf1.rotation.storage;
    t12 = t11[1];
    t13 = poly1.centroid.storage;
    t14 = t13[0];
    t15 = t11[3];
    t13 = t13[1];
    t9 = t9[0];
    t16 = t11[0];
    t11 = t11[2];
    dx = t1 + t8 * t6 + t3 * t5 - (t9 + t16 * t14 + t11 * t13);
    dy = t2 + t4 * t6 + t7 * t5 - (t10 + t12 * t14 + t15 * t13);
    dLocal1x = dx * t16 + dy * t12;
    dLocal1y = dx * t11 + dy * t15;
    for (t1 = normals1.length, edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
      if (i >= t1)
        throw H.ioore(normals1, i);
      t2 = normals1[i].storage;
      dot = t2[0] * dLocal1x + t2[1] * dLocal1y;
      if (dot > maxDot) {
        maxDot = dot;
        edge = i;
      }
    }
    s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
    prevEdge = edge - 1;
    prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
    sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
    nextEdge = edge + 1;
    nextEdge = nextEdge < count1 ? nextEdge : 0;
    sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
    if (sPrev > s && sPrev > sNext) {
      bestSeparation = sPrev;
      bestEdge = prevEdge;
      increment = -1;
    } else {
      if (sNext > s)
        ;
      else {
        results.edgeIndex = edge;
        results.separation = s;
        return;
      }
      bestSeparation = sNext;
      bestEdge = nextEdge;
      increment = 1;
    }
    for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
      if (t1) {
        edge0 = bestEdge - 1;
        edge0 = edge0 >= 0 ? edge0 : edge;
      } else {
        edge0 = bestEdge + 1;
        edge0 = edge0 < count1 ? edge0 : 0;
      }
      s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
      if (s > bestSeparation)
        ;
      else
        break;
    }
    results.edgeIndex = bestEdge;
    results.separation = bestSeparation;
  },
  findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
    var normals1, count2, vertices2, normals2, t1, t2, index, minDot, i, dot, i2;
    normals1 = poly1.normals;
    count2 = poly2.vertexCount;
    vertices2 = poly2.vertices;
    normals2 = poly2.normals;
    if (edge1 < 0 || edge1 >= normals1.length)
      throw H.ioore(normals1, edge1);
    t1 = this.normal1;
    xf1.rotation.transformed$2(normals1[edge1], t1);
    xf2.rotation.transposed$0().transformed$2(t1, t1);
    for (t2 = normals2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t2)
        throw H.ioore(normals2, i);
      dot = t1.dot$1(normals2[i]);
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    i2 = index + 1;
    i2 = i2 < count2 ? i2 : 0;
    t1 = vertices2.length;
    if (index < 0 || index >= t1)
      throw H.ioore(vertices2, index);
    V.Transform_mulToOut(xf2, vertices2[index], c[0].v);
    t2 = c[0];
    t2.id.features.referenceEdge = edge1;
    t2.id.features.incidentEdge = index;
    t2.id.features.incidentVertex = 0;
    if (i2 < 0 || i2 >= t1)
      throw H.ioore(vertices2, i2);
    V.Transform_mulToOut(xf2, vertices2[i2], c[1].v);
    t1 = c[1];
    t1.id.features.referenceEdge = edge1;
    t1.id.features.incidentEdge = i2;
    t1.id.features.incidentVertex = 1;
  },
  collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
    var totalRadius, t1, t2, t3, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t4, t5, t6, t7, frontOffset, t8, np, pointCount, i, cp;
    manifold.pointCount = 0;
    totalRadius = polyA.radius + polyB.radius;
    t1 = this.results1;
    this.findMaxSeparation$5(t1, polyA, xfA, polyB, xfB);
    if (t1.separation > totalRadius)
      return;
    t2 = this.results2;
    this.findMaxSeparation$5(t2, polyB, xfB, polyA, xfA);
    t3 = t2.separation;
    if (t3 > totalRadius)
      return;
    if (t3 > 0.98 * t1.separation + 0.001) {
      edge1 = t2.edgeIndex;
      manifold.type = 2;
      xf2 = xfA;
      xf1 = xfB;
      poly2 = polyA;
      poly1 = polyB;
      flip = 1;
    } else {
      edge1 = t1.edgeIndex;
      manifold.type = 1;
      xf2 = xfB;
      xf1 = xfA;
      poly2 = polyB;
      poly1 = polyA;
      flip = 0;
    }
    t1 = this.incidentEdge;
    this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
    count1 = poly1.vertexCount;
    vertices1 = poly1.vertices;
    t2 = this.v11;
    t3 = vertices1.length;
    if (edge1 < 0 || edge1 >= t3)
      throw H.ioore(vertices1, edge1);
    t2.setFrom$1(vertices1[edge1]);
    t4 = this.v12;
    t5 = edge1 + 1;
    if (t5 < count1) {
      if (t5 >= t3)
        throw H.ioore(vertices1, t5);
      t3 = vertices1[t5];
    } else {
      if (0 >= t3)
        throw H.ioore(vertices1, 0);
      t3 = vertices1[0];
    }
    t4.setFrom$1(t3);
    t3 = this.localTangent;
    t3.setFrom$1(t4).sub$1(t2);
    t3.normalize$0();
    t5 = this.localNormal;
    V.Vector2_crossVectorAndNumToOut(t3, 1, t5);
    t6 = this.planePoint;
    t7 = t6.setFrom$1(t2);
    t7 = t7.add$1(t7, t4);
    t7.scale$1(t7, 0.5);
    t7 = this.tangent;
    xf1.rotation.transformed$2(t3, t7);
    t3 = this.normal;
    V.Vector2_crossVectorAndNumToOut(t7, 1, t3);
    V.Transform_mulToOut(xf1, t2, t2);
    V.Transform_mulToOut(xf1, t4, t4);
    frontOffset = t3.dot$1(t2);
    t2 = t7.dot$1(t2);
    t4 = t7.dot$1(t4);
    t7.negate$0();
    t8 = this.clipPoints1;
    np = V.Collision_clipSegmentToLine(t8, t1, t7, -t2 + totalRadius);
    t7.negate$0();
    if (np < 2)
      return;
    t1 = this.clipPoints2;
    if (V.Collision_clipSegmentToLine(t1, t8, t7, t4 + totalRadius) < 2)
      return;
    manifold.localNormal.setFrom$1(t5);
    manifold.localPoint.setFrom$1(t6);
    for (t2 = manifold.points, t4 = t2.length, pointCount = 0, i = 0; i < 2; ++i)
      if (t3.dot$1(t1[i].v) - frontOffset <= totalRadius) {
        if (pointCount >= t4)
          throw H.ioore(t2, pointCount);
        cp = t2[pointCount];
        V.Transform_mulTransToOut(xf2, t1[i].v, cp.localPoint);
        t5 = cp.id;
        t5 = t5.features;
        t6 = t1[i].id.features;
        t5.referenceEdge = t6.referenceEdge;
        t5.incidentEdge = t6.incidentEdge;
        t5.incidentVertex = t6.incidentVertex;
        t5.flip = t6.flip;
        t5.flip = flip;
        ++pointCount;
      }
    manifold.pointCount = pointCount;
  },
  Collision$_construct$1: function(pool) {
    var t1 = this.incidentEdge;
    t1[0] = V.ClipVertex$();
    t1[1] = V.ClipVertex$();
    t1 = this.clipPoints1;
    t1[0] = V.ClipVertex$();
    t1[1] = V.ClipVertex$();
    t1 = this.clipPoints2;
    t1[0] = V.ClipVertex$();
    t1[1] = V.ClipVertex$();
  },
  static: {
"": "Collision_NULL_FEATURE",
Collision$_construct: function(pool) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14;
  t1 = V.DistanceInput$();
  t2 = V.SimplexCache$();
  t3 = V.DistanceOutput$();
  t4 = P.List_List(2, V.ClipVertex);
  H.setRuntimeTypeInfo(t4, [V.ClipVertex]);
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(2);
  t6.$dartCachedLength = t6.length;
  t7 = new Float32Array(2);
  t7.$dartCachedLength = t7.length;
  t8 = new Float32Array(2);
  t8.$dartCachedLength = t8.length;
  t9 = new Float32Array(2);
  t9.$dartCachedLength = t9.length;
  t10 = new Float32Array(2);
  t10.$dartCachedLength = t10.length;
  t11 = new Float32Array(2);
  t11.$dartCachedLength = t11.length;
  t12 = new Float32Array(2);
  t12.$dartCachedLength = t12.length;
  t13 = P.List_List(2, V.ClipVertex);
  H.setRuntimeTypeInfo(t13, [V.ClipVertex]);
  t14 = P.List_List(2, V.ClipVertex);
  H.setRuntimeTypeInfo(t14, [V.ClipVertex]);
  t14 = new V.Collision(pool, t2, t1, t3, new V.EdgeResults(0, 0), new V.EdgeResults(0, 0), t4, new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(t11), new T.Vector2(t12), t13, t14);
  t14.Collision$_construct$1(pool);
  return t14;
},

Collision_clipSegmentToLine: function(vOut, vIn, norm, offset) {
  var distance0, distance1, t1, t2, numOut, numOut0, vin;
  distance0 = norm.dot$1(vIn[0].v) - offset;
  distance1 = norm.dot$1(vIn[1].v) - offset;
  if (distance0 <= 0) {
    t1 = vOut[0];
    t2 = vIn[0];
    t1.v.setFrom$1(t2.v);
    t1.id.features.setFrom$1(t2.id.features);
    numOut = 1;
  } else
    numOut = 0;
  if (distance1 <= 0) {
    numOut0 = numOut + 1;
    t1 = vOut[numOut];
    t2 = vIn[1];
    t1.v.setFrom$1(t2.v);
    t1.id.features.setFrom$1(t2.id.features);
    numOut = numOut0;
  }
  if (distance0 * distance1 < 0) {
    if (numOut >= 2)
      throw H.ioore(vOut, numOut);
    t1 = vOut[numOut].v.setFrom$1(vIn[1].v).sub$1(vIn[0].v);
    t1 = t1.scale$1(t1, distance0 / (distance0 - distance1));
    t1.add$1(t1, vIn[0].v);
    vin = distance0 > 0 ? vIn[0] : vIn[1];
    vOut[numOut].id.features.setFrom$1(vin.id.features);
    ++numOut;
  }
  return numOut;
}}

},

ClipVertex: {"": "Object;v<,id",
  setFrom$1: function(cv) {
    this.v.setFrom$1(cv.get$v());
    this.id.features.setFrom$1(cv.id.features);
  },
  static: {
ClipVertex$: function() {
  var t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  return new V.ClipVertex(new T.Vector2(t1), new V.ContactID(V.Features$()));
}}

},

EdgeResults: {"": "Object;separation,edgeIndex"},

ContactID: {"": "Object;features<",
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = other.get$features();
    return t1.$eq(t1, this.features);
  },
  setFrom$1: function(other) {
    this.features.setFrom$1(other.get$features());
  }
},

Distance: {"": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal",
  distance$3: function(output, cache, input) {
    var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, iter, saveCount, i, t14, vertex, t15, t16, t17, duplicate, rA, rB;
    this.calls = this.calls + 1;
    proxyA = input.proxyA;
    proxyB = input.proxyB;
    transformA = input.transformA;
    transformB = input.transformB;
    t1 = this.simplex;
    t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
    vertices = t1.vertices;
    t2 = this.closestPoint;
    t1.getClosestPoint$1(t2);
    t2.get$length2();
    for (t3 = this.saveA, t4 = this.saveB, t5 = this.temp, t6 = proxyB.vertices, t7 = t6.length, t8 = proxyA.vertices, t9 = t8.length, t10 = transformB.rotation, t11 = this.searchDirection, t12 = t11.storage, t13 = transformA.rotation, iter = 0; iter < this.maxIters;) {
      saveCount = t1.count;
      for (i = 0; i < saveCount; ++i) {
        if (i >= 3)
          throw H.ioore(vertices, i);
        t3[i] = vertices[i].indexA;
        t4[i] = vertices[i].indexB;
      }
      switch (saveCount) {
        case 1:
          break;
        case 2:
          t1.solve2$0();
          break;
        case 3:
          t1.solve3$0();
          break;
        default:
          return;
      }
      if (t1.count === 3)
        break;
      t1.getClosestPoint$1(t2);
      t2.get$length2();
      t1.getSearchDirection$1(t11);
      if (t11.get$length2() < 1.4208639999999999e-14)
        break;
      t14 = t1.count;
      if (t14 < 0 || t14 >= 3)
        throw H.ioore(vertices, t14);
      vertex = vertices[t14];
      t14 = t13.transposed$0();
      t12[1] = -t12[1];
      t12[0] = -t12[0];
      t15 = t5.storage;
      t15[1] = t12[1];
      t15[0] = t12[0];
      t14.transform$1(t14, t5);
      vertex.indexA = proxyA.getSupport$1(t5);
      t14 = vertex.indexA;
      if (t14 >>> 0 !== t14 || t14 >= t9)
        throw H.ioore(t8, t14);
      t14 = t8[t14];
      t15 = vertex.wA;
      V.Transform_mulToOut(transformA, t14, t15);
      t14 = t10.transposed$0();
      t12[1] = -t12[1];
      t12[0] = -t12[0];
      t16 = t5.storage;
      t16[1] = t12[1];
      t16[0] = t12[0];
      t14.transform$1(t14, t5);
      vertex.indexB = proxyB.getSupport$1(t5);
      t14 = vertex.indexB;
      if (t14 >>> 0 !== t14 || t14 >= t7)
        throw H.ioore(t6, t14);
      t14 = t6[t14];
      t16 = vertex.wB;
      V.Transform_mulToOut(transformB, t14, t16);
      t14 = vertex.w;
      t17 = t14.storage;
      t16 = t16.storage;
      t17[1] = t16[1];
      t17[0] = t16[0];
      t14.sub$1(t15);
      ++iter;
      this.iters = this.iters + 1;
      for (i = 0; duplicate = false, i < saveCount; ++i) {
        t14 = vertex.indexA;
        if (i >= 3)
          throw H.ioore(t3, i);
        if (J.$eq(t14, t3[i]) && J.$eq(vertex.indexB, t4[i])) {
          duplicate = true;
          break;
        }
      }
      if (duplicate)
        break;
      t1.count = t1.count + 1;
    }
    this.maxIters = P.max(this.maxIters, iter);
    t2 = output.pointA;
    t3 = output.pointB;
    t1.getWitnessPoints$2(t2, t3);
    t4 = V.MathBox_distanceSquared(t2, t3);
    output.distance = Math.sqrt(t4);
    output.iterations = iter;
    t1.writeCache$1(cache);
    if (input.useRadii) {
      rA = proxyA.get$radius();
      rB = proxyB.get$radius();
      t1 = output.distance;
      t4 = rA + rB;
      if (typeof t1 !== "number")
        throw t1.$gt();
      if (t1 > t4 && t1 > 1.192e-7) {
        output.distance = t1 - t4;
        t1 = this.normal;
        t1.setFrom$1(t3).sub$1(t2);
        t1.normalize$0();
        t4 = t5.setFrom$1(t1);
        t4.scale$1(t4, rA);
        t2.add$1(t2, t5);
        t1 = t5.setFrom$1(t1);
        t1.scale$1(t1, rB);
        t3.sub$1(t5);
      } else {
        t1 = t2.add$1(t2, t3);
        t1.scale$1(t1, 0.5);
        t3.setFrom$1(t2);
        output.distance = 0;
      }
    }
  },
  static: {
Distance$_construct: function() {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = V.Simplex$();
  t2 = P.List_List(3, J.JSInt);
  H.setRuntimeTypeInfo(t2, [J.JSInt]);
  t3 = P.List_List(3, J.JSInt);
  H.setRuntimeTypeInfo(t3, [J.JSInt]);
  t4 = new Float32Array(2);
  t4.$dartCachedLength = t4.length;
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(2);
  t6.$dartCachedLength = t6.length;
  t7 = new Float32Array(2);
  t7.$dartCachedLength = t7.length;
  return new V.Distance(0, 0, 20, t1, t2, t3, new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7));
}}

},

DistanceInput: {"": "Object;proxyA@,proxyB@,transformA,transformB,useRadii", static: {
DistanceInput$: function() {
  return new V.DistanceInput(V.DistanceProxy$(), V.DistanceProxy$(), V.Transform$(), V.Transform$(), false);
}}
},

DistanceOutput: {"": "Object;pointA,pointB,distance,iterations", static: {
DistanceOutput$: function() {
  var t1, t2;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  return new V.DistanceOutput(new T.Vector2(t1), new T.Vector2(t2), null, null);
}}
},

DistanceProxy: {"": "Object;vertices<,count,radius<",
  setFromShape$1: function(shape) {
    var t1, t2, t3, i, t4, t5, t6;
    t1 = shape.type;
    if (t1 === 0) {
      t1 = this.vertices;
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      t1[0].setFrom$1(shape.get$position(shape));
      this.count = 1;
      this.radius = shape.radius;
    } else if (t1 === 1) {
      this.count = shape.vertexCount;
      this.radius = shape.radius;
      for (t1 = this.count, t2 = this.vertices, t3 = t2.length, i = 0; i < t1; ++i) {
        if (i >= t3)
          throw H.ioore(t2, i);
        t4 = t2[i];
        t5 = shape.vertices;
        if (i >= t5.length)
          throw H.ioore(t5, i);
        t5 = t5[i];
        t4 = t4.storage;
        t6 = t5.get$storage();
        if (1 >= C.JS_CONST_ZYJ(t6))
          throw H.ioore(t6, 1);
        t4[1] = t6[1];
        t5 = t5.get$storage();
        if (0 >= C.JS_CONST_ZYJ(t5))
          throw H.ioore(t5, 0);
        t4[0] = t5[0];
      }
    }
  },
  getSupport$1: function(direction) {
    var t1, t2, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw H.ioore(t1, 0);
    bestValue = t1[0].dot$1(direction);
    for (bestIndex = 0, i = 1; i < this.count; ++i) {
      if (i >= t2)
        throw H.ioore(t1, i);
      value = t1[i].dot$1(direction);
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
    }
    return bestIndex;
  },
  DistanceProxy$0: function() {
    var t1, t2, i, t3;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = new Float32Array(2);
      t3.$dartCachedLength = t3.length;
      t1[i] = new T.Vector2(t3);
    }
  },
  static: {
DistanceProxy$: function() {
  var t1 = P.List_List(8, T.Vector2);
  H.setRuntimeTypeInfo(t1, [T.Vector2]);
  t1 = new V.DistanceProxy(t1, 0, 0);
  t1.DistanceProxy$0();
  return t1;
}}

},

Features: {"": "Object;referenceEdge<,incidentEdge,incidentVertex,flip",
  setFrom$1: function(f) {
    this.referenceEdge = f.get$referenceEdge();
    this.incidentEdge = f.incidentEdge;
    this.incidentVertex = f.incidentVertex;
    this.flip = f.flip;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this.referenceEdge === other.get$referenceEdge() && this.incidentEdge === other.incidentEdge && this.incidentVertex === other.incidentVertex && this.flip === other.flip;
  },
  toString$0: function(_) {
    return "Features: (" + this.flip + ", " + this.incidentEdge + ", " + this.incidentVertex + " " + this.referenceEdge + ")";
  },
  zero$0: function() {
    this.referenceEdge = 0;
    this.incidentEdge = 0;
    this.incidentVertex = 0;
    this.flip = 0;
  },
  static: {
Features$: function() {
  return new V.Features(0, 0, 0, 0);
}}

},

Manifold: {"": "Object;points>,localNormal,localPoint<,type,pointCount<",
  setFrom$1: function(other) {
    var t1, t2, t3, t4, i, t5, t6, t7, t8;
    for (t1 = this.points, t2 = t1.length, t3 = other.points, t4 = t3.length, i = 0; i < other.get$pointCount(); ++i) {
      if (i >= t2)
        throw H.ioore(t1, i);
      t5 = t1[i];
      if (i >= t4)
        throw H.ioore(t3, i);
      t6 = t3[i];
      t7 = t5.localPoint;
      t7 = t7.storage;
      t8 = t6.localPoint.storage;
      t7[1] = t8[1];
      t7[0] = t8[0];
      t5.normalImpulse = t6.normalImpulse;
      t5.tangentImpulse = t6.tangentImpulse;
      t5 = t5.id;
      t5 = t5.features;
      t6 = t6.id.features;
      t5.referenceEdge = t6.referenceEdge;
      t5.incidentEdge = t6.incidentEdge;
      t5.incidentVertex = t6.incidentVertex;
      t5.flip = t6.flip;
    }
    this.type = other.type;
    this.localNormal.setFrom$1(other.localNormal);
    this.localPoint.setFrom$1(other.localPoint);
    this.pointCount = other.pointCount;
  },
  Manifold$0: function() {
    var t1, t2, i, t3;
    for (t1 = this.points, t2 = t1.length, i = 0; i < 2; ++i) {
      t3 = new Float32Array(2);
      t3.$dartCachedLength = t3.length;
      if (i >= t2)
        throw H.ioore(t1, i);
      t1[i] = new V.ManifoldPoint(new T.Vector2(t3), 0, 0, new V.ContactID(new V.Features(0, 0, 0, 0)));
    }
  },
  static: {
Manifold$: function() {
  var t1, t2, t3;
  t1 = P.List_List(2, V.ManifoldPoint);
  H.setRuntimeTypeInfo(t1, [V.ManifoldPoint]);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t3 = new V.Manifold(t1, new T.Vector2(t2), new T.Vector2(t3), null, 0);
  t3.Manifold$0();
  return t3;
}}

},

ManifoldPoint: {"": "Object;localPoint<,normalImpulse@,tangentImpulse@,id",
  setFrom$1: function(other) {
    this.localPoint.setFrom$1(other.get$localPoint());
    this.normalImpulse = other.normalImpulse;
    this.tangentImpulse = other.tangentImpulse;
    this.id.features.setFrom$1(other.id.features);
  }
},

MassData: {"": "Object;mass,center,inertia",
  setFrom$1: function(md) {
    this.mass = md.get$mass();
    this.inertia = md.get$inertia();
    this.center.setFrom$1(md.get$center());
  },
  static: {
MassData$: function() {
  var t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  return new V.MassData(0, new T.Vector2(t1), 0);
}}

},

PolygonShape: {"": "Shape;centroid,vertices,normals,vertexCount,type,radius",
  setAsBox$2: function(hx, hy) {
    var t1, t2, t3, t4;
    this.vertexCount = 4;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t3 = -hx;
    t4 = -hy;
    t1[0].setValues$2(t3, t4);
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1].setValues$2(hx, t4);
    if (2 >= t2)
      throw H.ioore(t1, 2);
    t1[2].setValues$2(hx, hy);
    if (3 >= t2)
      throw H.ioore(t1, 3);
    t1[3].setValues$2(t3, hy);
    t3 = this.normals;
    t1 = t3.length;
    if (0 >= t1)
      throw H.ioore(t3, 0);
    t2 = t3[0].storage;
    t2[0] = 0;
    t2[1] = -1;
    if (1 >= t1)
      throw H.ioore(t3, 1);
    t2 = t3[1].storage;
    t2[0] = 1;
    t2[1] = 0;
    if (2 >= t1)
      throw H.ioore(t3, 2);
    t2 = t3[2].storage;
    t2[0] = 0;
    t2[1] = 1;
    if (3 >= t1)
      throw H.ioore(t3, 3);
    t3 = t3[3].storage;
    t3[0] = -1;
    t3[1] = 0;
    this.centroid.setZero$0();
  },
  setAsEdge$2: function(v1, v2) {
    var t1, t2, t3;
    this.vertexCount = 2;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0].setFrom$1(v1);
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1].setFrom$1(v2);
    t1 = this.centroid.setFrom$1(v1);
    t1 = t1.add$1(t1, v2);
    t1.scale$1(t1, 0.5);
    t1 = this.normals;
    t2 = t1.length;
    if (0 >= t2)
      throw H.ioore(t1, 0);
    t1[0].setFrom$1(v2).sub$1(v1);
    t3 = t1[0];
    V.Vector2_crossVectorAndNumToOut(t3, 1, t3);
    t1[0].normalize$0();
    if (1 >= t2)
      throw H.ioore(t1, 1);
    t1[1].setFrom$1(t1[0]).negate$0();
  },
  computeAxisAlignedBox$2: function(argAabb, argXf) {
    var t1, lower, upper, v, t2, t3, t4, t5, i;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    lower = new T.Vector2(t1);
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    upper = new T.Vector2(t1);
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    v = new T.Vector2(t1);
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw H.ioore(t1, 0);
    V.Transform_mulToOut(argXf, t1[0], lower);
    upper.setFrom$1(lower);
    for (t3 = lower.storage, t4 = v.storage, t5 = upper.storage, i = 1; i < this.vertexCount; ++i) {
      if (i >= t2)
        throw H.ioore(t1, i);
      V.Transform_mulToOut(argXf, t1[i], v);
      t3[0] = P.min(t3[0], t4[0]);
      t3[1] = P.min(t3[1], t4[1]);
      t5[0] = P.max(t5[0], t4[0]);
      t5[1] = P.max(t5[1], t4[1]);
    }
    t1 = argAabb.lowerBound;
    t2 = t3[0];
    t4 = this.radius;
    t1 = t1.storage;
    t1[0] = t2 - t4;
    t1[1] = t3[1] - t4;
    t3 = argAabb.upperBound;
    t1 = t5[0];
    t3 = t3.storage;
    t3[0] = t1 + t4;
    t3[1] = t5[1] + t4;
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, center, pRef, e1, e2, t4, t5, t6, area, I, i, t7, p2, p3, $D, triangleArea, px, py, ex1, ey1, ex2, ey2;
    if (this.vertexCount === 2) {
      t1 = this.vertices;
      t2 = t1.length;
      if (0 >= t2)
        throw H.ioore(t1, 0);
      t3 = massData.center.setFrom$1(t1[0]);
      if (1 >= t2)
        throw H.ioore(t1, 1);
      t1 = t3.add$1(t3, t1[1]);
      t1.scale$1(t1, 0.5);
      massData.mass = 0;
      massData.inertia = 0;
      return;
    }
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    center = new T.Vector2(t1);
    center.setZero$0();
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    pRef = new T.Vector2(t1);
    pRef.setZero$0();
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    e1 = new T.Vector2(t1);
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    e2 = new T.Vector2(t1);
    for (t1 = e1.storage, t2 = e2.storage, t3 = center.storage, t4 = pRef.storage, t5 = this.vertices, t6 = t5.length, area = 0, I = 0, i = 0; t7 = this.vertexCount, i < t7;) {
      if (i >= t6)
        throw H.ioore(t5, i);
      p2 = t5[i];
      ++i;
      if (i < t7) {
        if (i >= t6)
          throw H.ioore(t5, i);
        p3 = t5[i];
      } else {
        if (0 >= t6)
          throw H.ioore(t5, 0);
        p3 = t5[0];
      }
      t7 = p2.get$storage();
      if (1 >= C.JS_CONST_ZYJ(t7))
        throw H.ioore(t7, 1);
      t1[1] = t7[1];
      t7 = p2.get$storage();
      if (0 >= C.JS_CONST_ZYJ(t7))
        throw H.ioore(t7, 0);
      t1[0] = t7[0];
      e1.sub$1(pRef);
      t7 = p3.get$storage();
      if (1 >= C.JS_CONST_ZYJ(t7))
        throw H.ioore(t7, 1);
      t2[1] = t7[1];
      t7 = p3.get$storage();
      if (0 >= C.JS_CONST_ZYJ(t7))
        throw H.ioore(t7, 0);
      t2[0] = t7[0];
      e2.sub$1(pRef);
      $D = t1[0] * t2[1] - t1[1] * t2[0];
      triangleArea = 0.5 * $D;
      area += triangleArea;
      t7 = triangleArea * 0.3333333333333333;
      t3[0] = t3[0] + t7 * (t4[0] + p2.get$x(p2) + p3.get$x(p3));
      t3[1] = t3[1] + t7 * (t4[1] + p2.get$y(p2) + p3.get$y(p3));
      px = t4[0];
      py = t4[1];
      ex1 = t1[0];
      ey1 = t1[1];
      ex2 = t2[0];
      ey2 = t2[1];
      I += $D * (0.3333333333333333 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px + (0.3333333333333333 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py));
    }
    if (typeof density !== "number")
      throw density.$mul();
    massData.mass = density * area;
    center.scale$1(center, 1 / area);
    massData.center.setFrom$1(center);
    massData.inertia = I * density;
  },
  PolygonShape$copy$1: function(other) {
    var t1, t2, t3, t4, i, t5, t6, t7, t8;
    for (t1 = other.vertices, t2 = t1.length, t3 = this.vertices, t4 = t3.length, i = 0; i < t2; ++i) {
      t5 = t1[i];
      t6 = new Float32Array(2);
      t6.$dartCachedLength = t6.length;
      t6 = new T.Vector2(t6);
      t7 = t6.storage;
      t8 = t5.get$storage();
      if (1 >= C.JS_CONST_ZYJ(t8))
        throw H.ioore(t8, 1);
      t7[1] = t8[1];
      t5 = t5.get$storage();
      if (0 >= C.JS_CONST_ZYJ(t5))
        throw H.ioore(t5, 0);
      t7[0] = t5[0];
      if (i >= t4)
        throw H.ioore(t3, i);
      t3[i] = t6;
    }
    for (t1 = other.normals, t2 = t1.length, t3 = this.normals, t4 = t3.length, i = 0; i < t2; ++i) {
      t5 = t1[i];
      t6 = new Float32Array(2);
      t6.$dartCachedLength = t6.length;
      t6 = new T.Vector2(t6);
      t7 = t6.storage;
      t5 = t5.storage;
      t7[1] = t5[1];
      t7[0] = t5[0];
      if (i >= t4)
        throw H.ioore(t3, i);
      t3[i] = t6;
    }
  },
  PolygonShape$0: function() {
    var t1, t2, i, t3;
    for (t1 = this.vertices, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = new Float32Array(2);
      t3.$dartCachedLength = t3.length;
      t1[i] = new T.Vector2(t3);
    }
    for (t1 = this.normals, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = new Float32Array(2);
      t3.$dartCachedLength = t3.length;
      t1[i] = new T.Vector2(t3);
    }
  },
  static: {
PolygonShape$: function() {
  var t1, t2, t3;
  t1 = P.List_List(8, T.Vector2);
  H.setRuntimeTypeInfo(t1, [T.Vector2]);
  t2 = P.List_List(8, T.Vector2);
  H.setRuntimeTypeInfo(t2, [T.Vector2]);
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t2 = new V.PolygonShape(new T.Vector2(t3), t1, t2, 0, 1, 0.01);
  t2.PolygonShape$0();
  return t2;
},

PolygonShape$copy: function(other) {
  var t1, t2, t3, t4, t5;
  t1 = other.radius;
  t2 = other.vertexCount;
  t3 = P.List_List(8, T.Vector2);
  H.setRuntimeTypeInfo(t3, [T.Vector2]);
  t4 = P.List_List(8, T.Vector2);
  H.setRuntimeTypeInfo(t4, [T.Vector2]);
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t5 = new T.Vector2(t5);
  t5.setFrom$1(other.centroid);
  t1 = new V.PolygonShape(t5, t3, t4, t2, 1, t1);
  t1.PolygonShape$copy$1(other);
  return t1;
}}

},

Shape: {"": "Object;"},

Simplex: {"": "Object;v1,v2,v3,vertices,count,e13,e23,e12,case2,case22,case3,case33",
  readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
    var t1, t2, t3, i, t4, v, t5, wALocal, wBLocal, t6, t7, metric1, metric2;
    this.count = cache.count;
    for (t1 = this.vertices, t2 = cache.indexA, t3 = cache.indexB, i = 0; t4 = this.count, i < t4; ++i) {
      if (i >= 3)
        throw H.ioore(t1, i);
      v = t1[i];
      if (i >= t2.length)
        throw H.ioore(t2, i);
      v.indexA = t2[i];
      if (i >= t3.length)
        throw H.ioore(t3, i);
      v.indexB = t3[i];
      t4 = proxyA.get$vertices();
      t5 = v.indexA;
      if (t5 >>> 0 !== t5 || t5 >= t4.length)
        throw H.ioore(t4, t5);
      wALocal = t4[t5];
      t5 = proxyB.get$vertices();
      t4 = v.indexB;
      if (t4 >>> 0 !== t4 || t4 >= t5.length)
        throw H.ioore(t5, t4);
      wBLocal = t5[t4];
      t4 = v.wA;
      V.Transform_mulToOut(transformA, wALocal, t4);
      t5 = v.wB;
      V.Transform_mulToOut(transformB, wBLocal, t5);
      t6 = v.w;
      t7 = t6.storage;
      t5 = t5.storage;
      t7[1] = t5[1];
      t7[0] = t5[0];
      t6.sub$1(t4);
      v.a = 0;
    }
    if (t4 > 1) {
      metric1 = cache.metric;
      metric2 = this.getMetric$0();
      if (metric2 < 0.5 * metric1 || 2 * metric1 < metric2 || metric2 < 1.192e-7)
        this.count = 0;
    }
    if (this.count === 0) {
      v = t1[0];
      v.indexA = 0;
      v.indexB = 0;
      t1 = proxyA.get$vertices();
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      wALocal = t1[0];
      t1 = proxyB.get$vertices();
      if (0 >= t1.length)
        throw H.ioore(t1, 0);
      wBLocal = t1[0];
      t1 = v.wA;
      V.Transform_mulToOut(transformA, wALocal, t1);
      t2 = v.wB;
      V.Transform_mulToOut(transformB, wBLocal, t2);
      v.w.setFrom$1(t2).sub$1(t1);
      this.count = 1;
    }
  },
  writeCache$1: function(cache) {
    var t1, t2, t3, t4, t5, t6, i, t7;
    cache.metric = this.getMetric$0();
    cache.count = this.count;
    for (t1 = this.count, t2 = cache.indexA, t3 = this.vertices, t4 = t2.length, t5 = cache.indexB, t6 = t5.length, i = 0; i < t1; ++i) {
      if (i >= 3)
        throw H.ioore(t3, i);
      t7 = t3[i].indexA;
      if (i >= t4)
        throw H.ioore(t2, i);
      t2[i] = t7;
      t7 = t3[i].indexB;
      if (i >= t6)
        throw H.ioore(t5, i);
      t5[i] = t7;
    }
  },
  getSearchDirection$1: function(out) {
    var t1, t2;
    switch (this.count) {
      case 1:
        out.setFrom$1(this.v1.w).negate$0();
        return;
      case 2:
        t1 = this.e12;
        t2 = this.v1.w;
        t1.setFrom$1(this.v2.w).sub$1(t2);
        out.setFrom$1(t2).negate$0();
        if (t1.cross$1(out) > 0)
          V.Vector2_crossVectorAndNumToOut(t1, -1, out);
        else
          V.Vector2_crossVectorAndNumToOut(t1, 1, out);
        break;
      default:
        out.setZero$0();
        return;
    }
  },
  getClosestPoint$1: function(out) {
    var t1, t2, t3, t4;
    switch (this.count) {
      case 0:
        out.setZero$0();
        return;
      case 1:
        out.setFrom$1(this.v1.w);
        return;
      case 2:
        t1 = this.case22;
        t2 = this.v2;
        t3 = t1.setFrom$1(t2.w);
        t3.scale$1(t3, t2.a);
        t2 = this.case2;
        t3 = this.v1;
        t4 = t2.setFrom$1(t3.w);
        t3 = t4.scale$1(t4, t3.a);
        t3.add$1(t3, t1);
        out.setFrom$1(t2);
        return;
      case 3:
        out.setZero$0();
        return;
      default:
        out.setZero$0();
        return;
    }
  },
  getWitnessPoints$2: function(pA, pB) {
    var t1, t2, t3, t4;
    switch (this.count) {
      case 0:
        break;
      case 1:
        t1 = this.v1;
        pA.setFrom$1(t1.wA);
        pB.setFrom$1(t1.wB);
        break;
      case 2:
        t1 = this.case2;
        t2 = this.v1;
        t3 = t1.setFrom$1(t2.wA);
        t3.scale$1(t3, t2.a);
        t3 = this.v2;
        t4 = pA.setFrom$1(t3.wA);
        t4 = t4.scale$1(t4, t3.a);
        t4.add$1(t4, t1);
        t4 = t1.setFrom$1(t2.wB);
        t4.scale$1(t4, t2.a);
        t2 = pB.setFrom$1(t3.wB);
        t3 = t2.scale$1(t2, t3.a);
        t3.add$1(t3, t1);
        break;
      case 3:
        t1 = this.v1;
        t2 = pA.setFrom$1(t1.wA);
        t2.scale$1(t2, t1.a);
        t1 = this.case3;
        t2 = this.v2;
        t3 = t1.setFrom$1(t2.wA);
        t3.scale$1(t3, t2.a);
        t2 = this.case33;
        t3 = this.v3;
        t4 = t2.setFrom$1(t3.wA);
        t4.scale$1(t4, t3.a);
        t1 = pA.add$1(pA, t1);
        t1.add$1(t1, t2);
        pB.setFrom$1(pA);
        break;
      default:
        break;
    }
  },
  getMetric$0: function() {
    var t1, t2, t3;
    switch (this.count) {
      case 0:
        return 0;
      case 1:
        return 0;
      case 2:
        t1 = V.MathBox_distanceSquared(this.v1.w, this.v2.w);
        return Math.sqrt(t1);
      case 3:
        t1 = this.case3;
        t2 = this.v1.w;
        t1.setFrom$1(this.v2.w).sub$1(t2);
        t3 = this.case33;
        t3.setFrom$1(this.v3.w).sub$1(t2);
        return t1.cross$1(t3);
      default:
        return 0;
    }
  },
  solve2$0: function() {
    var t1, w1, t2, w2, t3, d12_2, d12_1, inv_d12;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.e12;
    t3.setFrom$1(w2).sub$1(w1);
    d12_2 = -w1.dot$1(t3);
    if (d12_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    d12_1 = w2.dot$1(t3);
    if (d12_1 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    inv_d12 = 1 / (d12_1 + d12_2);
    t1.a = d12_1 * inv_d12;
    t2.a = d12_2 * inv_d12;
    this.count = 2;
  },
  solve3$0: function() {
    var t1, w1, t2, w2, t3, w3, t4, w1e12, w2e12, d12_2, t5, w1e13, w3e13, d13_2, t6, w2e23, w3e23, d23_2, n123, d123_1, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.v3;
    w3 = t3.w;
    t4 = this.e12;
    t4.setFrom$1(w2).sub$1(w1);
    w1e12 = w1.dot$1(t4);
    w2e12 = w2.dot$1(t4);
    d12_2 = -w1e12;
    t5 = this.e13;
    t5.setFrom$1(w3).sub$1(w1);
    w1e13 = w1.dot$1(t5);
    w3e13 = w3.dot$1(t5);
    d13_2 = -w1e13;
    t6 = this.e23;
    t6.setFrom$1(w3).sub$1(w2);
    w2e23 = w2.dot$1(t6);
    w3e23 = w3.dot$1(t6);
    d23_2 = -w2e23;
    n123 = t4.cross$1(t5);
    d123_1 = n123 * w2.cross$1(w3);
    d123_2 = n123 * w3.cross$1(w1);
    d123_3 = n123 * w1.cross$1(w2);
    if (d12_2 <= 0 && d13_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
      inv_d12 = 1 / (w2e12 + d12_2);
      t1.a = w2e12 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
      return;
    }
    if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
      inv_d13 = 1 / (w3e13 + d13_2);
      t1.a = w3e13 * inv_d13;
      t3.a = d13_2 * inv_d13;
      this.count = 2;
      t2.setFrom$1(t3);
      return;
    }
    if (w2e12 <= 0 && d23_2 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    if (w3e13 <= 0 && w3e23 <= 0) {
      t3.a = 1;
      this.count = 1;
      t1.setFrom$1(t3);
      return;
    }
    if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
      inv_d23 = 1 / (w3e23 + d23_2);
      t2.a = w3e23 * inv_d23;
      t3.a = d23_2 * inv_d23;
      this.count = 2;
      t1.setFrom$1(t3);
      return;
    }
    inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
    t1.a = d123_1 * inv_d123;
    t2.a = d123_2 * inv_d123;
    t3.a = d123_3 * inv_d123;
    this.count = 3;
  },
  Simplex$0: function() {
    var t1 = this.vertices;
    t1[0] = this.v1;
    t1[1] = this.v2;
    t1[2] = this.v3;
  },
  static: {
Simplex$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = V.SimplexVertex$();
  t2 = V.SimplexVertex$();
  t3 = V.SimplexVertex$();
  t4 = P.List_List(3, V.SimplexVertex);
  H.setRuntimeTypeInfo(t4, [V.SimplexVertex]);
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(2);
  t6.$dartCachedLength = t6.length;
  t7 = new Float32Array(2);
  t7.$dartCachedLength = t7.length;
  t8 = new Float32Array(2);
  t8.$dartCachedLength = t8.length;
  t9 = new Float32Array(2);
  t9.$dartCachedLength = t9.length;
  t10 = new Float32Array(2);
  t10.$dartCachedLength = t10.length;
  t11 = new Float32Array(2);
  t11.$dartCachedLength = t11.length;
  t11 = new V.Simplex(t1, t2, t3, t4, 0, new T.Vector2(t5), new T.Vector2(t7), new T.Vector2(t6), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(t11));
  t11.Simplex$0();
  return t11;
}}

},

SimplexCache: {"": "Object;metric,count,indexA,indexB",
  setFrom$1: function(sc) {
    var t1, t2, t3;
    t1 = this.indexA;
    t2 = t1.length;
    t3 = sc.get$indexA();
    H.IterableMixinWorkaround_setRangeList(t1, 0, t2, t3, 0);
    t1 = this.indexB;
    t2 = t1.length;
    t3 = sc.get$indexB();
    H.IterableMixinWorkaround_setRangeList(t1, 0, t2, t3, 0);
    this.metric = sc.get$metric();
    this.count = sc.get$count();
  },
  static: {
SimplexCache$: function() {
  return new V.SimplexCache(0, 0, P.List_List$generate(3, new V.SimplexCache_closure(), true, J.JSInt), P.List_List$generate(3, new V.SimplexCache_closure0(), true, J.JSInt));
}}

},

SimplexCache_closure: {"": "Closure;",
  call$1: function(i) {
    return 2147483647;
  },
  $is_args1: true
},

SimplexCache_closure0: {"": "Closure;",
  call$1: function(i) {
    return 2147483647;
  },
  $is_args1: true
},

SimplexVertex: {"": "Object;wA<,wB,w,a,indexA,indexB",
  setFrom$1: function(sv) {
    this.wA.setFrom$1(sv.get$wA());
    this.wB.setFrom$1(sv.wB);
    this.w.setFrom$1(sv.w);
    this.a = sv.a;
    this.indexA = sv.indexA;
    this.indexB = sv.indexB;
  },
  toString$0: function(_) {
    return "wA: " + H.S(this.wA) + ", wB: " + H.S(this.wB) + ", w: " + H.S(this.w);
  },
  static: {
SimplexVertex$: function() {
  var t1, t2, t3;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  return new V.SimplexVertex(new T.Vector2(t1), new T.Vector2(t2), new T.Vector2(t3), 0, 0, 0);
}}

},

TimeOfImpact: {"": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA,sweepB,pool",
  timeOfImpact$2: function(output, input) {
    var t1, proxyA, proxyB, t2, tMax, target, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, iter, t14, t20, pushBackIter, done, s2, s1, a2, a1, rootIterCount, t, s;
    t1 = $.TimeOfImpact_toiCalls;
    if (typeof t1 !== "number")
      throw t1.$add();
    $.TimeOfImpact_toiCalls = t1 + 1;
    output.state = 0;
    output.t = input.tMax;
    proxyA = input.proxyA;
    proxyB = input.proxyB;
    t1 = this.sweepA;
    t1.setFrom$1(input.sweepA);
    t2 = this.sweepB;
    t2.setFrom$1(input.sweepB);
    t1.normalize$0();
    t2.normalize$0();
    tMax = input.tMax;
    target = P.max(0.005, proxyA.radius + proxyB.radius - 0.015);
    t3 = this.cache;
    t3.count = 0;
    t4 = this.distanceInput;
    t4.proxyA = proxyA;
    t4.proxyB = proxyB;
    t4.useRadii = false;
    for (t5 = this.fcn, t6 = this.indexes, t7 = target + 0.00125, t8 = target - 0.00125, t9 = this.distanceOutput, t10 = this.xfA, t11 = this.xfB, t12 = this.pool, t13 = 0, iter = 0; true;) {
      t1.getTransform$2(t10, t13);
      t2.getTransform$2(t11, t13);
      t4.transformA = t10;
      t4.transformB = t11;
      t12.distance.distance$3(t9, t3, t4);
      t14 = t9.distance;
      if (typeof t14 !== "number")
        throw t14.$le();
      if (t14 <= 0) {
        output.state = 2;
        output.t = 0;
        break;
      }
      if (t14 < t7) {
        output.state = 3;
        output.t = t13;
        break;
      }
      t5.initialize$6(t5, t3, proxyA, t1, proxyB, t2, t13);
      for (t20 = tMax, pushBackIter = 0; done = false, true;) {
        s2 = t5.findMinSeparation$2(t6, t20);
        if (s2 > t7) {
          output.state = 4;
          output.t = tMax;
          done = true;
          break;
        }
        if (s2 > t8) {
          t13 = t20;
          done = false;
          break;
        }
        s1 = t5.evaluate$3(t6[0], t6[1], t13);
        if (s1 < t8) {
          output.state = 1;
          output.t = t13;
          done = true;
          break;
        }
        if (s1 <= t7) {
          output.state = 3;
          output.t = t13;
          done = true;
          break;
        }
        for (a2 = t20, a1 = t13, rootIterCount = 0; true;) {
          t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
          s = t5.evaluate$3(t6[0], t6[1], t);
          if (Math.abs(s - target) < 0.00125) {
            t20 = t;
            break;
          }
          if (s > target) {
            a1 = t;
            s1 = s;
          } else {
            a2 = t;
            s2 = s;
          }
          ++rootIterCount;
          t14 = $.TimeOfImpact_toiRootIters;
          if (typeof t14 !== "number")
            throw t14.$add();
          $.TimeOfImpact_toiRootIters = t14 + 1;
          if (rootIterCount === 50)
            break;
        }
        $.TimeOfImpact_toiMaxRootIters = P.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
        ++pushBackIter;
        if (pushBackIter === 8) {
          done = false;
          break;
        }
      }
      ++iter;
      t14 = $.TimeOfImpact_toiIters;
      if (typeof t14 !== "number")
        throw t14.$add();
      $.TimeOfImpact_toiIters = t14 + 1;
      if (done)
        break;
      if (iter === 1000) {
        output.state = 1;
        output.t = t13;
        break;
      }
    }
    $.TimeOfImpact_toiMaxIters = P.max($.TimeOfImpact_toiMaxIters, iter);
  },
  TimeOfImpact$_construct$1: function(argPool) {
    var t1 = this.indexes;
    t1[0] = 0;
    t1[1] = 0;
    $.TimeOfImpact_toiCalls = 0;
    $.TimeOfImpact_toiIters = 0;
    $.TimeOfImpact_toiMaxIters = 0;
    $.TimeOfImpact_toiRootIters = 0;
    $.TimeOfImpact_toiMaxRootIters = 0;
  },
  static: {
"": "TimeOfImpact_MAX_ITERATIONS,TimeOfImpact_toiCalls,TimeOfImpact_toiIters,TimeOfImpact_toiMaxIters,TimeOfImpact_toiRootIters,TimeOfImpact_toiMaxRootIters",
TimeOfImpact$_construct: function(argPool) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = V.SimplexCache$();
  t2 = V.DistanceInput$();
  t3 = V.Transform$();
  t4 = V.Transform$();
  t5 = V.DistanceOutput$();
  t6 = V.SeparationFunction$();
  t7 = P.List_List(2, J.JSInt);
  H.setRuntimeTypeInfo(t7, [J.JSInt]);
  t7 = new V.TimeOfImpact(t1, t2, t3, t4, t5, t6, t7, V.Sweep$(), V.Sweep$(), argPool);
  t7.TimeOfImpact$_construct$1(argPool);
  return t7;
}}

},

SeparationFunction: {"": "Object;proxyA@,proxyB@,type,localPoint<,axis,sweepA,sweepB,localPointA,localPointB,pointA,pointB,localPointA1,localPointA2,normal,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
  initialize$6: function(_, cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
    var count, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, s;
    this.proxyA = argProxyA;
    this.proxyB = argProxyB;
    count = cache.count;
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t2 = this.xfa;
    this.sweepA.getTransform$2(t2, t1);
    t3 = this.xfb;
    this.sweepB.getTransform$2(t3, t1);
    if (count === 1) {
      this.type = 0;
      t1 = this.localPointA;
      t4 = this.proxyA.get$vertices();
      t5 = cache.indexA;
      if (0 >= t5.length)
        throw H.ioore(t5, 0);
      t5 = t5[0];
      if (t5 >>> 0 !== t5 || t5 >= t4.length)
        throw H.ioore(t4, t5);
      t1.setFrom$1(t4[t5]);
      t5 = this.localPointB;
      t4 = this.proxyB.get$vertices();
      t6 = cache.indexB;
      if (0 >= t6.length)
        throw H.ioore(t6, 0);
      t6 = t6[0];
      if (t6 >>> 0 !== t6 || t6 >= t4.length)
        throw H.ioore(t4, t6);
      t5.setFrom$1(t4[t6]);
      t6 = this.pointA;
      V.Transform_mulToOut(t2, t1, t6);
      t1 = this.pointB;
      V.Transform_mulToOut(t3, t5, t1);
      t5 = this.axis;
      t5.setFrom$1(t1).sub$1(t6);
      return t5.normalizeLength$0();
    } else {
      t1 = cache.indexA;
      t4 = t1.length;
      if (0 >= t4)
        throw H.ioore(t1, 0);
      t5 = t1[0];
      if (1 >= t4)
        throw H.ioore(t1, 1);
      t4 = cache.indexB;
      t6 = this.pointA;
      t7 = this.localPoint;
      t8 = this.normal;
      t9 = this.axis;
      t10 = this.pointB;
      t11 = this.temp;
      if (J.$eq(t5, t1[1])) {
        this.type = 2;
        t5 = this.localPointB1;
        t12 = this.proxyB.get$vertices();
        if (0 >= t4.length)
          throw H.ioore(t4, 0);
        t13 = t4[0];
        if (t13 >>> 0 !== t13 || t13 >= t12.length)
          throw H.ioore(t12, t13);
        t5.setFrom$1(t12[t13]);
        t13 = this.localPointB2;
        t12 = this.proxyB.get$vertices();
        if (1 >= t4.length)
          throw H.ioore(t4, 1);
        t4 = t4[1];
        if (t4 >>> 0 !== t4 || t4 >= t12.length)
          throw H.ioore(t12, t4);
        t13.setFrom$1(t12[t4]);
        t11.setFrom$1(t13).sub$1(t5);
        V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
        t9.normalize$0();
        t3.rotation.transformed$2(t9, t8);
        t7.setFrom$1(t5);
        t7.add$1(t7, t13);
        t7.scale$1(t7, 0.5);
        V.Transform_mulToOut(t3, t7, t10);
        t7 = this.localPointA;
        t3 = this.proxyA.get$vertices();
        if (0 >= t1.length)
          throw H.ioore(t1, 0);
        t1 = t1[0];
        if (t1 >>> 0 !== t1 || t1 >= t3.length)
          throw H.ioore(t3, t1);
        t7.setFrom$1(t3[t1]);
        V.Transform_mulToOut(t2, t7, t6);
        t11.setFrom$1(t6);
        t11.sub$1(t10);
        s = t11.dot$1(t8);
        if (s < 0) {
          t9.negate$0();
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t5 = this.localPointA1;
        t12 = this.proxyA.get$vertices();
        if (0 >= t1.length)
          throw H.ioore(t1, 0);
        t13 = t1[0];
        if (t13 >>> 0 !== t13 || t13 >= t12.length)
          throw H.ioore(t12, t13);
        t5.setFrom$1(t12[t13]);
        t13 = this.localPointA2;
        t12 = this.proxyA.get$vertices();
        if (1 >= t1.length)
          throw H.ioore(t1, 1);
        t1 = t1[1];
        if (t1 >>> 0 !== t1 || t1 >= t12.length)
          throw H.ioore(t12, t1);
        t13.setFrom$1(t12[t1]);
        t11.setFrom$1(t13);
        t11.sub$1(t5);
        V.Vector2_crossVectorAndNumToOut(t11, 1, t9);
        t9.normalize$0();
        t2.rotation.transformed$2(t9, t8);
        t7.setFrom$1(t5);
        t7.add$1(t7, t13);
        t7.scale$1(t7, 0.5);
        V.Transform_mulToOut(t2, t7, t6);
        t7 = this.localPointB;
        t2 = this.proxyB.get$vertices();
        if (0 >= t4.length)
          throw H.ioore(t4, 0);
        t4 = t4[0];
        if (t4 >>> 0 !== t4 || t4 >= t2.length)
          throw H.ioore(t2, t4);
        t7.setFrom$1(t2[t4]);
        V.Transform_mulToOut(t3, t7, t10);
        t11.setFrom$1(t10);
        t11.sub$1(t6);
        s = t11.dot$1(t8);
        if (s < 0) {
          t9.negate$0();
          s = -s;
        }
        return s;
      }
    }
  },
  findMinSeparation$2: function(indexes, t) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    switch (this.type) {
      case 0:
        t3 = this.axis;
        t4 = this.axisA;
        t1.rotation.transposed$0().transformed$2(t3, t4);
        t5 = this.axisB;
        t2.rotation.transposed$0().transformed$2(t3.negate$0(), t5);
        t3.negate$0();
        indexes[0] = this.proxyA.getSupport$1(t4);
        indexes[1] = this.proxyB.getSupport$1(t5);
        t5 = this.localPointA;
        t4 = this.proxyA.get$vertices();
        t6 = indexes[0];
        if (t6 >>> 0 !== t6 || t6 >= t4.length)
          throw H.ioore(t4, t6);
        t5.setFrom$1(t4[t6]);
        t6 = this.localPointB;
        t4 = this.proxyB.get$vertices();
        t7 = indexes[1];
        if (t7 >>> 0 !== t7 || t7 >= t4.length)
          throw H.ioore(t4, t7);
        t6.setFrom$1(t4[t7]);
        t7 = this.pointA;
        V.Transform_mulToOut(t1, t5, t7);
        t5 = this.pointB;
        V.Transform_mulToOut(t2, t6, t5);
        return t5.sub$1(t7).dot$1(t3);
      case 1:
        t3 = this.normal;
        t1.rotation.transformed$2(this.axis, t3);
        t4 = this.pointA;
        V.Transform_mulToOut(t1, this.localPoint, t4);
        t3.negate$0();
        t1 = this.axisB;
        t2.rotation.transposed$0().transformed$2(t3, t1);
        t3.negate$0();
        indexes[0] = -1;
        indexes[1] = this.proxyB.getSupport$1(t1);
        t1 = this.localPointB;
        t5 = this.proxyB.get$vertices();
        t6 = indexes[1];
        if (t6 >>> 0 !== t6 || t6 >= t5.length)
          throw H.ioore(t5, t6);
        t1.setFrom$1(t5[t6]);
        t6 = this.pointB;
        V.Transform_mulToOut(t2, t1, t6);
        return t6.sub$1(t4).dot$1(t3);
      case 2:
        t3 = this.normal;
        t2.rotation.transformed$2(this.axis, t3);
        t4 = this.pointB;
        V.Transform_mulToOut(t2, this.localPoint, t4);
        t2 = this.axisA;
        t1.rotation.transposed$0().transformed$2(t3.negate$0(), t2);
        t3.negate$0();
        indexes[1] = -1;
        indexes[0] = this.proxyA.getSupport$1(t2);
        t2 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        t6 = indexes[0];
        if (t6 >>> 0 !== t6 || t6 >= t5.length)
          throw H.ioore(t5, t6);
        t2.setFrom$1(t5[t6]);
        t6 = this.pointA;
        V.Transform_mulToOut(t1, t2, t6);
        return t6.sub$1(t4).dot$1(t3);
      default:
        indexes[0] = -1;
        indexes[1] = -1;
        return 0;
    }
  },
  evaluate$3: function(indexA, indexB, t) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.xfa;
    this.sweepA.getTransform$2(t1, t);
    t2 = this.xfb;
    this.sweepB.getTransform$2(t2, t);
    switch (this.type) {
      case 0:
        t3 = this.axis;
        t1.rotation.transposed$0().transformed$2(t3, this.axisA);
        t2.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisB);
        t3.negate$0();
        t4 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t5.length)
          throw H.ioore(t5, indexA);
        t4.setFrom$1(t5[indexA]);
        t5 = this.localPointB;
        t6 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t6.length)
          throw H.ioore(t6, indexB);
        t5.setFrom$1(t6[indexB]);
        t6 = this.pointA;
        V.Transform_mulToOut(t1, t4, t6);
        t4 = this.pointB;
        V.Transform_mulToOut(t2, t5, t4);
        return t4.sub$1(t6).dot$1(t3);
      case 1:
        t3 = this.normal;
        t1.rotation.transformed$2(this.axis, t3);
        t4 = this.pointA;
        V.Transform_mulToOut(t1, this.localPoint, t4);
        t3.negate$0();
        t2.rotation.transposed$0().transformed$2(t3, this.axisB);
        t3.negate$0();
        t1 = this.localPointB;
        t5 = this.proxyB.get$vertices();
        if (indexB >>> 0 !== indexB || indexB >= t5.length)
          throw H.ioore(t5, indexB);
        t1.setFrom$1(t5[indexB]);
        t5 = this.pointB;
        V.Transform_mulToOut(t2, t1, t5);
        return t5.sub$1(t4).dot$1(t3);
      case 2:
        t3 = this.normal;
        t2.rotation.transformed$2(this.axis, t3);
        t4 = this.pointB;
        V.Transform_mulToOut(t2, this.localPoint, t4);
        t1.rotation.transposed$0().transformed$2(t3.negate$0(), this.axisA);
        t3.negate$0();
        t2 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        if (indexA >>> 0 !== indexA || indexA >= t5.length)
          throw H.ioore(t5, indexA);
        t2.setFrom$1(t5[indexA]);
        t5 = this.pointA;
        V.Transform_mulToOut(t1, t2, t5);
        return t5.sub$1(t4).dot$1(t3);
      default:
        return 0;
    }
  },
  static: {
SeparationFunction$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20;
  t1 = V.DistanceProxy$();
  t2 = V.DistanceProxy$();
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t4 = new Float32Array(2);
  t4.$dartCachedLength = t4.length;
  t5 = V.Sweep$();
  t6 = V.Sweep$();
  t7 = new Float32Array(2);
  t7.$dartCachedLength = t7.length;
  t8 = new Float32Array(2);
  t8.$dartCachedLength = t8.length;
  t9 = new Float32Array(2);
  t9.$dartCachedLength = t9.length;
  t10 = new Float32Array(2);
  t10.$dartCachedLength = t10.length;
  t11 = new Float32Array(2);
  t11.$dartCachedLength = t11.length;
  t12 = new Float32Array(2);
  t12.$dartCachedLength = t12.length;
  t13 = new Float32Array(2);
  t13.$dartCachedLength = t13.length;
  t14 = new Float32Array(2);
  t14.$dartCachedLength = t14.length;
  t15 = new Float32Array(2);
  t15.$dartCachedLength = t15.length;
  t16 = new Float32Array(2);
  t16.$dartCachedLength = t16.length;
  t17 = V.Transform$();
  t18 = V.Transform$();
  t19 = new Float32Array(2);
  t19.$dartCachedLength = t19.length;
  t20 = new Float32Array(2);
  t20.$dartCachedLength = t20.length;
  return new V.SeparationFunction(t1, t2, 0, new T.Vector2(t3), new T.Vector2(t4), t5, t6, new T.Vector2(t7), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(t11), new T.Vector2(t12), new T.Vector2(t13), new T.Vector2(t14), new T.Vector2(t15), new T.Vector2(t19), new T.Vector2(t20), new T.Vector2(t16), t17, t18);
}}

},

TimeOfImpactInput: {"": "Object;proxyA<,proxyB<,sweepA,sweepB,tMax", static: {
TimeOfImpactInput$: function() {
  return new V.TimeOfImpactInput(V.DistanceProxy$(), V.DistanceProxy$(), V.Sweep$(), V.Sweep$(), 0);
}}
},

TimeOfImpactOutput: {"": "Object;state,t"},

WorldManifold: {"": "Object;normal,points,pool3,pool4",
  initialize$5: function(_, manifold, xfA, radiusA, xfB, radiusB) {
    var pointA, pointB, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, i, t11, t12, t13, t14, scalar;
    switch (manifold.type) {
      case 0:
        pointA = this.pool3;
        pointB = this.pool4;
        t1 = this.normal;
        t2 = t1.storage;
        t2[0] = 1;
        t2[1] = 0;
        t3 = xfA.position.storage;
        t4 = xfA.rotation.storage;
        t5 = manifold.localPoint.storage;
        t6 = pointA.storage;
        t6[0] = t3[0] + t4[0] * t5[0] + t4[2] * t5[1];
        t6[1] = t3[1] + t4[1] * t5[0] + t4[3] * t5[1];
        t5 = xfB.position.storage;
        t4 = t5[0];
        t3 = xfB.rotation.storage;
        t7 = t3[0];
        t8 = manifold.points;
        if (0 >= t8.length)
          throw H.ioore(t8, 0);
        t9 = t8[0].localPoint.storage;
        t10 = pointB.storage;
        t10[0] = t4 + t7 * t9[0] + t3[2] * t9[1];
        t8 = t8[0].localPoint.storage;
        t10[1] = t5[1] + t3[1] * t8[0] + t3[3] * t8[1];
        if (V.MathBox_distanceSquared(pointA, pointB) > 1.4208639999999999e-14) {
          t2[0] = t10[0] - t6[0];
          t2[1] = t10[1] - t6[1];
          t1.normalize$0();
        }
        t1 = t2[0];
        t3 = t6[0];
        t2 = t2[1];
        t6 = t6[1];
        t4 = t10[0];
        t10 = t10[1];
        t5 = this.points;
        if (0 >= t5.length)
          throw H.ioore(t5, 0);
        J.set$x$x(t5[0], (t1 * radiusA + t3 + (-t1 * radiusB + t4)) * 0.5);
        if (0 >= t5.length)
          throw H.ioore(t5, 0);
        J.set$y$x(t5[0], (t2 * radiusA + t6 + (-t2 * radiusB + t10)) * 0.5);
        return;
      case 1:
        t1 = xfA.rotation.storage;
        t2 = manifold.localNormal.storage;
        t3 = this.normal.storage;
        t3[0] = t1[0] * t2[0] + t1[2] * t2[1];
        t3[1] = t1[1] * t2[0] + t1[3] * t2[1];
        t2 = xfA.position.storage;
        t4 = manifold.localPoint.storage;
        t5 = this.pool3.storage;
        t5[0] = t2[0] + t1[0] * t4[0] + t1[2] * t4[1];
        t5[1] = t2[1] + t1[1] * t4[0] + t1[3] * t4[1];
        for (t1 = xfB.position.storage, t2 = xfB.rotation.storage, t4 = manifold.points, t6 = t4.length, t7 = this.pool4.storage, t8 = this.points, i = 0; i < manifold.pointCount; ++i) {
          t9 = t1[0];
          t10 = t2[0];
          if (i >= t6)
            throw H.ioore(t4, i);
          t11 = t4[i].localPoint.storage;
          t7[0] = t9 + t10 * t11[0] + t2[2] * t11[1];
          t11 = t4[i].localPoint.storage;
          t7[1] = t1[1] + t2[1] * t11[0] + t2[3] * t11[1];
          t11 = t7[0];
          t10 = t5[0];
          t9 = t3[0];
          t12 = t7[1];
          t13 = t5[1];
          t14 = t3[1];
          scalar = radiusA - ((t11 - t10) * t9 + (t12 - t13) * t14);
          if (i >= t8.length)
            throw H.ioore(t8, i);
          J.set$x$x(t8[i], (t9 * scalar + t11 + (-t9 * radiusB + t11)) * 0.5);
          if (i >= t8.length)
            throw H.ioore(t8, i);
          J.set$y$x(t8[i], (t14 * scalar + t12 + (-t14 * radiusB + t12)) * 0.5);
        }
        return;
      case 2:
        t1 = xfB.rotation.storage;
        t2 = manifold.localNormal.storage;
        t3 = this.normal.storage;
        t3[0] = t1[0] * t2[0] + t1[2] * t2[1];
        t3[1] = t1[1] * t2[0] + t1[3] * t2[1];
        t2 = xfB.position.storage;
        t4 = manifold.localPoint.storage;
        t5 = this.pool3.storage;
        t5[0] = t2[0] + t1[0] * t4[0] + t1[2] * t4[1];
        t5[1] = t2[1] + t1[1] * t4[0] + t1[3] * t4[1];
        for (t1 = xfA.position.storage, t2 = xfA.rotation.storage, t4 = manifold.points, t6 = t4.length, t7 = this.pool4.storage, t8 = this.points, i = 0; i < manifold.pointCount; ++i) {
          t9 = t1[0];
          t10 = t2[0];
          if (i >= t6)
            throw H.ioore(t4, i);
          t11 = t4[i].localPoint.storage;
          t7[0] = t9 + t10 * t11[0] + t2[2] * t11[1];
          t11 = t4[i].localPoint.storage;
          t7[1] = t1[1] + t2[1] * t11[0] + t2[3] * t11[1];
          t11 = t7[0];
          t10 = t5[0];
          t9 = t3[0];
          t12 = t7[1];
          t13 = t5[1];
          t14 = t3[1];
          scalar = radiusB - ((t11 - t10) * t9 + (t12 - t13) * t14);
          if (i >= t8.length)
            throw H.ioore(t8, i);
          J.set$x$x(t8[i], (-t9 * radiusA + t11 + (t9 * scalar + t11)) * 0.5);
          if (i >= t8.length)
            throw H.ioore(t8, i);
          J.set$y$x(t8[i], (-t14 * radiusA + t12 + (t14 * scalar + t12)) * 0.5);
        }
        t3[0] = -t3[0];
        t3[1] = -t3[1];
        break;
      default:
    }
  },
  static: {
WorldManifold$: function() {
  var t1, t2, t3;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  return new V.WorldManifold(new T.Vector2(t1), P.List_List$generate(2, new V.WorldManifold_closure(), true, T.Vector2), new T.Vector2(t2), new T.Vector2(t3));
}}

},

WorldManifold_closure: {"": "Closure;",
  call$1: function(i) {
    var t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    return new T.Vector2(t1);
  },
  $is_args1: true
},

Sweep: {"": "Object;localCenter<,centerZero<,center,angleZero,angle",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this.localCenter === other.get$localCenter() && this.centerZero === other.get$centerZero() && this.center === other.center && this.angleZero === other.angleZero && this.angle === other.angle;
  },
  setFrom$1: function(other) {
    this.localCenter.setFrom$1(other.get$localCenter());
    this.centerZero.setFrom$1(other.centerZero);
    this.center.setFrom$1(other.center);
    this.angleZero = other.angleZero;
    this.angle = other.angle;
  },
  normalize$0: function() {
    var d = 6.283185307179586 * C.JSNumber_methods.toInt$0(Math.floor(this.angleZero / 6.283185307179586));
    this.angleZero = this.angleZero - d;
    this.angle = this.angle - d;
  },
  getTransform$2: function(xf, alpha) {
    var t1, t2, t3, t4;
    t1 = 1 - alpha;
    t2 = this.centerZero.storage;
    t3 = this.center.storage;
    t4 = xf.position.storage;
    t4[0] = t1 * t2[0] + alpha * t3[0];
    t4[1] = t1 * t2[1] + alpha * t3[1];
    t3 = xf.rotation;
    t3.setRotation$1(t1 * this.angleZero + alpha * this.angle);
    t3 = t3.storage;
    t1 = this.localCenter.storage;
    t4[0] = t4[0] - (t3[0] * t1[0] + t3[2] * t1[1]);
    t4[1] = t4[1] - (t3[1] * t1[0] + t3[3] * t1[1]);
  },
  advance$1: function(time) {
    var t1, t2, t3;
    t1 = 1 - time;
    t2 = this.centerZero.storage;
    t3 = this.center.storage;
    t2[0] = t1 * t2[0] + time * t3[0];
    t2[1] = t1 * t2[1] + time * t3[1];
    this.angleZero = t1 * this.angleZero + time * this.angle;
  },
  static: {
Sweep$: function() {
  var t1, t2, t3;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  return new V.Sweep(new T.Vector2(t1), new T.Vector2(t2), new T.Vector2(t3), 0, 0);
}}

},

Transform: {"": "Object;position>,rotation<",
  $eq: function(_, other) {
    if (other == null)
      return false;
    return this.position === J.get$position$x(other) && this.rotation === other.get$rotation();
  },
  setFrom$1: function(other) {
    this.position.setFrom$1(other.get$position(other));
    this.rotation.setFrom$1(other.rotation);
  },
  static: {
Transform$: function() {
  var t1, t2;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(4);
  t2.$dartCachedLength = t2.length;
  return new V.Transform(new T.Vector2(t1), new T.Matrix2(t2));
},

Transform_mulToOut: function(transform, vector, out) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11;
  t1 = transform.position.storage;
  t2 = t1[1];
  t3 = transform.rotation.storage;
  t4 = t3[1];
  t5 = J.getInterceptor$x(vector);
  t6 = t5.get$x(vector);
  if (typeof t6 !== "number")
    throw H.iae(t6);
  t7 = t3[3];
  t8 = t5.get$y(vector);
  if (typeof t8 !== "number")
    throw H.iae(t8);
  t1 = t1[0];
  t9 = t3[0];
  t10 = t5.get$x(vector);
  if (typeof t10 !== "number")
    throw H.iae(t10);
  t3 = t3[2];
  t5 = t5.get$y(vector);
  if (typeof t5 !== "number")
    throw H.iae(t5);
  t11 = J.getInterceptor$x(out);
  t11.set$x(out, t1 + t9 * t10 + t3 * t5);
  t11.set$y(out, t2 + t4 * t6 + t7 * t8);
},

Transform_mulTransToOut: function($T, v, out) {
  var t1, t2, v1x, v1y, bx, by, b1x, b1y;
  t1 = v.storage;
  t2 = $T.position.storage;
  v1x = t1[0] - t2[0];
  v1y = t1[1] - t2[1];
  t2 = $T.rotation.storage;
  bx = t2[0];
  by = t2[1];
  b1x = t2[2];
  b1y = t2[3];
  t2 = out.storage;
  t2[0] = v1x * bx + v1y * by;
  t2[1] = v1x * b1x + v1y * b1y;
}}

},

ViewportTransform: {"": "Object;",
  get$translation: function() {
    var t1, result;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    result = new T.Vector2(t1);
    result.setFrom$1(this.extents);
    result.sub$1(this.center);
    return result;
  },
  getWorldToScreen$2: function(argWorld, argScreen) {
    var t1, t2, gridCorrectedX, t3;
    t1 = J.getInterceptor$x(argWorld);
    t2 = this.extents.storage;
    gridCorrectedX = J.$add$ns(J.$mul$n(t1.get$x(argWorld), this.scale), t2[0]);
    t2 = t2[1];
    t1 = t1.get$y(argWorld);
    t3 = this.scale;
    if (typeof t1 !== "number")
      throw t1.$mul();
    argScreen.setValues$2(J.$add$ns(gridCorrectedX, this.get$translation().storage[0]), t2 - t1 * t3 + -this.get$translation().storage[1]);
  }
},

Body: {"": "Object;world,flags<,contactList<,sleepTime,userData<,_linearVelocity,_angularVelocity,mass,invMass,next,prev,fixtureList,fixtureCount,jointList,_force,_torque,_inertia,invInertia,linearDamping,angularDamping,_type<,islandIndex,originTransform,sweep<,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
  createFixture$1: function(def) {
    var fixture, t1;
    fixture = V.Fixture$();
    fixture.create$2(this, def);
    t1 = this.flags;
    if (typeof t1 !== "number")
      throw t1.$and();
    if ((t1 & 32) === 32)
      fixture.createProxy$2(this.world._contactManager.broadPhase, this.originTransform);
    fixture.next = this.fixtureList;
    this.fixtureList = fixture;
    this.fixtureCount = this.fixtureCount + 1;
    fixture.body = this;
    t1 = fixture.density;
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 0)
      this.resetMassData$0();
    t1 = this.world;
    t1._flags = (t1._flags | 1) >>> 0;
    return fixture;
  },
  createFixtureFromShape$2: function(shape, density) {
    var t1 = this._fixDef;
    t1.shape = shape;
    t1.density = density;
    return this.createFixture$1(t1);
  },
  createFixtureFromShape$1: function(shape) {
    return this.createFixtureFromShape$2(shape, 0);
  },
  get$position: function(_) {
    return this.originTransform.position;
  },
  get$localCenter: function() {
    return this.sweep.localCenter;
  },
  applyLinearImpulse$2: function(impulse, point) {
    var t1, t2, t3, t4, t5;
    if (this._type !== 2)
      return;
    this.set$awake(true);
    t1 = this._linearVelocity.storage;
    t2 = t1[0];
    t3 = impulse.storage;
    t4 = t3[0];
    t5 = this.invMass;
    t1[0] = t2 + t4 * t5;
    t1[1] = t1[1] + t3[1] * t5;
    t5 = point.storage;
    t1 = this.sweep.center.storage;
    this._angularVelocity = this._angularVelocity + this.invInertia * ((t5[0] - t1[0]) * t3[1] - (t5[1] - t1[1]) * t3[0]);
  },
  resetMassData$0: function() {
    var t1, t2, t3, massData, f, t4, t5, temp, t6;
    this.mass = 0;
    this.invMass = 0;
    this._inertia = 0;
    this.invInertia = 0;
    t1 = this.sweep;
    t2 = t1.localCenter;
    t2.setZero$0();
    t3 = this._type;
    if (t3 === 0 || t3 === 1) {
      t2 = this.originTransform.position;
      t1.center.setFrom$1(t2);
      t1.centerZero.setFrom$1(t2);
      return;
    }
    t3 = this.tempCenter;
    t3.setZero$0();
    massData = this._pmd;
    for (f = this.fixtureList, t4 = massData.center.storage; f != null; f = f.next) {
      t5 = f.density;
      if (t5 === 0)
        continue;
      f.shape.computeMass$2(massData, t5);
      this.mass = this.mass + massData.mass;
      t5 = new Float32Array(2);
      t5.$dartCachedLength = t5.length;
      temp = new T.Vector2(t5);
      t5 = temp.storage;
      t5[1] = t4[1];
      t5[0] = t4[0];
      t6 = massData.mass;
      t5[1] = t5[1] * t6;
      t5[0] = t5[0] * t6;
      t3.add$1(t3, temp);
      this._inertia = this._inertia + massData.inertia;
    }
    t4 = this.mass;
    if (t4 > 0) {
      this.invMass = 1 / t4;
      t3.scale$1(t3, this.invMass);
    } else {
      this.mass = 1;
      this.invMass = 1;
    }
    t4 = this._inertia;
    if (t4 > 0) {
      t5 = this.flags;
      if (typeof t5 !== "number")
        throw t5.$and();
      t5 = (t5 & 16) === 0;
    } else
      t5 = false;
    if (t5) {
      this._inertia = t4 - this.mass * t3.dot$1(t3);
      this.invInertia = 1 / this._inertia;
    } else {
      this._inertia = 0;
      this.invInertia = 0;
    }
    t4 = this.oldCenter;
    t5 = t1.center;
    t4.setFrom$1(t5);
    t2.setFrom$1(t3);
    t1 = t1.centerZero;
    V.Transform_mulToOut(this.originTransform, t2, t1);
    t5.setFrom$1(t1);
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    temp = new T.Vector2(t1);
    temp.setFrom$1(t5);
    temp.sub$1(t4);
    V.Vector2_crossVectorAndNumToOut(temp, -this._angularVelocity, temp);
    t4 = this._linearVelocity;
    t4.add$1(t4, temp);
  },
  getWorldPoint$1: function(localPoint) {
    var t1, v;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    v = new T.Vector2(t1);
    V.Transform_mulToOut(this.originTransform, localPoint, v);
    return v;
  },
  getWorldVector2$1: function(localVector) {
    var t1, out;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    out = new T.Vector2(t1);
    this.originTransform.rotation.transformed$2(localVector, out);
    return out;
  },
  get$type: function(_) {
    return this._type;
  },
  set$awake: function(flag) {
    var t1;
    if (flag) {
      t1 = this.flags;
      if (typeof t1 !== "number")
        throw t1.$and();
      if ((t1 & 2) === 0) {
        this.flags = (t1 | 2) >>> 0;
        this.sleepTime = 0;
      }
    } else {
      t1 = this.flags;
      if (typeof t1 !== "number")
        throw t1.$and();
      this.flags = (t1 & 4294967293) >>> 0;
      this.sleepTime = 0;
      this._linearVelocity.setZero$0();
      this._angularVelocity = 0;
      this._force.setZero$0();
      this._torque = 0;
    }
  },
  get$awake: function() {
    var t1 = this.flags;
    if (typeof t1 !== "number")
      throw t1.$and();
    return (t1 & 2) === 2;
  },
  synchronizeFixtures$0: function() {
    var xf1, t1, t2, t3, broadPhase, f;
    xf1 = this._pxf;
    t1 = xf1.rotation;
    t2 = this.sweep;
    t1.setRotation$1(t2.angleZero);
    t3 = xf1.position;
    t1.transformed$2(t2.localCenter, t3);
    t3.scale$1(t3, -1);
    t3.add$1(t3, t2.centerZero);
    broadPhase = this.world._contactManager.broadPhase;
    for (f = this.fixtureList, t1 = this.originTransform; f != null; f = f.next)
      f.synchronize$3(broadPhase, xf1, t1);
  },
  synchronizeTransform$0: function() {
    var t1, t2, c, s, t, r, t3, t4;
    t1 = this.sweep;
    t2 = t1.angle;
    c = Math.cos(t2);
    t2 = t1.angle;
    s = Math.sin(t2);
    t = this.originTransform;
    r = t.rotation;
    r.setValues$4(c, s, -s, c);
    t2 = r.storage;
    t3 = t1.localCenter.storage;
    t1 = t1.center.storage;
    t4 = t.position.storage;
    t4[0] = (t2[0] * t3[0] + t2[2] * t3[1]) * -1 + t1[0];
    t4[1] = (t2[1] * t3[0] + t2[3] * t3[1]) * -1 + t1[1];
  },
  shouldCollide$1: function(other) {
    return !(this._type !== 2 && other.get$_type() !== 2);
  },
  Body$2: function(bd, world) {
    var t1, t2, t3, t4;
    if (bd.bullet) {
      t1 = this.flags;
      if (typeof t1 !== "number")
        throw t1.$or();
      this.flags = (t1 | 8) >>> 0;
    }
    if (bd.fixedRotation) {
      t1 = this.flags;
      if (typeof t1 !== "number")
        throw t1.$or();
      this.flags = (t1 | 16) >>> 0;
    }
    if (bd.allowSleep) {
      t1 = this.flags;
      if (typeof t1 !== "number")
        throw t1.$or();
      this.flags = (t1 | 4) >>> 0;
    }
    if (bd.awake) {
      t1 = this.flags;
      if (typeof t1 !== "number")
        throw t1.$or();
      this.flags = (t1 | 2) >>> 0;
    }
    if (bd.active) {
      t1 = this.flags;
      if (typeof t1 !== "number")
        throw t1.$or();
      this.flags = (t1 | 32) >>> 0;
    }
    t1 = this.originTransform;
    t1.position.setFrom$1(bd.position);
    t1.rotation.setRotation$1(bd.angle);
    t2 = this.sweep;
    t3 = t2.localCenter;
    t3.setZero$0();
    t4 = t2.centerZero;
    V.Transform_mulToOut(t1, t3, t4);
    t2.center.setFrom$1(t4);
    t2.angle = bd.angle;
    t2.angleZero = bd.angle;
    if (this._type === 2) {
      this.mass = 1;
      this.invMass = 1;
    } else {
      this.mass = 0;
      this.invMass = 0;
    }
  },
  static: {
"": "Body_ISLAND_FLAG,Body_AWAKE_FLAG,Body_AUTO_SLEEP_FLAG,Body_BULLET_FLAG,Body_FIXED_ROTATION_FLAG,Body_ACTIVE_FLAG,Body_TO_I_FLAG",
Body$: function(bd, world) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  t1 = V.Transform$();
  t2 = V.Sweep$();
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t3 = new T.Vector2(t3);
  t3.setFrom$1(bd.linearVelocity);
  t4 = new Float32Array(2);
  t4.$dartCachedLength = t4.length;
  t5 = bd.userData;
  t6 = V.FixtureDef$();
  t7 = V.MassData$();
  t8 = V.Transform$();
  t9 = new Float32Array(2);
  t9.$dartCachedLength = t9.length;
  t10 = new Float32Array(2);
  t10.$dartCachedLength = t10.length;
  t10 = new V.Body(world, 0, null, 0, t5, t3, 0, null, null, null, null, null, 0, null, new T.Vector2(t4), 0, 0, 0, bd.linearDamping, bd.angularDamping, bd.type, null, t1, t2, t6, t7, t8, new T.Vector2(t9), new T.Vector2(t10));
  t10.Body$2(bd, world);
  return t10;
}}

},

BodyDef: {"": "Object;type,angle,userData,position>,linearVelocity,angularVelocity,fixedRotation,isSleeping,bullet,allowSleep,linearDamping,angularDamping,awake,active", static: {
BodyDef$: function() {
  var t1, t2;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  return new V.BodyDef(0, 0, null, new T.Vector2(t1), new T.Vector2(t2), 0, false, null, false, true, 0, 0, true, true);
}}
},

ContactManager: {"": "Object;broadPhase,contactList,contactCount,contactFilter,contactListener,pool",
  _addPair$2: function(fixtureA, fixtureB) {
    var bodyA, bodyB, edge, t1, fA, fB, c, t2;
    bodyA = J.get$body$x(fixtureA);
    bodyB = J.get$body$x(fixtureB);
    if (bodyA == null ? bodyB == null : bodyA === bodyB)
      return;
    edge = bodyB.get$contactList();
    for (; edge != null;) {
      t1 = edge.other;
      if (t1 == null ? bodyA == null : t1 === bodyA) {
        t1 = edge.contact;
        fA = t1.fixtureA;
        fB = t1.fixtureB;
        if ((fA == null ? fixtureA == null : fA === fixtureA) && (fB == null ? fixtureB == null : fB === fixtureB))
          return;
        if ((fA == null ? fixtureB == null : fA === fixtureB) && (fB == null ? fixtureA == null : fB === fixtureA))
          return;
      }
      edge = edge.next;
    }
    if (!bodyB.shouldCollide$1(bodyA))
      return;
    if (!this.contactFilter.shouldCollide$2(fixtureA, fixtureB))
      return;
    c = this.pool.popContact$2(fixtureA, fixtureB);
    fixtureA = c.fixtureA;
    fixtureB = c.fixtureB;
    bodyA = J.get$body$x(fixtureA);
    bodyB = J.get$body$x(fixtureB);
    c.prev = null;
    c.next = this.contactList;
    t1 = this.contactList;
    if (t1 != null)
      t1.prev = c;
    this.contactList = c;
    t1 = c.edge1;
    t1.contact = c;
    t1.other = bodyB;
    t1.prev = null;
    t1.next = bodyA.get$contactList();
    t2 = bodyA.contactList;
    if (t2 != null)
      t2.prev = t1;
    bodyA.contactList = t1;
    t1 = c.edge2;
    t1.contact = c;
    t1.other = bodyA;
    t1.prev = null;
    t1.next = bodyB.get$contactList();
    t2 = bodyB.contactList;
    if (t2 != null)
      t2.prev = t1;
    bodyB.contactList = t1;
    this.contactCount = this.contactCount + 1;
  },
  get$_addPair: function() {
    return new V.BoundClosure$2(this, V.ContactManager.prototype._addPair$2, null, "_addPair$2");
  },
  destroy$1: function(c) {
    var fixtureA, fixtureB, bodyA, bodyB, t1, t2;
    fixtureA = c.fixtureA;
    fixtureB = c.fixtureB;
    bodyA = J.get$body$x(fixtureA);
    bodyB = J.get$body$x(fixtureB);
    t1 = this.contactListener;
    if (t1 != null) {
      t2 = c.flags;
      if (typeof t2 !== "number")
        throw t2.$and();
      t2 = (t2 & 2) === 2;
    } else
      t2 = false;
    if (t2)
      t1.endContact$1(c);
    t1 = c.prev;
    if (t1 != null)
      t1.next = c.next;
    t1 = c.next;
    if (t1 != null)
      t1.prev = c.prev;
    if (c === this.contactList)
      this.contactList = c.next;
    t1 = c.edge1;
    t2 = t1.prev;
    if (t2 != null)
      t2.next = t1.next;
    t2 = t1.next;
    if (t2 != null)
      t2.prev = t1.prev;
    if (t1 === bodyA.get$contactList())
      bodyA.contactList = t1.next;
    t1 = c.edge2;
    t2 = t1.prev;
    if (t2 != null)
      t2.next = t1.next;
    t2 = t1.next;
    if (t2 != null)
      t2.prev = t1.prev;
    if (t1 === bodyB.get$contactList())
      bodyB.contactList = t1.next;
    this.pool.pushContact$1(c);
    this.contactCount = this.contactCount - 1;
  },
  collide$0: function() {
    var c, t1, fixtureA, fixtureB, bodyA, bodyB, t2, c0, proxyIdA, proxyIdB;
    c = this.contactList;
    for (t1 = this.contactFilter; c != null;) {
      fixtureA = c.fixtureA;
      fixtureB = c.fixtureB;
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      if (!bodyA.get$awake() && !bodyB.get$awake()) {
        c = c.next;
        continue;
      }
      t2 = c.flags;
      if (typeof t2 !== "number")
        throw t2.$and();
      if ((t2 & 8) === 8) {
        if (!bodyB.shouldCollide$1(bodyA)) {
          c0 = c.next;
          this.destroy$1(c);
          c = c0;
          continue;
        }
        if (!t1.shouldCollide$2(fixtureA, fixtureB)) {
          c0 = c.next;
          this.destroy$1(c);
          c = c0;
          continue;
        }
        t2 = c.flags;
        if (typeof t2 !== "number")
          throw t2.$and();
        c.flags = (t2 & 4294967287) >>> 0;
      }
      proxyIdA = fixtureA.get$proxy();
      proxyIdB = fixtureB.get$proxy();
      if (!V.AxisAlignedBox_testOverlap(proxyIdA.box, proxyIdB.box)) {
        c0 = c.next;
        this.destroy$1(c);
        c = c0;
        continue;
      }
      c.update$1(this.contactListener);
      c = c.next;
    }
  },
  static: {
ContactManager$: function(argPool) {
  return new V.ContactManager(V.BroadPhase$(), null, 0, new V.ContactFilter(), null, argPool);
}}

},

CircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    V.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    var t1, t2, t3;
    t1 = this.pool.collision;
    t2 = this.fixtureA;
    t2 = t2.get$shape(t2);
    t3 = this.fixtureB;
    t1.collideCircles$5(argManifold, t2, xfA, t3.get$shape(t3), xfB);
  }
},

Contact: {"": "Object;manifold<",
  init$2: function(fixA, fixB) {
    var t1;
    this.flags = 0;
    this.fixtureA = fixA;
    this.fixtureB = fixB;
    this.manifold.pointCount = 0;
    this.prev = null;
    this.next = null;
    t1 = this.edge1;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    t1 = this.edge2;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    this.toiCount = 0;
  },
  update$1: function(listener) {
    var t1, t2, wasTouching, sensorA, t3, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, touching, i, t4, mp2, id2, t5, t6, t7, t8, j, mp1, t9;
    t1 = this._oldManifold;
    t1.setFrom$1(this.manifold);
    t2 = this.flags;
    if (typeof t2 !== "number")
      throw t2.$or();
    this.flags = (t2 | 4) >>> 0;
    t2 = this.flags;
    if (typeof t2 !== "number")
      throw t2.$and();
    wasTouching = (t2 & 2) === 2;
    t2 = this.fixtureA;
    sensorA = t2.get$isSensor();
    t3 = this.fixtureB;
    sensorB = t3.get$isSensor();
    sensor = sensorA === true || sensorB === true;
    bodyA = t2.body;
    bodyB = t3.body;
    xfA = bodyA.originTransform;
    xfB = bodyB.originTransform;
    if (sensor) {
      shapeA = t2.shape;
      shapeB = t3.shape;
      touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
      this.manifold.pointCount = 0;
    } else {
      this.evaluate$3(this.manifold, xfA, xfB);
      touching = this.manifold.pointCount > 0;
      for (t2 = t1.points, t3 = t2.length, i = 0; t4 = this.manifold, i < t4.pointCount; ++i) {
        t4 = t4.points;
        if (i >= t4.length)
          throw H.ioore(t4, i);
        mp2 = t4[i];
        mp2.normalImpulse = 0;
        mp2.tangentImpulse = 0;
        id2 = mp2.id;
        for (t4 = t1.pointCount, t5 = id2.features, t6 = t5.incidentEdge, t7 = t5.incidentVertex, t8 = t5.flip, j = 0; j < t4; ++j) {
          if (j >= t3)
            throw H.ioore(t2, j);
          mp1 = t2[j];
          t9 = mp1.id.features;
          if (t5.referenceEdge === t9.referenceEdge && t6 === t9.incidentEdge && t7 === t9.incidentVertex && t8 === t9.flip) {
            mp2.normalImpulse = mp1.normalImpulse;
            mp2.tangentImpulse = mp1.tangentImpulse;
            break;
          }
        }
      }
      if (touching !== wasTouching) {
        bodyA.set$awake(true);
        bodyB.set$awake(true);
      }
    }
    t1 = this.flags;
    if (touching) {
      if (typeof t1 !== "number")
        throw t1.$or();
      this.flags = (t1 | 2) >>> 0;
    } else {
      if (typeof t1 !== "number")
        throw t1.$and();
      this.flags = (t1 & 4294967293) >>> 0;
    }
    if (listener == null)
      return;
    if (!wasTouching && touching)
      listener.beginContact$1(this);
    if (wasTouching && !touching)
      listener.endContact$1(this);
    if (!sensor && touching)
      listener.toString;
  }
},

ContactConstraint: {"": "Object;points>,localNormal<,localPoint<,normal<,normalMass,K,bodyA@,bodyB@,type*,radius?,friction,restitution,pointCount@,manifold@",
  setFrom$1: function(cp) {
    var t1, i, t2, t3;
    this.pointCount = cp.get$pointCount();
    this.localNormal.setFrom$1(cp.get$localNormal());
    this.localPoint.setFrom$1(cp.get$localPoint());
    this.normal.setFrom$1(cp.get$normal());
    this.normalMass.setFrom$1(cp.get$normalMass());
    this.K.setFrom$1(cp.get$K());
    this.bodyA = cp.get$bodyA();
    this.bodyB = cp.get$bodyB();
    this.type = cp.get$type(cp);
    this.radius = cp.get$radius();
    this.friction = cp.get$friction();
    this.restitution = cp.get$restitution();
    this.manifold = cp.get$manifold();
    for (t1 = this.points, i = 0; C.JSInt_methods.$lt(i, cp.get$pointCount()); ++i) {
      if (i >= t1.length)
        throw H.ioore(t1, i);
      t2 = t1[i];
      t3 = cp.get$points(cp);
      t2.setFrom$1(t3.$index(t3, i));
    }
  },
  toString$0: function(_) {
    return "localNormal: \"" + H.S(this.localNormal) + "\", localPoint: \"" + H.S(this.localPoint) + "\" normal: \"" + H.S(this.normal) + "\", radius: \"" + H.S(this.radius) + "\" friction: \"" + H.S(this.friction) + "\" restitution: \"" + H.S(this.restitution) + "\", pointCount: \"" + this.pointCount + "\"";
  },
  static: {
ContactConstraint$: function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = P.List_List$generate(2, new V.ContactConstraint_closure(), true, V.ContactConstraintPoint);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t4 = new Float32Array(2);
  t4.$dartCachedLength = t4.length;
  t5 = new Float32Array(4);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(4);
  t6.$dartCachedLength = t6.length;
  return new V.ContactConstraint(t1, new T.Vector2(t2), new T.Vector2(t3), new T.Vector2(t4), new T.Matrix2(t5), new T.Matrix2(t6), null, null, null, null, null, null, 0, null);
}}

},

ContactConstraint_closure: {"": "Closure;",
  call$1: function(i) {
    return V.ContactConstraintPoint$();
  },
  $is_args1: true
},

ContactConstraintPoint: {"": "Object;localPoint<,rA<,rB<,normalImpulse@,tangentImpulse@,normalMass<,tangentMass<,velocityBias",
  setFrom$1: function(cp) {
    this.localPoint.setFrom$1(cp.get$localPoint());
    this.rA.setFrom$1(cp.get$rA());
    this.rB.setFrom$1(cp.get$rB());
    this.normalImpulse = cp.get$normalImpulse();
    this.tangentImpulse = cp.get$tangentImpulse();
    this.normalMass = cp.get$normalMass();
    this.tangentMass = cp.get$tangentMass();
    this.velocityBias = cp.get$velocityBias();
  },
  toString$0: function(_) {
    return "normal impulse: " + H.S(this.normalImpulse) + ", tangentImpulse: " + H.S(this.tangentImpulse) + ", normalMass: " + H.S(this.normalMass) + ", tangentMass: " + H.S(this.tangentMass) + ", velocityBias: " + H.S(this.velocityBias) + ", localPoint: " + H.S(this.localPoint) + ", rA: " + H.S(this.rA) + ", rB: " + H.S(this.rB);
  },
  static: {
ContactConstraintPoint$: function() {
  var t1, t2, t3;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  return new V.ContactConstraintPoint(new T.Vector2(t1), new T.Vector2(t2), new T.Vector2(t3), 0, 0, 0, 0, 0);
}}

},

ContactEdge: {"": "Object;other,contact,prev,next"},

ContactRegister: {"": "Object;creator<,primary"},

ContactSolver: {"": "Object;constraints,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA<,rB<",
  init$3: function(contacts, contactCount, impulseRatio) {
    var t1, t2, t3, i, t4, t5, t6, t7, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, t8, friction, restitution, vA, vB, wA, wB, cc, t9, t10, t11, t12, t13, t14, t15, t16, t17, j, t18, cp, ccp, t19, t20, t21, t22, t23, rnA, rnB, rtA, rtB, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
    this.constraintCount = contactCount;
    t1 = this.constraints;
    t2 = t1.length;
    if (typeof contactCount !== "number")
      throw H.iae(contactCount);
    if (t2 < contactCount) {
      t2 = P.List_List(P.max(t2 * 2, this.constraintCount), V.ContactConstraint);
      H.setRuntimeTypeInfo(t2, [V.ContactConstraint]);
      this.constraints = t2;
      t2 = this.constraints;
      t3 = t1.length;
      H.IterableMixinWorkaround_setRangeList(t2, 0, t3, t1, 0);
      for (i = t1.length; t1 = this.constraints, i < t1.length; ++i) {
        t2 = V.ContactConstraint$();
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t1[i] = t2;
      }
    }
    t1 = this.worldManifold;
    t2 = t1.points;
    t3 = this.tangent.storage;
    t4 = this.temp2.storage;
    t5 = this.temp1.storage;
    t6 = t1.normal.storage;
    i = 0;
    while (true) {
      t7 = this.constraintCount;
      if (typeof t7 !== "number")
        throw H.iae(t7);
      if (!(i < t7))
        break;
      if (i >= contacts.length)
        throw H.ioore(contacts, i);
      contact = contacts[i];
      fixtureA = contact.fixtureA;
      fixtureB = contact.fixtureB;
      shapeA = fixtureA.get$shape(fixtureA);
      shapeB = fixtureB.get$shape(fixtureB);
      radiusA = shapeA.radius;
      radiusB = shapeB.radius;
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      manifold = contact.manifold;
      t7 = fixtureA.friction;
      t8 = fixtureB.friction;
      if (typeof t7 !== "number")
        throw t7.$mul();
      if (typeof t8 !== "number")
        throw H.iae(t8);
      friction = Math.sqrt(t7 * t8);
      t7 = fixtureA.restitution;
      t8 = fixtureB.restitution;
      if (typeof t7 !== "number")
        throw t7.$gt();
      if (typeof t8 !== "number")
        throw H.iae(t8);
      if (t7 > t8)
        restitution = t7;
      else
        restitution = t8;
      vA = bodyA._linearVelocity;
      vB = bodyB._linearVelocity;
      wA = bodyA._angularVelocity;
      wB = bodyB._angularVelocity;
      t1.initialize$5(t1, manifold, bodyA.originTransform, radiusA, bodyB.originTransform, radiusB);
      t7 = this.constraints;
      if (i >= t7.length)
        throw H.ioore(t7, i);
      cc = t7[i];
      cc.set$bodyA(bodyA);
      cc.set$bodyB(bodyB);
      cc.set$manifold(manifold);
      t7 = cc.normal;
      t7 = t7.storage;
      t7[0] = t6[0];
      t7[1] = t6[1];
      cc.pointCount = manifold.pointCount;
      cc.friction = friction;
      cc.restitution = restitution;
      t8 = cc.localNormal;
      t9 = manifold.localNormal.storage;
      t8 = t8.storage;
      t8[0] = t9[0];
      t8[1] = t9[1];
      t9 = cc.localPoint;
      t8 = manifold.localPoint.storage;
      t9 = t9.storage;
      t9[0] = t8[0];
      t9[1] = t8[1];
      cc.radius = radiusA + radiusB;
      cc.type = manifold.type;
      for (t8 = manifold.points, t9 = t8.length, t10 = cc.points, t11 = bodyA.sweep.center.storage, t12 = bodyB.sweep.center.storage, t13 = -wA, t14 = -wB, t15 = vB.storage, t16 = vA.storage, t17 = -restitution, j = 0; t18 = cc.pointCount, j < t18; ++j) {
        if (j >= t9)
          throw H.ioore(t8, j);
        cp = t8[j];
        if (j >= t10.length)
          throw H.ioore(t10, j);
        ccp = t10[j];
        ccp.set$normalImpulse(impulseRatio * cp.normalImpulse);
        ccp.set$tangentImpulse(impulseRatio * cp.tangentImpulse);
        t18 = cp.localPoint.storage;
        ccp.get$localPoint().storage[0] = t18[0];
        ccp.get$localPoint().storage[1] = t18[1];
        t18 = ccp.get$rA();
        if (j >= t2.length)
          throw H.ioore(t2, j);
        t18.storage[0] = J.$sub$n(J.get$x$x(t2[j]), t11[0]);
        t18 = ccp.rA;
        if (j >= t2.length)
          throw H.ioore(t2, j);
        t19 = J.get$y$x(t2[j]);
        t20 = t11[1];
        if (typeof t19 !== "number")
          throw t19.$sub();
        t18 = t18.storage;
        t18[1] = t19 - t20;
        t20 = ccp.rB;
        if (j >= t2.length)
          throw H.ioore(t2, j);
        t20 = t20.storage;
        t20[0] = J.$sub$n(J.get$x$x(t2[j]), t12[0]);
        if (j >= t2.length)
          throw H.ioore(t2, j);
        t19 = J.get$y$x(t2[j]);
        t21 = t12[1];
        if (typeof t19 !== "number")
          throw t19.$sub();
        t20[1] = t19 - t21;
        t21 = t18[0];
        t19 = t7[1];
        t22 = t18[1];
        t23 = t7[0];
        rnA = t21 * t19 - t22 * t23;
        rnB = t20[0] * t19 - t20[1] * t23;
        ccp.normalMass = 1 / (bodyA.invMass + bodyB.invMass + bodyA.invInertia * (rnA * rnA) + bodyB.invInertia * (rnB * rnB));
        t3[0] = 1 * t19;
        t3[1] = -1 * t7[0];
        t19 = t18[0];
        t23 = t3[1];
        t22 = t18[1];
        t21 = t3[0];
        rtA = t19 * t23 - t22 * t21;
        rtB = t20[0] * t23 - t20[1] * t21;
        ccp.tangentMass = 1 / (bodyA.invMass + bodyB.invMass + bodyA.invInertia * (rtA * rtA) + bodyB.invInertia * (rtB * rtB));
        ccp.velocityBias = 0;
        t4[0] = t13 * t22;
        t4[1] = wA * t18[0];
        t5[0] = t14 * t20[1] + t15[0] - t16[0] - t4[0];
        t5[1] = wB * t20[0] + t15[1] - t16[1] - t4[1];
        vRel = t7[0] * t5[0] + t7[1] * t5[1];
        if (vRel < -1)
          ccp.velocityBias = t17 * vRel;
      }
      if (t18 === 2) {
        t8 = t10.length;
        if (0 >= t8)
          throw H.ioore(t10, 0);
        ccp1 = t10[0];
        if (1 >= t8)
          throw H.ioore(t10, 1);
        ccp2 = t10[1];
        invMassA = bodyA.invMass;
        invIA = bodyA.invInertia;
        invMassB = bodyB.invMass;
        invIB = bodyB.invInertia;
        t10 = ccp1.get$rA().storage;
        t8 = t10[0];
        t9 = t7[1];
        t10 = t10[1];
        t7 = t7[0];
        rn1A = t8 * t9 - t10 * t7;
        t10 = ccp1.get$rB().storage;
        rn1B = t10[0] * t9 - t10[1] * t7;
        t10 = ccp2.get$rA().storage;
        rn2A = t10[0] * t9 - t10[1] * t7;
        t10 = ccp2.get$rB().storage;
        rn2B = t10[0] * t9 - t10[1] * t7;
        t7 = invMassA + invMassB;
        t10 = invIA * rn1A;
        t9 = invIB * rn1B;
        k11 = t7 + t10 * rn1A + t9 * rn1B;
        k22 = t7 + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
        k12 = t7 + t10 * rn2A + t9 * rn2B;
        if (k11 * k11 < 100 * (k11 * k22 - k12 * k12)) {
          t7 = cc.K.storage;
          t7[3] = k22;
          t7[2] = k12;
          t7[1] = k12;
          t7[0] = k11;
          t7 = cc.normalMass;
          t8 = t7.storage;
          t8[3] = k22;
          t8[2] = k12;
          t8[1] = k12;
          t8[0] = k11;
          t7.invert$0();
        } else
          cc.pointCount = 1;
      }
      ++i;
    }
  },
  warmStart$0: function() {
    var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, t3, j, ccp, t4, t5, t6, Px, Py;
    t1 = this.tangent.storage;
    i = 0;
    while (true) {
      t2 = this.constraintCount;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (!(i < t2))
        break;
      t2 = this.constraints;
      if (i >= t2.length)
        throw H.ioore(t2, i);
      c = t2[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      invMassA = bodyA.invMass;
      invIA = bodyA.invInertia;
      invMassB = bodyB.invMass;
      invIB = bodyB.invInertia;
      t2 = c.get$normal().storage;
      t3 = t2[0];
      t1[0] = 1 * t2[1];
      t1[1] = -1 * t3;
      for (t3 = c.points, j = 0; j < c.pointCount; ++j) {
        if (j >= t3.length)
          throw H.ioore(t3, j);
        ccp = t3[j];
        t4 = ccp.get$normalImpulse();
        t5 = t2[0];
        t6 = ccp.get$tangentImpulse();
        Px = t4 * t5 + t6 * t1[0];
        Py = t4 * t2[1] + t6 * t1[1];
        t6 = bodyA._angularVelocity - invIA * (ccp.get$rA().storage[0] * Py - ccp.rA.storage[1] * Px);
        if (bodyA._type !== 0) {
          if (t6 * t6 > 0)
            bodyA.set$awake(true);
          bodyA._angularVelocity = t6;
        }
        t4 = bodyA._linearVelocity.storage;
        t4[0] = t4[0] - Px * invMassA;
        t4[1] = t4[1] - Py * invMassA;
        t4 = ccp.rB.storage;
        t4 = bodyB._angularVelocity + invIB * (t4[0] * Py - t4[1] * Px);
        if (bodyB._type !== 0) {
          if (t4 * t4 > 0)
            bodyB.set$awake(true);
          bodyB._angularVelocity = t4;
        }
        t4 = bodyB._linearVelocity.storage;
        t4[0] = t4[0] + Px * invMassB;
        t4[1] = t4[1] + Py * invMassB;
      }
      ++i;
    }
  },
  solveVelocityConstraints$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, i, t16, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, t17, t18, t19, j, t20, ccp, a, t21, t22, t23, t24, t25, maxFriction, newImpulse, lambda, Px, Py, a1, cp2, t26, t27, t28, t29, t30, t31, t32, vn1, vn2;
    t1 = this.dv1.storage;
    t2 = this.dv2.storage;
    t3 = this.temp2;
    t4 = t3.storage;
    t5 = this.dv.storage;
    t6 = this.tangent.storage;
    t7 = this.x;
    t8 = t7.storage;
    t9 = this.d;
    t10 = t9.storage;
    t11 = this.P1.storage;
    t12 = this.P2;
    t13 = t12.storage;
    t14 = this.temp1;
    t15 = t14.storage;
    i = 0;
    while (true) {
      t16 = this.constraintCount;
      if (typeof t16 !== "number")
        throw H.iae(t16);
      if (!(i < t16))
        break;
      t16 = this.constraints;
      if (i >= t16.length)
        throw H.ioore(t16, i);
      c = t16[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      wA = bodyA._angularVelocity;
      wB = bodyB._angularVelocity;
      vA = bodyA._linearVelocity;
      vB = bodyB._linearVelocity;
      invMassA = bodyA.invMass;
      invIA = bodyA.invInertia;
      invMassB = bodyB.invMass;
      invIB = bodyB.invInertia;
      t6[0] = 1 * c.get$normal().storage[1];
      t16 = c.normal.storage;
      t6[1] = -1 * t16[0];
      friction = c.friction;
      for (t17 = c.points, t18 = vB.storage, t19 = vA.storage, j = 0; t20 = c.pointCount, j < t20; ++j) {
        if (j >= t17.length)
          throw H.ioore(t17, j);
        ccp = t17[j];
        a = ccp.get$rA();
        t20 = a.storage;
        t5[0] = -wB * ccp.get$rB().storage[1] + t18[0] - t19[0] + wA * t20[1];
        t5[1] = wB * ccp.get$rB().storage[0] + t18[1] - t19[1] - wA * t20[0];
        t20 = t5[0];
        t21 = t6[0];
        t22 = t5[1];
        t23 = t6[1];
        t24 = ccp.get$tangentMass();
        t25 = ccp.normalImpulse;
        if (typeof friction !== "number")
          throw friction.$mul();
        maxFriction = friction * t25;
        newImpulse = P.max(-maxFriction, P.min(ccp.tangentImpulse + t24 * -(t20 * t21 + t22 * t23), maxFriction));
        lambda = newImpulse - ccp.tangentImpulse;
        Px = t6[0] * lambda;
        Py = t6[1] * lambda;
        t19[0] = t19[0] - Px * invMassA;
        t19[1] = t19[1] - Py * invMassA;
        t23 = ccp.rA.storage;
        wA -= invIA * (t23[0] * Py - t23[1] * Px);
        t18[0] = t18[0] + Px * invMassB;
        t18[1] = t18[1] + Py * invMassB;
        t23 = ccp.rB.storage;
        wB += invIB * (t23[0] * Py - t23[1] * Px);
        ccp.tangentImpulse = newImpulse;
      }
      t21 = -wB;
      ccp = t17[0];
      t22 = t17.length;
      if (t20 === 1) {
        if (0 >= t22)
          throw H.ioore(t17, 0);
        a1 = ccp.get$rA();
        t17 = a1.storage;
        t5[0] = t21 * ccp.get$rB().storage[1] + t18[0] - t19[0] + wA * t17[1];
        t5[1] = wB * ccp.get$rB().storage[0] + t18[1] - t19[1] - wA * t17[0];
        t17 = t5[0];
        t21 = t16[0];
        t20 = t5[1];
        t16 = t16[1];
        t22 = ccp.get$normalMass();
        t23 = ccp.velocityBias;
        t24 = ccp.normalImpulse;
        a = t24 + -t22 * (t17 * t21 + t20 * t16 - t23);
        newImpulse = a > 0 ? a : 0;
        lambda = newImpulse - t24;
        Px = t21 * lambda;
        Py = t16 * lambda;
        t19[0] = t19[0] - Px * invMassA;
        t19[1] = t19[1] - Py * invMassA;
        t16 = ccp.rA.storage;
        wA -= invIA * (t16[0] * Py - t16[1] * Px);
        t18[0] = t18[0] + Px * invMassB;
        t18[1] = t18[1] + Py * invMassB;
        t16 = ccp.rB.storage;
        wB += invIB * (t16[0] * Py - t16[1] * Px);
        ccp.normalImpulse = newImpulse;
      } else {
        if (0 >= t22)
          throw H.ioore(t17, 0);
        if (1 >= t22)
          throw H.ioore(t17, 1);
        cp2 = t17[1];
        t17 = ccp.get$normalImpulse();
        t20 = cp2.get$normalImpulse();
        t22 = new Float32Array(2);
        t22.$dartCachedLength = t22.length;
        a = new T.Vector2(t22);
        t22 = a.storage;
        t22[0] = t17;
        t22[1] = t20;
        t20 = ccp.rA.storage;
        t1[0] = t21 * ccp.get$rB().storage[1] + t18[0] - t19[0] + wA * t20[1];
        t17 = ccp.rB.storage;
        t1[1] = wB * t17[0] + t18[1] - t19[1] - wA * t20[0];
        t23 = cp2.rA.storage;
        t2[0] = t21 * cp2.get$rB().storage[1] + t18[0] - t19[0] + wA * t23[1];
        t21 = cp2.rB.storage;
        t2[1] = wB * t21[0] + t18[1] - t19[1] - wA * t23[0];
        t24 = t1[0];
        t25 = t16[0];
        t26 = t1[1];
        t27 = t16[1];
        t28 = t2[0];
        t29 = t2[1];
        t30 = ccp.velocityBias;
        t31 = cp2.velocityBias;
        t32 = new Float32Array(2);
        t32.$dartCachedLength = t32.length;
        t32 = new T.Vector2(t32).storage;
        t32[0] = t24 * t25 + t26 * t27 - t30;
        t32[1] = t28 * t25 + t29 * t27 - t31;
        t31 = c.K.storage;
        t4[0] = t31[0] * t22[0] + t31[2] * t22[1];
        t4[1] = t31[1] * t22[0] + t31[3] * t22[1];
        t32[0] = t32[0] - t4[0];
        t32[1] = t32[1] - t4[1];
        $loop$1: {
          t22 = c.normalMass;
          t8[1] = t32[1];
          t8[0] = t32[0];
          t22.transform$1(t22, t7);
          t8[1] = t8[1] * -1;
          t8[0] = t8[0] * -1;
          if (t8[0] >= 0 && t8[1] >= 0) {
            t10[1] = t8[1];
            t10[0] = t8[0];
            t9.sub$1(a);
            t11[1] = t16[1];
            t11[0] = t16[0];
            t22 = t10[0];
            t11[1] = t11[1] * t22;
            t11[0] = t11[0] * t22;
            t13[1] = t16[1];
            t13[0] = t16[0];
            t16 = t10[1];
            t13[1] = t13[1] * t16;
            t13[0] = t13[0] * t16;
            t15[1] = t11[1];
            t15[0] = t11[0];
            t14.add$1(t14, t12);
            t4[1] = t15[1];
            t4[0] = t15[0];
            t4[1] = t4[1] * invMassA;
            t4[0] = t4[0] * invMassA;
            vA.sub$1(t3);
            t4[1] = t15[1];
            t4[0] = t15[0];
            t4[1] = t4[1] * invMassB;
            t4[0] = t4[0] * invMassB;
            vB.add$1(vB, t3);
            t16 = t20[0];
            t22 = t11[1];
            t20 = t20[1];
            t24 = t11[0];
            t25 = t23[0];
            t26 = t13[1];
            t23 = t23[1];
            t27 = t13[0];
            wA -= invIA * (t16 * t22 - t20 * t24 + (t25 * t26 - t23 * t27));
            wB += invIB * (t17[0] * t22 - t17[1] * t24 + (t21[0] * t26 - t21[1] * t27));
            ccp.normalImpulse = t8[0];
            cp2.normalImpulse = t8[1];
            break $loop$1;
          }
          t8[0] = -ccp.normalMass * t32[0];
          t8[1] = 0;
          t22 = t31[1];
          t24 = t8[0];
          t25 = t32[1];
          if (t24 >= 0 && t22 * t24 + t25 >= 0) {
            t10[1] = t8[1];
            t10[0] = t8[0];
            t9.sub$1(a);
            t11[1] = t16[1];
            t11[0] = t16[0];
            t22 = t10[0];
            t11[1] = t11[1] * t22;
            t11[0] = t11[0] * t22;
            t13[1] = t16[1];
            t13[0] = t16[0];
            t16 = t10[1];
            t13[1] = t13[1] * t16;
            t13[0] = t13[0] * t16;
            t15[1] = t11[1];
            t15[0] = t11[0];
            t14.add$1(t14, t12);
            t4[1] = t15[1];
            t4[0] = t15[0];
            t4[1] = t4[1] * invMassA;
            t4[0] = t4[0] * invMassA;
            vA.sub$1(t3);
            t4[1] = t15[1];
            t4[0] = t15[0];
            t4[1] = t4[1] * invMassB;
            t4[0] = t4[0] * invMassB;
            vB.add$1(vB, t3);
            t16 = t20[0];
            t22 = t11[1];
            t20 = t20[1];
            t24 = t11[0];
            t25 = t23[0];
            t26 = t13[1];
            t23 = t23[1];
            t27 = t13[0];
            wA -= invIA * (t16 * t22 - t20 * t24 + (t25 * t26 - t23 * t27));
            wB += invIB * (t17[0] * t22 - t17[1] * t24 + (t21[0] * t26 - t21[1] * t27));
            ccp.normalImpulse = t8[0];
            cp2.normalImpulse = t8[1];
            break $loop$1;
          }
          t8[0] = 0;
          t8[1] = -cp2.normalMass * t32[1];
          t22 = t31[2];
          t24 = t8[1];
          t25 = t32[0];
          if (t24 >= 0 && t22 * t24 + t25 >= 0) {
            t10[1] = t24;
            t10[0] = t8[0];
            t9.sub$1(a);
            t11[1] = t16[1];
            t11[0] = t16[0];
            t22 = t10[0];
            t11[1] = t11[1] * t22;
            t11[0] = t11[0] * t22;
            t13[1] = t16[1];
            t13[0] = t16[0];
            t16 = t10[1];
            t13[1] = t13[1] * t16;
            t13[0] = t13[0] * t16;
            t15[1] = t11[1];
            t15[0] = t11[0];
            t14.add$1(t14, t12);
            t4[1] = t15[1];
            t4[0] = t15[0];
            t4[1] = t4[1] * invMassA;
            t4[0] = t4[0] * invMassA;
            vA.sub$1(t3);
            t4[1] = t15[1];
            t4[0] = t15[0];
            t4[1] = t4[1] * invMassB;
            t4[0] = t4[0] * invMassB;
            vB.add$1(vB, t3);
            t16 = t20[0];
            t22 = t11[1];
            t20 = t20[1];
            t24 = t11[0];
            t25 = t23[0];
            t26 = t13[1];
            t23 = t23[1];
            t27 = t13[0];
            wA -= invIA * (t16 * t22 - t20 * t24 + (t25 * t26 - t23 * t27));
            wB += invIB * (t17[0] * t22 - t17[1] * t24 + (t21[0] * t26 - t21[1] * t27));
            ccp.normalImpulse = t8[0];
            cp2.normalImpulse = t8[1];
            break $loop$1;
          }
          t8[0] = 0;
          t8[1] = 0;
          vn1 = t32[0];
          vn2 = t32[1];
          if (vn1 >= 0 && vn2 >= 0) {
            t10[1] = t8[1];
            t10[0] = t8[0];
            t9.sub$1(a);
            t11[1] = t16[1];
            t11[0] = t16[0];
            t17 = t10[0];
            t11[1] = t11[1] * t17;
            t11[0] = t11[0] * t17;
            t13[1] = t16[1];
            t13[0] = t16[0];
            t16 = t10[1];
            t13[1] = t13[1] * t16;
            t13[0] = t13[0] * t16;
            t15[1] = t11[1];
            t15[0] = t11[0];
            t14.add$1(t14, t12);
            t4[1] = t15[1];
            t4[0] = t15[0];
            t4[1] = t4[1] * invMassA;
            t4[0] = t4[0] * invMassA;
            vA.sub$1(t3);
            t4[1] = t15[1];
            t4[0] = t15[0];
            t4[1] = t4[1] * invMassB;
            t4[0] = t4[0] * invMassB;
            vB.add$1(vB, t3);
            t16 = t20[0];
            t17 = t11[1];
            t20 = t20[1];
            t22 = t11[0];
            t24 = t23[0];
            t25 = t13[1];
            t23 = t23[1];
            t26 = t13[0];
            wA -= invIA * (t16 * t17 - t20 * t22 + (t24 * t25 - t23 * t26));
            wB += invIB * (t24 * t17 - t23 * t22 + (t21[0] * t25 - t21[1] * t26));
            ccp.normalImpulse = t8[0];
            cp2.normalImpulse = t8[1];
            break $loop$1;
          }
          break $loop$1;
        }
      }
      t19[1] = t19[1];
      t19[0] = t19[0];
      if (bodyA._type !== 0) {
        if (wA * wA > 0)
          bodyA.set$awake(true);
        bodyA._angularVelocity = wA;
      }
      t18[1] = t18[1];
      t18[0] = t18[0];
      if (bodyB._type !== 0) {
        if (wB * wB > 0)
          bodyB.set$awake(true);
        bodyB._angularVelocity = wB;
      }
      ++i;
    }
  },
  storeImpulses$0: function() {
    var i, t1, c, m, t2, t3, j, t4, t5;
    i = 0;
    while (true) {
      t1 = this.constraintCount;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      if (!(i < t1))
        break;
      t1 = this.constraints;
      if (i >= t1.length)
        throw H.ioore(t1, i);
      c = t1[i];
      m = c.get$manifold();
      for (t1 = c.points, t2 = m.points, t3 = t2.length, j = 0; j < c.get$pointCount(); ++j) {
        if (j >= t3)
          throw H.ioore(t2, j);
        t4 = t2[j];
        if (j >= t1.length)
          throw H.ioore(t1, j);
        t5 = t1[j];
        t4.normalImpulse = t5.get$normalImpulse();
        if (j >= t1.length)
          throw H.ioore(t1, j);
        t4.tangentImpulse = t5.get$tangentImpulse();
      }
      ++i;
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, t6, t7, psm, t8, t9, minSeparation, i, t10, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, j, separation, t11, t12, t13, t14, $C, t15, t16, t17, t18, rnA, rnB, $K, impulse;
    t1 = this.P.storage;
    t2 = this.temp1;
    t3 = t2.storage;
    t4 = this.rA;
    t5 = t4.storage;
    t6 = this.rB;
    t7 = t6.storage;
    psm = this.psolver;
    t8 = psm.point.storage;
    t9 = psm.normal.storage;
    minSeparation = 0;
    i = 0;
    while (true) {
      t10 = this.constraintCount;
      if (typeof t10 !== "number")
        throw H.iae(t10);
      if (!(i < t10))
        break;
      t10 = this.constraints;
      if (i >= t10.length)
        throw H.ioore(t10, i);
      c = t10[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      t10 = bodyA.mass;
      invMassA = t10 * bodyA.invMass;
      invIA = t10 * bodyA.invInertia;
      t10 = bodyB.mass;
      invMassB = t10 * bodyB.invMass;
      invIB = t10 * bodyB.invInertia;
      for (t10 = invMassA + invMassB, j = 0; j < c.get$pointCount(); ++j) {
        psm.initialize$2(psm, c, j);
        separation = psm.separation;
        t5[1] = t8[1];
        t5[0] = t8[0];
        t11 = bodyA.sweep;
        t12 = t11.center;
        t4.sub$1(t12);
        t7[1] = t8[1];
        t7[0] = t8[0];
        t13 = bodyB.sweep;
        t14 = t13.center;
        t6.sub$1(t14);
        minSeparation = P.min(minSeparation, separation);
        $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
        t15 = t5[0];
        t16 = t9[1];
        t17 = t5[1];
        t18 = t9[0];
        rnA = t15 * t16 - t17 * t18;
        rnB = t7[0] * t16 - t7[1] * t18;
        $K = t10 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = $K > 0 ? -$C / $K : 0;
        t1[1] = t16;
        t1[0] = t9[0];
        t1[1] = t1[1] * impulse;
        t1[0] = t1[0] * impulse;
        t3[1] = t1[1];
        t3[0] = t1[0];
        t3[1] = t3[1] * invMassA;
        t3[0] = t3[0] * invMassA;
        t12.sub$1(t2);
        t11.angle = t11.angle - invIA * (t5[0] * t1[1] - t5[1] * t1[0]);
        bodyA.synchronizeTransform$0();
        t3[1] = t1[1];
        t3[0] = t1[0];
        t3[1] = t3[1] * invMassB;
        t3[0] = t3[0] * invMassB;
        t14.add$1(t14, t2);
        t13.angle = t13.angle + invIB * (t7[0] * t1[1] - t7[1] * t1[0]);
        bodyB.synchronizeTransform$0();
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  static: {
"": "ContactSolver_INITIAL_NUM_CONSTRAINTS,ContactSolver_K_MAX_CONDITION_NUMBER",
ContactSolver$: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16;
  t1 = P.List_List$generate(256, new V.ContactSolver_closure(), true, V.ContactConstraint);
  t2 = V.WorldManifold$();
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t4 = new Float32Array(2);
  t4.$dartCachedLength = t4.length;
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(2);
  t6.$dartCachedLength = t6.length;
  t7 = new Float32Array(2);
  t7.$dartCachedLength = t7.length;
  t8 = new Float32Array(2);
  t8.$dartCachedLength = t8.length;
  t9 = new Float32Array(2);
  t9.$dartCachedLength = t9.length;
  t10 = new Float32Array(2);
  t10.$dartCachedLength = t10.length;
  t11 = new Float32Array(2);
  t11.$dartCachedLength = t11.length;
  t12 = new Float32Array(2);
  t12.$dartCachedLength = t12.length;
  t13 = new Float32Array(2);
  t13.$dartCachedLength = t13.length;
  t14 = V.PositionSolverManifold$();
  t15 = new Float32Array(2);
  t15.$dartCachedLength = t15.length;
  t16 = new Float32Array(2);
  t16.$dartCachedLength = t16.length;
  return new V.ContactSolver(t1, null, t2, new T.Vector2(t3), new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7), new T.Vector2(t8), new T.Vector2(t9), new T.Vector2(t10), new T.Vector2(t11), new T.Vector2(t12), new T.Vector2(t13), t14, new T.Vector2(t15), new T.Vector2(t16));
}}

},

ContactSolver_closure: {"": "Closure;",
  call$1: function(i) {
    return V.ContactConstraint$();
  },
  $is_args1: true
},

PositionSolverManifold: {"": "Object;normal,point,separation,pointA,pointB,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5;
    switch (cc.get$type(cc)) {
      case 0:
        t1 = cc.get$bodyA();
        t2 = cc.get$localPoint();
        t3 = this.pointA;
        V.Transform_mulToOut(t1.originTransform, t2, t3);
        t2 = cc.get$bodyB();
        t1 = cc.get$points(cc);
        if (0 >= t1.length)
          throw H.ioore(t1, 0);
        t1 = t1[0].get$localPoint();
        t4 = this.pointB;
        V.Transform_mulToOut(t2.originTransform, t1, t4);
        t1 = this.normal;
        if (V.MathBox_distanceSquared(t3, t4) > 1.4208639999999999e-14) {
          t1.setFrom$1(t4).sub$1(t3);
          t1.normalize$0();
        } else {
          t1 = t1.storage;
          t1[0] = 1;
          t1[1] = 0;
        }
        t1 = this.point.setFrom$1(t3);
        t1 = t1.add$1(t1, t4);
        t1.scale$1(t1, 0.5);
        t1 = this.temp;
        t1.setFrom$1(t4).sub$1(t3);
        t1 = t1.dot$1(this.normal);
        t3 = cc.radius;
        if (typeof t3 !== "number")
          throw H.iae(t3);
        this.separation = t1 - t3;
        break;
      case 1:
        t1 = cc.get$bodyA();
        t2 = cc.get$localNormal();
        t3 = this.normal;
        t1.originTransform.rotation.transformed$2(t2, t3);
        t2 = cc.get$bodyA();
        t1 = cc.get$localPoint();
        t4 = this.planePoint;
        V.Transform_mulToOut(t2.originTransform, t1, t4);
        t1 = cc.get$bodyB();
        t2 = cc.get$points(cc);
        if (index < 0 || index >= t2.length)
          throw H.ioore(t2, index);
        t2 = t2[index].get$localPoint();
        t5 = this.clipPoint;
        V.Transform_mulToOut(t1.originTransform, t2, t5);
        t2 = this.temp;
        t2.setFrom$1(t5).sub$1(t4);
        t3 = t2.dot$1(t3);
        t2 = cc.radius;
        if (typeof t2 !== "number")
          throw H.iae(t2);
        this.separation = t3 - t2;
        this.point.setFrom$1(t5);
        break;
      case 2:
        t1 = cc.get$bodyB();
        t2 = cc.get$localNormal();
        t3 = this.normal;
        t1.originTransform.rotation.transformed$2(t2, t3);
        t2 = cc.get$bodyB();
        t1 = cc.get$localPoint();
        t4 = this.planePoint;
        V.Transform_mulToOut(t2.originTransform, t1, t4);
        t1 = cc.get$bodyA();
        t2 = cc.get$points(cc);
        if (index < 0 || index >= t2.length)
          throw H.ioore(t2, index);
        t2 = t2[index].get$localPoint();
        t5 = this.clipPoint;
        V.Transform_mulToOut(t1.originTransform, t2, t5);
        t2 = this.temp;
        t2.setFrom$1(t5).sub$1(t4);
        t2 = t2.dot$1(t3);
        t4 = cc.radius;
        if (typeof t4 !== "number")
          throw H.iae(t4);
        this.separation = t2 - t4;
        this.point.setFrom$1(t5);
        t3.negate$0();
        break;
      default:
    }
  },
  static: {
PositionSolverManifold$: function() {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t4 = new Float32Array(2);
  t4.$dartCachedLength = t4.length;
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(2);
  t6.$dartCachedLength = t6.length;
  t7 = new Float32Array(2);
  t7.$dartCachedLength = t7.length;
  return new V.PositionSolverManifold(new T.Vector2(t1), new T.Vector2(t2), 0, new T.Vector2(t3), new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7));
}}

},

PolygonAndCircleContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    V.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    var t1, t2, t3;
    t1 = this.pool.collision;
    t2 = this.fixtureA;
    t2 = t2.get$shape(t2);
    t3 = this.fixtureB;
    t1.collidePolygonAndCircle$5(argManifold, t2, xfA, t3.get$shape(t3), xfB);
  }
},

PolygonContact: {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    V.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    var t1, t2, t3;
    t1 = this.pool.collision;
    t2 = this.fixtureA;
    t2 = t2.get$shape(t2);
    t3 = this.fixtureB;
    t1.collidePolygons$5(argManifold, t2, xfA, t3.get$shape(t3), xfB);
  }
},

TimeOfImpactConstraint: {"": "Object;localPoints<,localNormal<,localPoint<,type*,radius?,pointCount@,bodyA@,bodyB@",
  setFrom$1: function(argOther) {
    var t1, i, t2, t3;
    for (t1 = this.localPoints, i = 0; i < t1.length; ++i) {
      t2 = t1[i];
      t3 = argOther.get$localPoints();
      t2.setFrom$1(t3.$index(t3, i));
    }
    this.localNormal.setFrom$1(argOther.get$localNormal());
    this.localPoint.setFrom$1(argOther.get$localPoint());
    this.type = argOther.get$type(argOther);
    this.radius = argOther.get$radius();
    this.pointCount = argOther.get$pointCount();
    this.bodyA = argOther.get$bodyA();
    this.bodyB = argOther.get$bodyB();
  },
  static: {
TimeOfImpactConstraint$: function() {
  var t1, t2, t3;
  t1 = P.List_List$generate(2, new V.TimeOfImpactConstraint_closure(), true, T.Vector2);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  return new V.TimeOfImpactConstraint(t1, new T.Vector2(t2), new T.Vector2(t3), 0, 0, 0, null, null);
}}

},

TimeOfImpactConstraint_closure: {"": "Closure;",
  call$1: function(i) {
    var t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    return new T.Vector2(t1);
  },
  $is_args1: true
},

TimeOfImpactSolver: {"": "Object;constraints,count,toiBody,psm,rA<,rB<,P,temp",
  initialize$3: function(_, contacts, argCount, argToiBody) {
    var t1, t2, t3, i, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, j, cp, t4, t5;
    this.count = argCount;
    this.toiBody = argToiBody;
    t1 = this.count;
    t2 = this.constraints;
    t3 = t2.length;
    if (t1 >= t3) {
      t1 = P.List_List(P.max(t1, t3 * 2), V.TimeOfImpactConstraint);
      H.setRuntimeTypeInfo(t1, [V.TimeOfImpactConstraint]);
      this.constraints = t1;
      t1 = this.constraints;
      t3 = t2.length;
      H.IterableMixinWorkaround_setRangeList(t1, 0, t3, t2, 0);
      for (i = t2.length; t1 = this.constraints, i < t1.length; ++i) {
        t2 = V.TimeOfImpactConstraint$();
        if (i >= t1.length)
          throw H.ioore(t1, i);
        t1[i] = t2;
      }
    }
    for (t1 = contacts.length, i = 0; i < this.count; ++i) {
      if (i >= t1)
        throw H.ioore(contacts, i);
      contact = contacts[i];
      fixtureA = contact.fixtureA;
      fixtureB = contact.fixtureB;
      shapeA = fixtureA.get$shape(fixtureA);
      shapeB = fixtureB.get$shape(fixtureB);
      radiusA = shapeA.radius;
      radiusB = shapeB.radius;
      bodyA = fixtureA.body;
      bodyB = fixtureB.body;
      manifold = contact.manifold;
      t2 = this.constraints;
      if (i >= t2.length)
        throw H.ioore(t2, i);
      constraint = t2[i];
      constraint.set$bodyA(bodyA);
      constraint.set$bodyB(bodyB);
      t2 = constraint.get$localNormal().storage;
      t3 = manifold.localNormal.storage;
      t2[1] = t3[1];
      t2[0] = t3[0];
      t3 = constraint.get$localPoint().storage;
      t2 = manifold.localPoint.storage;
      t3[1] = t2[1];
      t3[0] = t2[0];
      constraint.set$type(constraint, manifold.type);
      constraint.set$pointCount(manifold.pointCount);
      constraint.set$radius(radiusA + radiusB);
      for (t2 = manifold.points, t3 = t2.length, j = 0; j < constraint.get$pointCount(); ++j) {
        if (j >= t3)
          throw H.ioore(t2, j);
        cp = t2[j];
        t4 = constraint.get$localPoints();
        t5 = cp.localPoint;
        if (j >= t4.length)
          throw H.ioore(t4, j);
        t4[j] = t5;
      }
    }
  },
  solve$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, minSeparation, i, t11, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, separation, t12, t13, t14, t15, $C, t16, t17, t18, t19, rnA, rnB, $K, impulse;
    for (t1 = this.P.storage, t2 = this.temp, t3 = t2.storage, t4 = this.rA, t5 = t4.storage, t6 = this.rB, t7 = t6.storage, t8 = this.psm, t9 = t8.point.storage, t10 = t8.normal.storage, minSeparation = 0, i = 0; i < this.count; ++i) {
      t11 = this.constraints;
      if (i >= t11.length)
        throw H.ioore(t11, i);
      c = t11[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      massA = bodyA.mass;
      massB = bodyB.mass;
      t11 = this.toiBody;
      if (bodyA == null ? t11 == null : bodyA === t11)
        massB = 0;
      else
        massA = 0;
      invMassA = massA * bodyA.invMass;
      invIA = massA * bodyA.invInertia;
      invMassB = massB * bodyB.invMass;
      invIB = massB * bodyB.invInertia;
      for (t11 = invMassA + invMassB, j = 0; j < c.get$pointCount(); ++j) {
        t8.initialize$2(t8, c, j);
        separation = t8.separation;
        t5[1] = t9[1];
        t5[0] = t9[0];
        t12 = bodyA.sweep;
        t13 = t12.center;
        t4.sub$1(t13);
        t7[1] = t9[1];
        t7[0] = t9[0];
        t14 = bodyB.sweep;
        t15 = t14.center;
        t6.sub$1(t15);
        minSeparation = P.min(minSeparation, separation);
        $C = P.max(-0.2, P.min(baumgarte * (separation + 0.005), 0));
        t16 = t5[0];
        t17 = t10[1];
        t18 = t5[1];
        t19 = t10[0];
        rnA = t16 * t17 - t18 * t19;
        rnB = t7[0] * t17 - t7[1] * t19;
        $K = t11 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = $K > 0 ? -$C / $K : 0;
        t1[1] = t17;
        t1[0] = t10[0];
        t1[1] = t1[1] * impulse;
        t1[0] = t1[0] * impulse;
        t3[1] = t1[1];
        t3[0] = t1[0];
        t3[1] = t3[1] * invMassA;
        t3[0] = t3[0] * invMassA;
        t13.sub$1(t2);
        t12.angle = t12.angle - invIA * (t5[0] * t1[1] - t5[1] * t1[0]);
        bodyA.synchronizeTransform$0();
        t3[1] = t1[1];
        t3[0] = t1[0];
        t3[1] = t3[1] * invMassB;
        t3[0] = t3[0] * invMassB;
        t15.add$1(t15, t2);
        t14.angle = t14.angle + invIB * (t7[0] * t1[1] - t7[1] * t1[0]);
        bodyB.synchronizeTransform$0();
      }
    }
    return minSeparation >= -0.0075;
  },
  static: {
TimeOfImpactSolver$: function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = P.List_List$generate(4, new V.TimeOfImpactSolver_closure(), true, V.TimeOfImpactConstraint);
  t2 = V.TimeOfImpactSolverManifold$();
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t4 = new Float32Array(2);
  t4.$dartCachedLength = t4.length;
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(2);
  t6.$dartCachedLength = t6.length;
  return new V.TimeOfImpactSolver(t1, 0, null, t2, new T.Vector2(t3), new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6));
}}

},

TimeOfImpactSolver_closure: {"": "Closure;",
  call$1: function(i) {
    return V.TimeOfImpactConstraint$();
  },
  $is_args1: true
},

TimeOfImpactSolverManifold: {"": "Object;normal,point,separation,pointA,pointB,temp,planePoint,clipPoint",
  initialize$2: function(_, cc, index) {
    var t1, t2, t3, t4, t5;
    switch (cc.get$type(cc)) {
      case 0:
        t1 = this.pointA;
        t1.setFrom$1(cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()));
        t2 = this.pointB;
        t3 = cc.get$bodyB();
        t4 = cc.get$localPoints();
        if (0 >= t4.length)
          throw H.ioore(t4, 0);
        t2.setFrom$1(t3.getWorldPoint$1(t4[0]));
        t3 = this.normal;
        if (V.MathBox_distanceSquared(t1, t2) > 1.4208639999999999e-14) {
          t3.setFrom$1(t2).sub$1(t1);
          t3.normalize$0();
        } else {
          t3 = t3.storage;
          t3[0] = 1;
          t3[1] = 0;
        }
        t3 = this.point.setFrom$1(t1);
        t3 = t3.add$1(t3, t2);
        t3.scale$1(t3, 0.5);
        t3 = this.temp;
        t3.setFrom$1(t2).sub$1(t1);
        this.separation = t3.dot$1(this.normal) - cc.radius;
        break;
      case 1:
        t1 = this.normal;
        t1.setFrom$1(cc.get$bodyA().getWorldVector2$1(cc.get$localNormal()));
        t2 = this.planePoint;
        t2.setFrom$1(cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()));
        t3 = this.clipPoint;
        t4 = cc.get$bodyB();
        t5 = cc.get$localPoints();
        if (index < 0 || index >= t5.length)
          throw H.ioore(t5, index);
        t3.setFrom$1(t4.getWorldPoint$1(t5[index]));
        t5 = this.temp;
        t5.setFrom$1(t3).sub$1(t2);
        this.separation = t5.dot$1(t1) - cc.radius;
        this.point.setFrom$1(t3);
        break;
      case 2:
        t1 = this.normal;
        t1.setFrom$1(cc.get$bodyB().getWorldVector2$1(cc.get$localNormal()));
        t2 = this.planePoint;
        t2.setFrom$1(cc.get$bodyB().getWorldPoint$1(cc.get$localPoint()));
        t3 = this.clipPoint;
        t4 = cc.get$bodyA();
        t5 = cc.get$localPoints();
        if (index < 0 || index >= t5.length)
          throw H.ioore(t5, index);
        t3.setFrom$1(t4.getWorldPoint$1(t5[index]));
        t5 = this.temp;
        t5.setFrom$1(t3).sub$1(t2);
        this.separation = t5.dot$1(t1) - cc.radius;
        this.point.setFrom$1(t3);
        t1.negate$0();
        break;
      default:
    }
  },
  static: {
TimeOfImpactSolverManifold$: function() {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t4 = new Float32Array(2);
  t4.$dartCachedLength = t4.length;
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(2);
  t6.$dartCachedLength = t6.length;
  t7 = new Float32Array(2);
  t7.$dartCachedLength = t7.length;
  return new V.TimeOfImpactSolverManifold(new T.Vector2(t1), new T.Vector2(t2), 0, new T.Vector2(t3), new T.Vector2(t4), new T.Vector2(t5), new T.Vector2(t6), new T.Vector2(t7));
}}

},

Filter: {"": "Object;categoryBits<,maskBits,groupIndex",
  setFrom$1: function(other) {
    this.categoryBits = other.get$categoryBits();
    this.maskBits = other.maskBits;
    this.groupIndex = other.groupIndex;
  }
},

Fixture: {"": "Object;box,density,next,body>,shape>,friction,restitution,proxy<,filter<,isSensor<,userData,_poolOne,_poolTwo",
  create$2: function(b, def) {
    var t1;
    this.userData = def.userData;
    this.friction = def.friction;
    this.restitution = def.restitution;
    this.body = b;
    this.next = null;
    this.filter.setFrom$1(def.filter);
    this.isSensor = def.isSensor;
    t1 = def.shape;
    t1.toString;
    this.shape = V.PolygonShape$copy(t1);
    this.density = def.density;
  },
  createProxy$2: function(broadPhase, xf) {
    var t1 = this.box;
    this.shape.computeAxisAlignedBox$2(t1, xf);
    this.proxy = broadPhase.createProxy$2(t1, this);
  },
  synchronize$3: function(broadPhase, transformOne, transformTwo) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    if (this.proxy == null)
      return;
    t1 = this._poolOne;
    this.shape.computeAxisAlignedBox$2(t1, transformOne);
    t2 = this._poolTwo;
    this.shape.computeAxisAlignedBox$2(t2, transformTwo);
    t3 = this.box;
    t4 = t3.lowerBound;
    t5 = t1.lowerBound;
    t6 = t5.storage;
    t7 = t6[0];
    t8 = t2.lowerBound.storage;
    t9 = t8[0];
    t7 = t7 < t9 ? t7 : t9;
    t4 = t4.storage;
    t4[0] = t7;
    t7 = t6[1];
    t8 = t8[1];
    t4[1] = t7 < t8 ? t7 : t8;
    t4 = t3.upperBound;
    t1 = t1.upperBound.storage;
    t7 = t1[0];
    t2 = t2.upperBound.storage;
    t8 = t2[0];
    t7 = t7 > t8 ? t7 : t8;
    t4 = t4.storage;
    t4[0] = t7;
    t1 = t1[1];
    t2 = t2[1];
    t4[1] = t1 > t2 ? t1 : t2;
    t1 = transformTwo.position.storage;
    t2 = transformOne.position.storage;
    t6[0] = t1[0] - t2[0];
    t6[1] = t1[1] - t2[1];
    t2 = this.proxy;
    if (broadPhase._tree.moveProxy$3(t2, t3, t5))
      broadPhase.moveBuffer.push(t2);
  },
  get$type: function(_) {
    return this.shape.type;
  },
  static: {
Fixture$: function() {
  return new V.Fixture(V.AxisAlignedBox$(null, null), null, null, null, null, null, null, null, new V.Filter(0, 0, 0), null, null, V.AxisAlignedBox$(null, null), V.AxisAlignedBox$(null, null));
}}

},

FixtureDef: {"": "Object;shape,userData,friction,restitution,density,isSensor,filter",
  FixtureDef$0: function() {
    var t1 = this.filter;
    t1.categoryBits = 1;
    t1.maskBits = 65535;
    t1.groupIndex = 0;
  },
  static: {
FixtureDef$: function() {
  var t1 = new V.FixtureDef(null, null, 0.2, 0, 0, false, new V.Filter(0, 0, 0));
  t1.FixtureDef$0();
  return t1;
}}

},

Island: {"": "Object;listener,bodies,contacts,joints,positions,velocities,bodyCount,jointCount,contactCount,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
  init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
    var t1, t2, old, t3, i;
    this.bodyCapacity = argBodyCapacity;
    this.contactCapacity = argContactCapacity;
    this.jointCapacity = argJointCapacity;
    this.bodyCount = 0;
    this.contactCount = 0;
    this.listener = argListener;
    t1 = this.bodies;
    if (t1 != null) {
      t2 = this.bodyCapacity;
      t1 = t1.length;
      if (typeof t2 !== "number")
        throw t2.$gt();
      t1 = t2 > t1;
    } else
      t1 = true;
    if (t1) {
      t1 = P.List_List(this.bodyCapacity, V.Body);
      H.setRuntimeTypeInfo(t1, [V.Body]);
      this.bodies = t1;
    }
    t1 = this.contacts;
    if (t1 != null) {
      t2 = this.contactCapacity;
      t1 = t1.length;
      if (typeof t2 !== "number")
        throw t2.$gt();
      t1 = t2 > t1;
    } else
      t1 = true;
    if (t1) {
      t1 = P.List_List(this.contactCapacity, V.Contact);
      H.setRuntimeTypeInfo(t1, [V.Contact]);
      this.contacts = t1;
    }
    t1 = this.joints;
    if (t1 != null) {
      t2 = this.jointCapacity;
      t1 = t1.length;
      if (typeof t2 !== "number")
        throw t2.$gt();
      t1 = t2 > t1;
    } else
      t1 = true;
    if (t1) {
      t1 = P.List_List(this.jointCapacity, V.Joint);
      H.setRuntimeTypeInfo(t1, [V.Joint]);
      this.joints = t1;
    }
    old = this.velocities;
    t1 = old == null;
    if (!t1) {
      t2 = this.bodyCapacity;
      t3 = old.length;
      if (typeof t2 !== "number")
        throw t2.$gt();
      t3 = t2 > t3;
      t2 = t3;
    } else
      t2 = true;
    if (t2) {
      if (t1) {
        old = P.List_List(0, V.Velocity);
        H.setRuntimeTypeInfo(old, [V.Velocity]);
      }
      t1 = P.List_List(this.bodyCapacity, V.Velocity);
      H.setRuntimeTypeInfo(t1, [V.Velocity]);
      this.velocities = t1;
      t1 = this.velocities;
      i = old.length;
      t1.toString;
      if (typeof t1 !== "object" || t1 === null || !!t1.immutable$list)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
      for (; t1 = this.velocities, i < t1.length; ++i) {
        t2 = new V.Velocity(null, null);
        t3 = new Float32Array(2);
        t3.$dartCachedLength = t3.length;
        t2.v = new T.Vector2(t3);
        t2.a = 0;
        t1[i] = t2;
      }
    }
    old = this.positions;
    t1 = old == null;
    if (!t1) {
      t2 = this.bodyCapacity;
      t3 = old.length;
      if (typeof t2 !== "number")
        throw t2.$gt();
      t3 = t2 > t3;
      t2 = t3;
    } else
      t2 = true;
    if (t2) {
      if (t1) {
        old = P.List_List(0, V.Position);
        H.setRuntimeTypeInfo(old, [V.Position]);
      }
      t1 = P.List_List(this.bodyCapacity, V.Position);
      H.setRuntimeTypeInfo(t1, [V.Position]);
      this.positions = t1;
      t1 = this.positions;
      i = old.length;
      t1.toString;
      if (typeof t1 !== "object" || t1 === null || !!t1.immutable$list)
        H.throwExpression(P.UnsupportedError$("set range"));
      H.IterableMixinWorkaround_setRangeList(t1, 0, i, old, 0);
      for (; t1 = this.positions, i < t1.length; ++i) {
        t2 = new V.Position(null, null);
        t3 = new Float32Array(2);
        t3.$dartCachedLength = t3.length;
        t2.x = new T.Vector2(t3);
        t2.a = 0;
        t1[i] = t2;
      }
    }
  },
  solve$3: function(step, gravity, allowSleep) {
    var t1, i, t2, b, t3, t4, t5, t6, t7, t8, velocityDelta, newAngularVelocity, a, a1, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, temp, j, ratio, rotation, t9, contactsOkay, jointsOkay, minSleepTime;
    t1 = gravity.storage;
    i = 0;
    while (true) {
      t2 = this.bodyCount;
      if (typeof t2 !== "number")
        throw H.iae(t2);
      if (!(i < t2))
        break;
      c$0: {
        t2 = this.bodies;
        if (i >= t2.length)
          throw H.ioore(t2, i);
        b = t2[i];
        if (b._type !== 2)
          break c$0;
        t2 = b._force.storage;
        t3 = t2[0];
        t4 = b.invMass;
        t5 = t1[0];
        t6 = step.dt;
        t2 = t2[1];
        t7 = t1[1];
        t8 = new Float32Array(2);
        t8.$dartCachedLength = t8.length;
        velocityDelta = new T.Vector2(t8);
        t8 = velocityDelta.storage;
        t8[0] = (t3 * t4 + t5) * t6;
        t8[1] = (t2 * t4 + t7) * t6;
        t6 = b._linearVelocity;
        t6.add$1(t6, velocityDelta);
        newAngularVelocity = b._angularVelocity + step.dt * b.invInertia * b._torque;
        if (b._type !== 0) {
          if (newAngularVelocity * newAngularVelocity > 0)
            b.set$awake(true);
          b._angularVelocity = newAngularVelocity;
        }
        t2 = step.dt;
        a = 1 - t2 * b.linearDamping;
        t3 = a < 1;
        if (0 > (t3 ? a : 1))
          a1 = 0;
        else
          a1 = t3 ? a : 1;
        t3 = t6.storage;
        t3[1] = t3[1] * a1;
        t3[0] = t3[0] * a1;
        a2 = 1 - t2 * b.angularDamping;
        b1 = a2 < 1 ? a2 : 1;
        t2 = b._angularVelocity;
        t2 *= 0 > b1 ? 0 : b1;
        if (b._type !== 0) {
          if (t2 * t2 > 0)
            b.set$awake(true);
          b._angularVelocity = t2;
        }
      }
      ++i;
    }
    t1 = this.contactCount;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t2 = this.contacts;
    i1 = -1;
    i2 = 0;
    for (; i2 < t1; ++i2) {
      t3 = t2.length;
      if (i2 >= t3)
        throw H.ioore(t2, i2);
      t4 = t2[i2];
      fixtureA = t4.fixtureA;
      fixtureB = t4.fixtureB;
      bodyA = J.get$body$x(fixtureA);
      bodyB = J.get$body$x(fixtureB);
      if (bodyA.get$type(bodyA) !== 0 && bodyB.get$type(bodyB) !== 0) {
        ++i1;
        if (i1 >= t3)
          throw H.ioore(t2, i1);
        temp = t2[i1];
        t2[i1] = t4;
        t2[i2] = temp;
      }
    }
    t3 = this._contactSolver;
    t3.init$3(t2, t1, step.dtRatio);
    t3.warmStart$0();
    t1 = this.jointCount;
    if (typeof t1 !== "number")
      throw H.iae(t1);
    t2 = this.joints;
    i = 0;
    for (; i < t1; ++i) {
      if (i >= t2.length)
        throw H.ioore(t2, i);
      t2[i].initVelocityConstraints$1(step);
    }
    for (i = 0; i < step.velocityIterations; ++i) {
      t1 = this.jointCount;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t2 = this.joints;
      j = 0;
      for (; j < t1; ++j) {
        if (j >= t2.length)
          throw H.ioore(t2, j);
        t2[j].solveVelocityConstraints$1(step);
      }
      t3.solveVelocityConstraints$0();
    }
    t3.storeImpulses$0();
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    temp = new T.Vector2(t1);
    t1 = temp.storage;
    t2 = this._translation;
    t4 = t2.storage;
    i = 0;
    while (true) {
      t5 = this.bodyCount;
      if (typeof t5 !== "number")
        throw H.iae(t5);
      if (!(i < t5))
        break;
      c$0: {
        t5 = this.bodies;
        if (i >= t5.length)
          throw H.ioore(t5, i);
        b = t5[i];
        if (b._type === 0)
          break c$0;
        t5 = b._linearVelocity.storage;
        t4[1] = t5[1];
        t4[0] = t5[0];
        t6 = step.dt;
        t4[1] = t4[1] * t6;
        t4[0] = t4[0] * t6;
        if (t2.dot$1(t2) > 4) {
          ratio = 2 / t2.get$length(t2);
          t5[1] = t5[1] * ratio;
          t5[0] = t5[0] * ratio;
        }
        rotation = step.dt * b._angularVelocity;
        if (rotation * rotation > 2.4674011002723395) {
          t6 = Math.abs(rotation);
          t6 = b._angularVelocity * (1.5707963267948966 / t6);
          if (b._type !== 0) {
            if (t6 * t6 > 0)
              b.set$awake(true);
            b._angularVelocity = t6;
          }
        }
        t6 = b.sweep;
        t7 = t6.center;
        t8 = t6.centerZero.storage;
        t9 = t7.storage;
        t8[1] = t9[1];
        t8[0] = t9[0];
        t6.angleZero = t6.angle;
        t1[1] = t5[1];
        t1[0] = t5[0];
        t5 = step.dt;
        t1[1] = t1[1] * t5;
        t1[0] = t1[0] * t5;
        t7.add$1(t7, temp);
        t6.angle = t6.angle + step.dt * b._angularVelocity;
        b.synchronizeTransform$0();
      }
      ++i;
    }
    for (i = 0; i < step.positionIterations; ++i) {
      contactsOkay = t3.solvePositionConstraints$1(0.2);
      t1 = this.jointCount;
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t2 = this.joints;
      jointsOkay = true;
      j = 0;
      for (; j < t1; ++j, jointsOkay = false) {
        if (j >= t2.length)
          throw H.ioore(t2, j);
        t2[j].solvePositionConstraints$1(0.2);
        if (jointsOkay)
          ;
      }
      if (contactsOkay && jointsOkay)
        break;
    }
    this.report$1(t3.constraints);
    if (allowSleep) {
      minSleepTime = 99999999999999;
      i = 0;
      while (true) {
        t1 = this.bodyCount;
        if (typeof t1 !== "number")
          throw H.iae(t1);
        if (!(i < t1))
          break;
        c$0: {
          t1 = this.bodies;
          if (i >= t1.length)
            throw H.ioore(t1, i);
          b = t1[i];
          if (b._type === 0)
            break c$0;
          t1 = b.flags;
          if (typeof t1 !== "number")
            throw t1.$and();
          if ((t1 & 4) === 0) {
            b.sleepTime = 0;
            minSleepTime = 0;
          }
          t1 = b.flags;
          if (typeof t1 !== "number")
            throw t1.$and();
          if ((t1 & 4) !== 0) {
            t1 = b._angularVelocity;
            if (!(t1 * t1 > 0.0012184696791468343)) {
              t1 = b._linearVelocity;
              t1 = t1.dot$1(t1) > 0.0001;
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1) {
            b.sleepTime = 0;
            minSleepTime = 0;
          } else {
            b.sleepTime = b.sleepTime + step.dt;
            minSleepTime = P.min(minSleepTime, b.sleepTime);
          }
        }
        ++i;
      }
      if (minSleepTime >= 0.5) {
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            throw H.iae(t1);
          if (!(i < t1))
            break;
          t1 = this.bodies;
          if (i >= t1.length)
            throw H.ioore(t1, i);
          t1[i].set$awake(false);
          ++i;
        }
      }
    }
  },
  report$1: function(constraints) {
    var t1, t2, t3, t4, t5, t6, t7, t8, i, cc, j, t9;
    t1 = this.listener;
    if (t1 == null)
      return;
    t2 = this.contactCount;
    if (typeof t2 !== "number")
      throw H.iae(t2);
    t3 = this.impulse;
    t4 = t3.normalImpulses;
    t5 = t4.length;
    t3 = t3.tangentImpulses;
    t6 = t3.length;
    t7 = this.contacts;
    t8 = constraints.length;
    i = 0;
    for (; i < t2; ++i) {
      if (i >= t7.length)
        throw H.ioore(t7, i);
      if (i >= t8)
        throw H.ioore(constraints, i);
      cc = constraints[i];
      for (j = 0; j < cc.get$pointCount(); ++j) {
        t9 = cc.get$points(cc);
        if (j >= t9.length)
          throw H.ioore(t9, j);
        t9 = t9[j].get$normalImpulse();
        if (j >= t5)
          throw H.ioore(t4, j);
        t4[j] = t9;
        t9 = cc.get$points(cc);
        if (j >= t9.length)
          throw H.ioore(t9, j);
        t9 = t9[j].get$tangentImpulse();
        if (j >= t6)
          throw H.ioore(t3, j);
        t3[j] = t9;
      }
      t1.toString;
    }
  },
  static: {
Island$: function() {
  var t1, t2;
  t1 = V.ContactSolver$();
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  return new V.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, t1, new T.Vector2(t2), V.ContactImpulse$());
}}

},

Position: {"": "Object;x*,a"},

Velocity: {"": "Object;v,a"},

Joint: {"": "Object;"},

TimeStep: {"": "Object;dt,inv_dt,dtRatio,velocityIterations,positionIterations,warmStarting", static: {
TimeStep$: function() {
  return new V.TimeStep(0, 0, 0, 0, 0, true);
}}
},

World: {"": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
  _addType$3: function(creatorStack, type1, type2) {
    var register, t1, t2, t3, register2;
    register = new V.ContactRegister(null, false);
    register.creator = creatorStack;
    register.primary = true;
    t1 = this._contactStacks;
    t2 = t1.length;
    if (type1 < 0 || type1 >= t2)
      throw H.ioore(t1, type1);
    t3 = t1[type1];
    if (type2 < 0 || type2 >= t3.length)
      throw H.ioore(t3, type2);
    t3[type2] = register;
    if (type1 !== type2) {
      register2 = new V.ContactRegister(null, false);
      register2.creator = creatorStack;
      register2.primary = false;
      if (type2 >= t2)
        throw H.ioore(t1, type2);
      t1 = t1[type2];
      if (type1 >= t1.length)
        throw H.ioore(t1, type1);
      t1[type1] = register2;
    }
  },
  _initializeRegisters$0: function() {
    var t1 = this._pool;
    this._addType$3(t1.getCircleContactStack$0(), 0, 0);
    this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
    this._addType$3(t1.getPolyContactStack$0(), 1, 1);
  },
  popContact$2: function(fixtureA, fixtureB) {
    var type1, type2, t1, reg, creator, c;
    type1 = fixtureA.get$type(fixtureA);
    type2 = fixtureB.get$type(fixtureB);
    t1 = this._contactStacks;
    if (type1 < 0 || type1 >= t1.length)
      throw H.ioore(t1, type1);
    t1 = t1[type1];
    if (type2 < 0 || type2 >= t1.length)
      throw H.ioore(t1, type2);
    reg = t1[type2];
    creator = reg.get$creator();
    if (creator != null) {
      if (creator._head === creator._tail)
        creator = this._getFreshContactStack$2(type1, type2);
      if (reg.primary) {
        c = creator.removeFirst$0();
        c.init$2(fixtureA, fixtureB);
        return c;
      } else {
        c = creator.removeFirst$0();
        c.init$2(fixtureB, fixtureA);
        return c;
      }
    } else
      return;
  },
  _getFreshContactStack$2: function(type1, type2) {
    var t1, t2;
    if (type1 === 0 && type2 === 0)
      return this._pool.getCircleContactStack$0();
    else {
      t1 = type1 === 1 && type2 === 1;
      t2 = this._pool;
      if (t1)
        return t2.getPolyContactStack$0();
      else
        return t2.getPolyCircleContactStack$0();
    }
  },
  pushContact$1: function(contact) {
    var t1, type1, type2;
    if (contact.manifold.pointCount > 0) {
      J.get$body$x(contact.fixtureA).set$awake(true);
      J.get$body$x(contact.fixtureB).set$awake(true);
    }
    t1 = contact.fixtureA;
    type1 = t1.get$type(t1);
    t1 = contact.fixtureB;
    type2 = t1.get$type(t1);
    t1 = this._contactStacks;
    if (type1 < 0 || type1 >= t1.length)
      throw H.ioore(t1, type1);
    t1 = t1[type1];
    if (type2 < 0 || type2 >= t1.length)
      throw H.ioore(t1, type2);
    t1[type2].get$creator().addFirst$1(contact);
  },
  createBody$1: function(def) {
    var b, t1;
    if ((this._flags & 2) === 2)
      return;
    b = V.Body$(def, this);
    b.prev = null;
    b.next = this._bodyList;
    t1 = this._bodyList;
    if (t1 != null)
      t1.prev = b;
    this._bodyList = b;
    this._bodyCount = this._bodyCount + 1;
    return b;
  },
  step$3: function(_, dt, velocityIterations, positionIterations) {
    var t1;
    if ((this._flags & 1) === 1) {
      t1 = this._contactManager;
      t1.broadPhase.updatePairs$1(t1.get$_addPair());
      this._flags = (this._flags & 4294967294) >>> 0;
    }
    this._flags = (this._flags | 2) >>> 0;
    t1 = this.timestep;
    t1.dt = dt;
    t1.velocityIterations = velocityIterations;
    t1.positionIterations = positionIterations;
    if (dt > 0)
      t1.inv_dt = 1 / dt;
    else
      t1.inv_dt = 0;
    t1.dtRatio = this._inverseTimestep * dt;
    t1.warmStarting = this._warmStarting;
    this._contactManager.collide$0();
    if (t1.dt > 0) {
      this.solve$1(t1);
      if (this._continuousPhysics)
        this.solveTimeOfImpact$0();
      this._inverseTimestep = t1.inv_dt;
    }
    if ((this._flags & 4) === 4)
      this.clearForces$0();
    this._flags = (this._flags & 4294967293) >>> 0;
  },
  clearForces$0: function() {
    var body, t1;
    for (body = this._bodyList; body != null; body = body.next) {
      t1 = body._force.storage;
      t1[0] = 0;
      t1[1] = 0;
      body._torque = 0;
    }
  },
  solve$1: function(timeStep) {
    var t1, t2, t3, b, c, j, stackSize, seed, t4, stackCount, t5, ce, contact, sensorA, sensorB, other, stackCount0, je, t6, i;
    t1 = this.island;
    t2 = this._bodyCount;
    t3 = this._contactManager;
    t1.init$4(t2, t3.contactCount, this._jointCount, t3.contactListener);
    for (b = this._bodyList; b != null; b = b.next) {
      t2 = b.flags;
      if (typeof t2 !== "number")
        throw t2.$and();
      b.flags = (t2 & 4294967294) >>> 0;
    }
    for (c = this._contactManager.contactList; c != null; c = c.next) {
      t2 = c.flags;
      if (typeof t2 !== "number")
        throw t2.$and();
      c.flags = (t2 & 4294967294) >>> 0;
    }
    for (j = this._jointList; false; j = j.get$_next())
      j.set$islandFlag(false);
    stackSize = this._bodyCount;
    if (this.stack.length < stackSize) {
      t2 = P.List_List(stackSize, V.Body);
      H.setRuntimeTypeInfo(t2, [V.Body]);
      this.stack = t2;
    }
    for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; seed != null; seed = seed.next) {
      t4 = seed.flags;
      if (typeof t4 !== "number")
        throw t4.$and();
      if ((t4 & 1) === 1)
        continue;
      if ((t4 & 2) !== 2 || (t4 & 32) !== 32)
        continue;
      if (seed._type === 0)
        continue;
      t1.bodyCount = 0;
      t1.contactCount = 0;
      t1.jointCount = 0;
      t4 = this.stack;
      if (0 >= t4.length)
        throw H.ioore(t4, 0);
      t4[0] = seed;
      t4 = seed.flags;
      if (typeof t4 !== "number")
        throw t4.$or();
      seed.flags = (t4 | 1) >>> 0;
      for (stackCount = 1; stackCount > 0;) {
        t4 = this.stack;
        --stackCount;
        if (stackCount >= t4.length)
          throw H.ioore(t4, stackCount);
        b = t4[stackCount];
        b.islandIndex = t1.bodyCount;
        t4 = t1.bodies;
        t5 = t1.bodyCount;
        if (typeof t5 !== "number")
          throw t5.$add();
        t1.bodyCount = t5 + 1;
        if (t5 < 0 || t5 >= t4.length)
          throw H.ioore(t4, t5);
        t4[t5] = b;
        b.set$awake(true);
        if (b._type === 0)
          continue;
        for (ce = b.contactList; ce != null; ce = ce.next) {
          contact = ce.contact;
          t4 = contact.flags;
          if (typeof t4 !== "number")
            throw t4.$and();
          if ((t4 & 1) === 1)
            continue;
          if ((t4 & 4) !== 4 || (t4 & 2) !== 2)
            continue;
          sensorA = contact.fixtureA.get$isSensor();
          sensorB = contact.fixtureB.get$isSensor();
          if (sensorA === true || sensorB === true)
            continue;
          t4 = t1.contacts;
          t5 = t1.contactCount;
          if (typeof t5 !== "number")
            throw t5.$add();
          t1.contactCount = t5 + 1;
          if (t5 < 0 || t5 >= t4.length)
            throw H.ioore(t4, t5);
          t4[t5] = contact;
          t5 = contact.flags;
          if (typeof t5 !== "number")
            throw t5.$or();
          contact.flags = (t5 | 1) >>> 0;
          other = ce.other;
          t4 = other.get$flags();
          if (typeof t4 !== "number")
            throw t4.$and();
          if ((t4 & 1) === 1)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw H.ioore(t4, stackCount);
          t4[stackCount] = other;
          t4 = other.flags;
          if (typeof t4 !== "number")
            throw t4.$or();
          other.flags = (t4 | 1) >>> 0;
          stackCount = stackCount0;
        }
        for (je = b.jointList; false; je = je.get$next()) {
          t4 = je.get$joint();
          t4.get$islandFlag();
          other = je.get$other();
          other.get$active();
          t5 = t1.joints;
          t6 = t1.jointCount;
          if (typeof t6 !== "number")
            throw t6.$add();
          t1.jointCount = t6 + 1;
          if (t6 < 0 || t6 >= t5.length)
            throw H.ioore(t5, t6);
          t5[t6] = t4;
          je.get$joint().set$islandFlag(true);
          t4 = other.get$flags();
          t4.$and(t4, 1);
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw H.ioore(t4, stackCount);
          t4[stackCount] = other;
          t4 = other.get$flags();
          other.set$flags(t4.$or(t4, 1));
          stackCount = stackCount0;
        }
      }
      t1.solve$3(timeStep, t2, t3);
      i = 0;
      while (true) {
        t4 = t1.bodyCount;
        if (typeof t4 !== "number")
          throw H.iae(t4);
        if (!(i < t4))
          break;
        t4 = t1.bodies;
        if (i >= t4.length)
          throw H.ioore(t4, i);
        b = t4[i];
        if (b._type === 0) {
          t4 = b.flags;
          if (typeof t4 !== "number")
            throw t4.$and();
          b.flags = (t4 & 4294967294) >>> 0;
        }
        ++i;
      }
    }
    for (b = this._bodyList; b != null; b = b.next) {
      t1 = b.flags;
      if (typeof t1 !== "number")
        throw t1.$and();
      if ((t1 & 1) === 0)
        continue;
      if (b._type === 0)
        continue;
      b.synchronizeFixtures$0();
    }
    t1 = this._contactManager;
    t1.broadPhase.updatePairs$1(t1.get$_addPair());
  },
  solveTimeOfImpact$0: function() {
    var c, t1, body, t2;
    for (c = this._contactManager.contactList; c != null; c = c.next) {
      t1 = c.flags;
      if (typeof t1 !== "number")
        throw t1.$or();
      c.flags = (t1 | 4) >>> 0;
      c.toiCount = 0;
    }
    for (body = this._bodyList; body != null; body = body.next) {
      t1 = body.flags;
      if (typeof t1 !== "number")
        throw t1.$and();
      if ((t1 & 1) !== 0) {
        t2 = body._type;
        t2 = t2 === 1 || t2 === 0;
      } else
        t2 = true;
      if (t2)
        body.flags = (t1 | 64) >>> 0;
      else
        body.flags = (t1 & 4294967231) >>> 0;
    }
    for (body = this._bodyList; body != null; body = body.next) {
      t1 = body.flags;
      if (typeof t1 !== "number")
        throw t1.$and();
      if ((t1 & 64) === 64 || (t1 & 8) === 8)
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      t1 = body.flags;
      if (typeof t1 !== "number")
        throw t1.$or();
      body.flags = (t1 | 64) >>> 0;
    }
    for (body = this._bodyList; body != null; body = body.next) {
      t1 = body.flags;
      if (typeof t1 !== "number")
        throw t1.$and();
      if ((t1 & 64) === 64 || (t1 & 8) !== 8)
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      t1 = body.flags;
      if (typeof t1 !== "number")
        throw t1.$or();
      body.flags = (t1 | 64) >>> 0;
    }
  },
  solveTimeOfImpactGivenBody$1: function(body) {
    var t1, bullet, t2, t3, t4, t5, t6, t7, toiContact, toi, toiOther, iter, ce, found, count, toiContact0, other, type, t8, fixtureA, fixtureB, bodyA, bodyB, contact, i;
    t1 = body.flags;
    if (typeof t1 !== "number")
      throw t1.$and();
    bullet = (t1 & 8) === 8;
    t1 = this.toiOutput;
    t2 = this.toiInput;
    t3 = t2.proxyA;
    t4 = t2.proxyB;
    t5 = t2.sweepA;
    t6 = t2.sweepB;
    t7 = this._pool;
    toiContact = null;
    toi = 1;
    toiOther = null;
    iter = 0;
    do {
      for (ce = body.contactList, found = false, count = 0; ce != null; ce = ce.next) {
        toiContact0 = ce.contact;
        if (toiContact0 == null ? toiContact == null : toiContact0 === toiContact)
          continue;
        other = ce.other;
        type = other.get$type(other);
        if (bullet) {
          t8 = other.flags;
          if (typeof t8 !== "number")
            throw t8.$and();
          if ((t8 & 64) === 0)
            continue;
          if (type !== 0) {
            t8 = toiContact0.flags;
            if (typeof t8 !== "number")
              throw t8.$and();
            t8 = (t8 & 16) !== 0;
          } else
            t8 = false;
          if (t8)
            continue;
        } else if (type === 2)
          continue;
        t8 = toiContact0.flags;
        if (typeof t8 !== "number")
          throw t8.$and();
        if ((t8 & 4) === 4) {
          t8 = toiContact0.toiCount;
          if (typeof t8 !== "number")
            throw t8.$gt();
          t8 = t8 > 10;
        } else
          t8 = true;
        if (t8)
          continue;
        fixtureA = toiContact0.fixtureA;
        fixtureB = toiContact0.fixtureB;
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          continue;
        bodyA = fixtureA.body;
        t8 = J.getInterceptor$x(fixtureB);
        bodyB = t8.get$body(fixtureB);
        t3.setFromShape$1(fixtureA.shape);
        t4.setFromShape$1(t8.get$shape(fixtureB));
        t5.setFrom$1(bodyA.sweep);
        t6.setFrom$1(bodyB.get$sweep());
        t2.tMax = toi;
        t7.timeOfImpact.timeOfImpact$2(t1, t2);
        if (t1.state === 3 && t1.t < toi) {
          toi = t1.t;
          toiOther = other;
          toiContact = toiContact0;
          found = true;
        }
        ++count;
      }
      ++iter;
    } while (found && count > 1 && iter < 50);
    if (toiContact == null) {
      t1 = body.sweep;
      t1.advance$1(1);
      t2 = t1.center.storage;
      t3 = t1.centerZero.storage;
      t2[1] = t3[1];
      t2[0] = t3[0];
      t1.angle = t1.angleZero;
      body.synchronizeTransform$0();
      return;
    }
    t1 = this.backup;
    t2 = body.sweep;
    t1.setFrom$1(t2);
    t2.advance$1(toi);
    t3 = t2.center.storage;
    t4 = t2.centerZero.storage;
    t3[1] = t4[1];
    t3[0] = t4[0];
    t2.angle = t2.angleZero;
    body.synchronizeTransform$0();
    toiContact.update$1(this._contactManager.contactListener);
    t3 = toiContact.flags;
    if (typeof t3 !== "number")
      throw t3.$and();
    if ((t3 & 4) !== 4) {
      t2.setFrom$1(t1);
      this.solveTimeOfImpactGivenBody$1(body);
    }
    t1 = toiContact.toiCount;
    if (typeof t1 !== "number")
      throw t1.$add();
    toiContact.toiCount = t1 + 1;
    if (this.contacts.length < 32) {
      t1 = P.List_List(32, V.Contact);
      t1.$builtinTypeInfo = [V.Contact];
      this.contacts = t1;
    }
    ce = body.contactList;
    count = 0;
    while (true) {
      if (!(ce != null && count < 32))
        break;
      c$0: {
        other = ce.other;
        if (other.get$type(other) === 2)
          break c$0;
        contact = ce.contact;
        t1 = contact.flags;
        if (typeof t1 !== "number")
          throw t1.$and();
        if ((t1 & 4) !== 4)
          break c$0;
        fixtureA = contact.fixtureA;
        fixtureB = contact.fixtureB;
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          break c$0;
        if (contact == null ? toiContact != null : contact !== toiContact)
          contact.update$1(this._contactManager.contactListener);
        t1 = contact.flags;
        if (typeof t1 !== "number")
          throw t1.$and();
        if ((t1 & 4) !== 4 || (t1 & 2) !== 2)
          break c$0;
        t1 = this.contacts;
        if (count >= t1.length)
          throw H.ioore(t1, count);
        t1[count] = contact;
        ++count;
      }
      ce = ce.next;
    }
    t1 = this.toiSolver;
    t1.initialize$3(t1, this.contacts, count, body);
    for (i = 0; i < 20; ++i)
      if (t1.solve$1(0.75))
        break;
    if (toiOther.get$type(toiOther) !== 0) {
      t1 = toiContact.flags;
      if (typeof t1 !== "number")
        throw t1.$or();
      toiContact.flags = (t1 | 16) >>> 0;
    }
  },
  World$3: function(gravity, doSleep, argPool) {
    var t1, t2, i, t3;
    this._contactManager = V.ContactManager$(this);
    for (t1 = this._contactStacks, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = P.List_List(2, V.ContactRegister);
      t3.$builtinTypeInfo = [V.ContactRegister];
      t1[i] = t3;
    }
    this._initializeRegisters$0();
  },
  static: {
"": "World_WORLD_POOL_SIZE,World_WORLD_POOL_CONTAINER_SIZE,World_NEW_FIXTURE,World_LOCKED,World_CLEAR_FORCES",
World$: function(gravity, doSleep, argPool) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
  t1 = P.List_List(2, [J.JSArray, V.ContactRegister]);
  H.setRuntimeTypeInfo(t1, [[J.JSArray, V.ContactRegister]]);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t3 = new Float32Array(2);
  t3.$dartCachedLength = t3.length;
  t4 = V.TimeStep$();
  t5 = new Float32Array(2);
  t5.$dartCachedLength = t5.length;
  t6 = new Float32Array(2);
  t6.$dartCachedLength = t6.length;
  t7 = V.TimeOfImpactInput$();
  t8 = V.Sweep$();
  t9 = V.TimeOfImpactSolver$();
  t10 = P.List_List(32, V.Contact);
  H.setRuntimeTypeInfo(t10, [V.Contact]);
  t11 = V.Island$();
  t12 = P.List_List(10, V.Body);
  H.setRuntimeTypeInfo(t12, [V.Body]);
  t12 = new V.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, t1, new T.Vector2(t2), new T.Vector2(t3), t4, new T.Vector2(t5), new T.Vector2(t6), new V.WorldQueryWrapper(null, null), t7, new V.TimeOfImpactOutput(0, 0), t8, t9, t10, t11, t12);
  t12.World$3(gravity, doSleep, argPool);
  return t12;
}}

},

WorldQueryWrapper: {"": "Object;broadPhase,callback"},

DefaultWorldPool: {"": "Object;collision,timeOfImpact,distance",
  getCircleContactStack$0: function() {
    var queue, i;
    queue = P.ListQueue$(null, V.CircleContact);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new V.CircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
    return queue;
  },
  getPolyCircleContactStack$0: function() {
    var queue, i;
    queue = P.ListQueue$(null, V.PolygonAndCircleContact);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new V.PolygonAndCircleContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
    return queue;
  },
  getPolyContactStack$0: function() {
    var queue, i;
    queue = P.ListQueue$(null, V.PolygonContact);
    for (i = 0; i < 10; ++i)
      queue.addFirst$1(new V.PolygonContact(null, null, null, new V.ContactEdge(null, null, null, null), new V.ContactEdge(null, null, null, null), null, null, V.Manifold$(), null, this, V.Manifold$()));
    return queue;
  },
  DefaultWorldPool$0: function() {
    this.distance = V.Distance$_construct();
    this.collision = V.Collision$_construct(this);
    this.timeOfImpact = V.TimeOfImpact$_construct(this);
  },
  static: {
DefaultWorldPool$: function() {
  var t1 = new V.DefaultWorldPool(null, null, null);
  t1.DefaultWorldPool$0();
  return t1;
}}

}}],
["box2d_browser", "package:box2d/box2d_browser.dart", , Y, {
CanvasDraw: {"": "DebugDraw;ctx,flags,viewportTransform",
  CanvasDraw$2: function(viewport, ctx) {
  },
  static: {
CanvasDraw$: function(viewport, ctx) {
  var t1 = new Y.CanvasDraw(ctx, 1, viewport);
  t1.CanvasDraw$2(viewport, ctx);
  return t1;
}}

},

CanvasViewportTransform: {"": "ViewportTransform;yFlip,extents,scale,center", static: {
"": "CanvasViewportTransform_DEFAULT_DRAWING_SCALE",
}
}}],
["dart._collection.dev", "dart:_collection-dev", , H, {
Arrays_copy: function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
  else
    for (t1 = srcStart + count, t2 = src.length, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
      if (i < 0 || i >= t2)
        throw H.ioore(src, i);
      C.JSArray_methods.$indexSet(dst, j, src[i]);
    }
},

Arrays_indexOf: function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw H.ioore(a, i);
    if (J.$eq(a[i], element))
      return i;
  }
  return -1;
},

IterableMixinWorkaround_forEach: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    f.call$1(t1._current);
},

IterableMixinWorkaround_any: function(iterable, f) {
  var t1;
  for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
    if (f.call$1(t1._current) === true)
      return true;
  return false;
},

IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
  var result, i, t1;
  for (i = 0; i < $.get$IterableMixinWorkaround__toStringList().length; ++i) {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (i >= t1.length)
      throw H.ioore(t1, i);
    if (t1[i] === iterable)
      return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
  }
  result = P.StringBuffer$("");
  try {
    $.get$IterableMixinWorkaround__toStringList().push(iterable);
    result.write$1(leftDelimiter);
    result.writeAll$2(iterable, ", ");
    result.write$1(rightDelimiter);
  } finally {
    t1 = $.get$IterableMixinWorkaround__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

IterableMixinWorkaround_sortList: function(list, compare) {
  H.Sort__doSort(list, 0, list.length - 1, compare);
},

IterableMixinWorkaround__rangeCheck: function(list, start, end) {
  if (start < 0 || start > list.length)
    throw H.wrapException(P.RangeError$range(start, 0, list.length));
  if (end < start || end > list.length)
    throw H.wrapException(P.RangeError$range(end, start, list.length));
},

IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
  var $length;
  H.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = end - start;
  if ($length === 0)
    return;
  if (skipCount < 0)
    throw H.wrapException(new P.ArgumentError(skipCount));
  if (skipCount + $length > from.length)
    throw H.wrapException(P.StateError$("Not enough elements"));
  H.Arrays_copy(from, skipCount, list, start, $length);
},

printToConsole: function(line) {
  if (typeof dartPrint == "function") {
    dartPrint(line);
    return;
  }
  if (typeof console == "object" && typeof console.log == "function") {
    console.log(line);
    return;
  }
  if (typeof window == "object")
    return;
  if (typeof print == "function") {
    print(line);
    return;
  }
  throw "Unable to print message: " + String(line);
},

Sort__doSort: function(a, left, right, compare) {
  if (right - left <= 32)
    H.Sort__insertionSort(a, left, right, compare);
  else
    H.Sort__dualPivotQuicksort(a, left, right, compare);
},

Sort__insertionSort: function(a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
},

Sort__dualPivotQuicksort: function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
  sixth = C.JSInt_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = C.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = J.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if (J.$gt$n(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el1, el4), 0)) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if (J.$gt$n(compare.call$2(el3, el4), 0)) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el5), 0)) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if (J.$gt$n(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  if (J.$eq(compare.call$2(el2, el4), 0)) {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t2 = J.getInterceptor(comp);
      if (t2.$eq(comp, 0))
        continue;
      if (t2.$lt(comp, 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t2 = J.getInterceptor$n(comp);
          if (t2.$gt(comp, 0)) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t2.$lt(comp, 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
    pivots_are_equal = true;
  } else {
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$lt$n(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$gt$n(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    pivots_are_equal = false;
  }
  t2 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t2));
  t1.$indexSet(a, t2, el2);
  t2 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t2));
  t1.$indexSet(a, t2, el4);
  H.Sort__doSort(a, left, less - 2, compare);
  H.Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
      ++less;
    for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if (J.$eq(compare.call$2(ak, el2), 0)) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if (J.$eq(compare.call$2(ak, el4), 0))
        for (; true;)
          if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    H.Sort__doSort(a, less, great, compare);
  } else
    H.Sort__doSort(a, less, great, compare);
},

Symbol_getName: function(symbol) {
  return symbol.get$_name();
},

ListIterable: {"": "IterableBase;",
  get$iterator: function(_) {
    return new H.ListIterator(this, this.get$length(this), 0, null);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

SubListIterable: {"": "ListIterable;_iterable,_start,_endOrLength",
  get$_endIndex: function() {
    var $length, t1, t2;
    $length = J.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 != null) {
      if (typeof t1 !== "number")
        throw t1.$gt();
      t2 = t1 > $length;
    } else
      t2 = true;
    if (t2)
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = J.get$length$asx(this._iterable);
    t1 = this._start;
    if (t1 > $length)
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2, t3;
    $length = J.get$length$asx(this._iterable);
    t1 = this._start;
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 != null) {
      if (typeof t2 !== "number")
        throw t2.$ge();
      t3 = t2 >= $length;
    } else
      t3 = true;
    if (t3)
      return $length - t1;
    if (typeof t2 !== "number")
      throw t2.$sub();
    return t2 - t1;
  },
  elementAt$1: function(_, index) {
    var realIndex, t1;
    realIndex = this.get$_startIndex() + index;
    if (index >= 0) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        throw H.iae(t1);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
    return J.elementAt$1$ax(this._iterable, realIndex);
  },
  SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
    var t1, t2;
    t1 = this._start;
    if (t1 < 0)
      throw H.wrapException(P.RangeError$value(t1));
    t2 = this._endOrLength;
    if (t2 != null) {
      if (typeof t2 !== "number")
        throw t2.$lt();
      if (t2 < 0)
        throw H.wrapException(P.RangeError$value(t2));
      if (t1 > t2)
        throw H.wrapException(P.RangeError$range(t1, 0, t2));
    }
  },
  $asListIterable: null,
  static: {
SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
  var t1 = new H.SubListIterable(_iterable, _start, _endOrLength);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
  return t1;
}}

},

ListIterator: {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, $length, t3;
    t1 = this._iterable;
    t2 = J.getInterceptor$asx(t1);
    $length = t2.get$length(t1);
    if (this._length !== $length)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    t3 = this._index;
    if (t3 >= $length) {
      this._current = null;
      return false;
    }
    this._current = t2.elementAt$1(t1, t3);
    this._index = this._index + 1;
    return true;
  }
},

MappedIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = this._iterable;
    t1 = t1.get$iterator(t1);
    t1 = new H.MappedIterator(null, t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "MappedIterable", 0), H.getRuntimeTypeArgument(this, "MappedIterable", 1)]);
    return t1;
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  $asIterableBase: function($S, $T) {
    return [$T];
  },
  static: {
MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
  var t1;
  if (!!iterable.$isEfficientLength) {
    t1 = new H.EfficientLengthMappedIterable(iterable, $function);
    H.setRuntimeTypeInfo(t1, [$S, $T]);
    return t1;
  }
  t1 = new H.MappedIterable(iterable, $function);
  H.setRuntimeTypeInfo(t1, [$S, $T]);
  return t1;
}}

},

EfficientLengthMappedIterable: {"": "MappedIterable;_iterable,_f", $asMappedIterable: null, $isEfficientLength: true},

MappedIterator: {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function($S, $T) {
    return [$T];
  }
},

MappedListIterable: {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return J.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1(J.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function($S, $T) {
    return [$T];
  },
  $isEfficientLength: true
},

WhereIterable: {"": "IterableBase;_iterable,_f",
  get$iterator: function(_) {
    var t1 = J.get$iterator$ax(this._iterable);
    t1 = new H.WhereIterator(t1, this._f);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "WhereIterable", 0)]);
    return t1;
  },
  $asIterableBase: null
},

WhereIterator: {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
},

FixedLengthListMixin: {"": "Object;"}}],
["dart._js_names", "dart:_js_names", , H, {
unmangleGlobalNameIfPreservedAnyways: function($name) {
  return init.mangledGlobalNames[$name];
}}],
["dart.async", "dart:async", , P, {
_invokeErrorHandler: function(errorHandler, error, stackTrace) {
  var t1 = J.getInterceptor(errorHandler);
  if (!!t1.$is_args2)
    return errorHandler.call$2(error, stackTrace);
  else
    return errorHandler.call$1(error);
},

_registerErrorHandler: function(errorHandler, zone) {
  var t1 = J.getInterceptor(errorHandler);
  zone.toString;
  if (!!t1.$is_args2)
    return errorHandler;
  else
    return errorHandler;
},

Future_wait: function(futures) {
  var t1, t2, t3, future, pos, t4, t5, result, completer;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new P.Future_wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();) {
    future = t3._current;
    pos = t1.remaining_2;
    t1.remaining_2 = pos + 1;
    t4 = future.catchError$1(t2);
    t5 = $.Zone__current;
    t5.toString;
    result = new P._Future(0, t5, null, null, new P.Future_wait_closure(t1, pos), null, P._registerErrorHandler(null, t5), null);
    result.$builtinTypeInfo = [null];
    t4._addListener$1(result);
  }
  t2 = t1.remaining_2;
  if (t2 === 0)
    return P._Future$immediate(C.List_empty, null);
  t1.values_1 = P.List_List(t2, null);
  t2 = J.JSArray;
  completer = new P._AsyncCompleter(P._Future$(t2));
  H.setRuntimeTypeInfo(completer, [t2]);
  t1.completer_0 = completer;
  return t1.completer_0.future;
},

_asyncRunCallback: function() {
  var callback, t1, exception, milliseconds;
  for (; t1 = $.get$_asyncCallbacks(), t1._head !== t1._tail;) {
    callback = $.get$_asyncCallbacks().removeFirst$0();
    try {
      callback.call$0();
    } catch (exception) {
      H.unwrapException(exception);
      milliseconds = C.JSNumber_methods.$tdiv(C.Duration_0._duration, 1000);
      H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, P._asyncRunCallback$closure);
      throw exception;
    }

  }
  $._callbacksAreEnqueued = false;
},

_scheduleAsyncCallback: function(callback) {
  $.get$_asyncCallbacks()._add$1(callback);
  if (!$._callbacksAreEnqueued) {
    P._createTimer(C.Duration_0, P._asyncRunCallback$closure);
    $._callbacksAreEnqueued = true;
  }
},

scheduleMicrotask: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    P._scheduleAsyncCallback(callback);
    return;
  }
  P._scheduleAsyncCallback(t1.bindCallback$2$runGuarded(callback, true));
},

StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
  var t1;
  if (sync) {
    t1 = new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  } else {
    t1 = new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null);
    H.setRuntimeTypeInfo(t1, [$T]);
  }
  return t1;
},

_runGuarded: function(notificationHandler) {
  var result, e, s, t1, t2, exception;
  if (notificationHandler == null)
    return;
  try {
    result = notificationHandler.call$0();
    t1 = result;
    t2 = J.getInterceptor(t1);
    if (typeof t1 === "object" && t1 !== null && !!t2.$isFuture)
      return result;
    return;
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, e, s);
  }

},

_nullDataHandler: function(value) {
},

_nullErrorHandler: function(error, stackTrace) {
  var t1 = $.Zone__current;
  t1.toString;
  P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
},

_nullDoneHandler: function() {
},

_runUserCode: function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = H.unwrapException(exception);
    e = t1;
    s = new H._StackTrace(exception, null);
    onError.call$2(e, s);
  }

},

_cancelAndError: function(subscription, future, error, stackTrace) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
  else
    future._completeError$2(error, stackTrace);
},

_cancelAndErrorClosure: function(subscription, future) {
  return new P._cancelAndErrorClosure_closure(subscription, future);
},

_cancelAndValue: function(subscription, future, value) {
  var cancelFuture, t1;
  cancelFuture = subscription.cancel$0();
  t1 = J.getInterceptor(cancelFuture);
  if (typeof cancelFuture === "object" && cancelFuture !== null && !!t1.$isFuture)
    cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
  else
    future._complete$1(value);
},

Timer_Timer: function(duration, callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone) {
    t1.toString;
    return P._createTimer(duration, callback);
  }
  return P._createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
},

_createTimer: function(duration, callback) {
  var milliseconds = C.JSNumber_methods.$tdiv(duration._duration, 1000);
  return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
},

_rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
  P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
},

_rootRun: function($self, $parent, zone, f) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$0();
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$0();
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_rootRunUnary: function($self, $parent, zone, f, arg) {
  var old, t1, t2;
  t1 = $.Zone__current;
  t2 = zone;
  if (t1 == null ? t2 == null : t1 === t2)
    return f.call$1(arg);
  old = t1;
  try {
    $.Zone__current = zone;
    t1 = f.call$1(arg);
    return t1;
  } finally {
    $.Zone__current = old;
  }
},

_AsyncError: {"": "Object;error>,stackTrace<", $isError: true},

Future: {"": "Object;", $isFuture: true},

Future_wait_handleError: {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
    return;
  },
  $is_args1: true
},

Future_wait_closure: {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 < 0 || t3 >= t2.length)
      throw H.ioore(t2, t3);
    t2[t3] = value;
    t1.remaining_2 = t1.remaining_2 - 1;
    if (t1.remaining_2 === 0) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      t2 = t2.future;
      if (t2._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t2._asyncComplete$1(t1);
    }
  },
  $is_args1: true
},

_Completer: {"": "Object;"},

_AsyncCompleter: {"": "_Completer;future",
  completeError$2: function(error, stackTrace) {
    var t1;
    if (error == null)
      throw H.wrapException(new P.ArgumentError("Error must not be null"));
    t1 = this.future;
    if (t1._state !== 0)
      throw H.wrapException(P.StateError$("Future already completed"));
    t1._asyncCompleteError$2(error, stackTrace);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  },
  $as_Completer: null
},

_Future: {"": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
  get$_isComplete: function() {
    return this._state >= 4;
  },
  get$_hasError: function() {
    return this._state === 8;
  },
  set$_isChained: function(value) {
    if (value)
      this._state = 2;
    else
      this._state = 0;
  },
  get$_onValue: function() {
    return this._state === 2 ? null : this._onValueCallback;
  },
  _onValue$1: function(arg0) {
    return this.get$_onValue().call$1(arg0);
  },
  get$_whenCompleteAction: function() {
    return this._state === 2 ? null : this._whenCompleteActionCallback;
  },
  _whenCompleteAction$0: function() {
    return this.get$_whenCompleteAction().call$0();
  },
  then$2$onError: function(f, onError) {
    var result = P._Future$_then(f, onError, null);
    this._addListener$1(result);
    return result;
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(onError, test) {
    var result = P._Future$_catchError(onError, test, null);
    this._addListener$1(result);
    return result;
  },
  catchError$1: function(onError) {
    return this.catchError$2$test(onError, null);
  },
  whenComplete$1: function(action) {
    var result = P._Future$_whenComplete(action, H.getRuntimeTypeArgument(this, "_Future", 0));
    this._addListener$1(result);
    return result;
  },
  get$_value: function() {
    return this._resultOrListeners;
  },
  get$_error: function() {
    return this._resultOrListeners;
  },
  _setValue$1: function(value) {
    this._state = 4;
    this._resultOrListeners = value;
  },
  _setError$2: function(error, stackTrace) {
    this._state = 8;
    this._resultOrListeners = new P._AsyncError(error, stackTrace);
  },
  _addListener$1: function(listener) {
    if (this._state >= 4) {
      this._zone.toString;
      P._scheduleAsyncCallback(new P._Future__addListener_closure(this, listener));
    } else {
      listener._nextListener = this._resultOrListeners;
      this._resultOrListeners = listener;
    }
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current._nextListener = prev;
    }
    return prev;
  },
  _complete$1: function(value) {
    var t1, listeners;
    t1 = J.getInterceptor(value);
    if (typeof value === "object" && value !== null && !!t1.$isFuture) {
      P._Future__chainFutures(value, this);
      return;
    }
    listeners = this._removeListeners$0();
    this._setValue$1(value);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$2: function(error, stackTrace) {
    var listeners = this._removeListeners$0();
    this._setError$2(error, stackTrace);
    P._Future__propagateToListeners(this, listeners);
  },
  _completeError$1: function(error) {
    return this._completeError$2(error, null);
  },
  get$_completeError: function() {
    return new P.BoundClosure$20(this, P._Future.prototype._completeError$2, null, "_completeError$2");
  },
  _asyncComplete$1: function(value) {
    var t1, t2;
    t1 = J.getInterceptor(value);
    t2 = typeof value === "object" && value !== null && !!t1.$isFuture;
    if (t2)
      ;
    if (t2)
      t1 = typeof value !== "object" || value === null || !t1.$is_Future || value._state < 4;
    else
      t1 = false;
    if (t1) {
      this._complete$1(value);
      return;
    }
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncComplete_closure(this, value));
  },
  _asyncCompleteError$2: function(error, stackTrace) {
    if (this._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    this._state = 1;
    this._zone.toString;
    P._scheduleAsyncCallback(new P._Future__asyncCompleteError_closure(this, error, stackTrace));
  },
  _async$_Future$immediate$1: function(value, $T) {
    this._asyncComplete$1(value);
  },
  $is_Future: true,
  $isFuture: true,
  static: {
"": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR",
_Future$: function($T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$immediate: function(value, $T) {
  var t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$T]);
  t1._async$_Future$immediate$1(value, $T);
  return t1;
},

_Future$_then: function(onValueCallback, onErrorCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, onValueCallback, null, P._registerErrorHandler(onErrorCallback, t1), null);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future$_catchError: function(onErrorCallback, errorTestCallback, $T) {
  var t1, t2;
  t1 = $.Zone__current;
  t2 = P._registerErrorHandler(onErrorCallback, t1);
  t1.toString;
  t2 = new P._Future(0, t1, null, null, null, errorTestCallback, t2, null);
  H.setRuntimeTypeInfo(t2, [$T]);
  return t2;
},

_Future$_whenComplete: function(whenCompleteActionCallback, $T) {
  var t1 = $.Zone__current;
  t1.toString;
  t1 = new P._Future(0, t1, null, null, null, null, null, whenCompleteActionCallback);
  H.setRuntimeTypeInfo(t1, [$T]);
  return t1;
},

_Future__chainFutures: function(source, target) {
  var t1;
  target._state = 2;
  t1 = J.getInterceptor(source);
  if (typeof source === "object" && source !== null && !!t1.$is_Future)
    if (source._state >= 4)
      P._Future__propagateToListeners(source, target);
    else
      source._addListener$1(target);
  else
    source.then$2$onError(new P._Future__chainFutures_closure(target), new P._Future__chainFutures_closure0(target));
},

_Future__propagateMultipleListeners: function(source, listeners) {
  var listeners0;
  do {
    listeners0 = listeners.get$_nextListener();
    listeners._nextListener = null;
    P._Future__propagateToListeners(source, listeners);
    if (listeners0 != null) {
      listeners = listeners0;
      continue;
    } else
      break;
  } while (true);
},

_Future__propagateToListeners: function(source, listeners) {
  var t1, t2, hasError, asyncError, t3, t4, t5, chainSource, listeners0;
  t1 = {};
  t1.source_4 = source;
  for (; true;) {
    t2 = {};
    if (!t1.source_4.get$_isComplete())
      return;
    hasError = t1.source_4.get$_hasError();
    if (hasError && listeners == null) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    if (listeners == null)
      return;
    if (listeners._nextListener != null) {
      P._Future__propagateMultipleListeners(t1.source_4, listeners);
      return;
    }
    if (hasError) {
      t3 = t1.source_4.get$_zone();
      t4 = listeners._zone;
      t3.toString;
      t4.toString;
      t3 = t4 == null ? t3 != null : t4 !== t3;
    } else
      t3 = false;
    if (t3) {
      t2 = t1.source_4;
      asyncError = t2.get$_error();
      t2 = t2._zone;
      t3 = J.get$error$x(asyncError);
      t4 = asyncError.get$stackTrace();
      t2.toString;
      P._rootHandleUncaughtError(t2, null, t2, t3, t4);
      return;
    }
    t3 = $.Zone__current;
    t4 = listeners._zone;
    if (t3 == null ? t4 != null : t3 !== t4) {
      t4.toString;
      P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure(t1, listeners));
      return;
    }
    t2.listenerHasValue_1 = null;
    t2.listenerValueOrError_2 = null;
    t2.isPropagationAborted_3 = false;
    t4.toString;
    P._rootRun(t4, null, t4, new P._Future__propagateToListeners_closure0(t1, t2, hasError, listeners));
    if (t2.isPropagationAborted_3)
      return;
    t3 = t2.listenerHasValue_1 === true;
    if (t3) {
      t4 = t2.listenerValueOrError_2;
      t5 = J.getInterceptor(t4);
      t5 = typeof t4 === "object" && t4 !== null && !!t5.$isFuture;
      t4 = t5;
    } else
      t4 = false;
    if (t4) {
      chainSource = t2.listenerValueOrError_2;
      t2 = J.getInterceptor(chainSource);
      if (typeof chainSource === "object" && chainSource !== null && !!t2.$is_Future && chainSource._state >= 4) {
        listeners._state = 2;
        t1.source_4 = chainSource;
        continue;
      }
      P._Future__chainFutures(chainSource, listeners);
      return;
    }
    if (t3) {
      listeners0 = listeners._removeListeners$0();
      t2 = t2.listenerValueOrError_2;
      listeners._state = 4;
      listeners._resultOrListeners = t2;
    } else {
      listeners0 = listeners._removeListeners$0();
      asyncError = t2.listenerValueOrError_2;
      t2 = J.get$error$x(asyncError);
      t3 = asyncError.get$stackTrace();
      listeners._state = 8;
      listeners._resultOrListeners = new P._AsyncError(t2, t3);
    }
    t1.source_4 = listeners;
    listeners = listeners0;
  }
}}

},

_Future__addListener_closure: {"": "Closure;this_0,listener_1",
  call$0: function() {
    P._Future__propagateToListeners(this.this_0, this.listener_1);
  }
},

_Future__chainFutures_closure: {"": "Closure;target_0",
  call$1: function(value) {
    this.target_0._complete$1(value);
  },
  $is_args1: true
},

_Future__chainFutures_closure0: {"": "Closure;target_1",
  call$2: function(error, stackTrace) {
    this.target_1._completeError$2(error, stackTrace);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

_Future__asyncComplete_closure: {"": "Closure;this_0,value_1",
  call$0: function() {
    this.this_0._complete$1(this.value_1);
  }
},

_Future__asyncCompleteError_closure: {"": "Closure;this_0,error_1,stackTrace_2",
  call$0: function() {
    this.this_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_Future__propagateToListeners_closure: {"": "Closure;box_2,listener_3",
  call$0: function() {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_3);
  }
},

_Future__propagateToListeners_closure0: {"": "Closure;box_2,box_1,hasError_4,listener_5",
  call$0: function() {
    var t1, value, asyncError, test, matchesTest, errorCallback, e, s, t2, t3, t4, exception;
    t1 = {};
    try {
      t2 = this.box_2;
      if (!this.hasError_4) {
        value = t2.source_4.get$_value();
        t2 = this.listener_5;
        t3 = t2._state === 2 ? null : t2._onValueCallback;
        t4 = this.box_1;
        if (t3 != null) {
          t4.listenerValueOrError_2 = t2._onValue$1(value);
          t4.listenerHasValue_1 = true;
        } else {
          t4.listenerValueOrError_2 = value;
          t4.listenerHasValue_1 = true;
        }
      } else {
        asyncError = t2.source_4.get$_error();
        t2 = this.listener_5;
        test = t2._state === 2 ? null : t2._errorTestCallback;
        matchesTest = true;
        if (test != null)
          matchesTest = test.call$1(J.get$error$x(asyncError));
        if (matchesTest === true)
          t3 = (t2._state === 2 ? null : t2._onErrorCallback) != null;
        else
          t3 = false;
        if (t3) {
          errorCallback = t2._state === 2 ? null : t2._onErrorCallback;
          t2 = this.box_1;
          t2.listenerValueOrError_2 = P._invokeErrorHandler(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          t2.listenerHasValue_1 = true;
        } else {
          t2 = this.box_1;
          t2.listenerValueOrError_2 = asyncError;
          t2.listenerHasValue_1 = false;
        }
      }
      t2 = this.listener_5;
      if ((t2._state === 2 ? null : t2._whenCompleteActionCallback) != null) {
        t1.completeResult_0 = t2._whenCompleteAction$0();
        t3 = t1.completeResult_0;
        t4 = J.getInterceptor(t3);
        if (typeof t3 === "object" && t3 !== null && !!t4.$isFuture) {
          t2.set$_isChained(true);
          t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners__closure(this.box_2, t2), new P._Future__propagateToListeners__closure0(t1, t2));
          this.box_1.isPropagationAborted_3 = true;
        }
      }
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      if (this.hasError_4) {
        t1 = J.get$error$x(this.box_2.source_4.get$_error());
        t2 = e;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      t2 = this.box_1;
      if (t1)
        t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
      else
        t2.listenerValueOrError_2 = new P._AsyncError(e, s);
      this.box_1.listenerHasValue_1 = false;
    }

  }
},

_Future__propagateToListeners__closure: {"": "Closure;box_2,listener_6",
  call$1: function(ignored) {
    P._Future__propagateToListeners(this.box_2.source_4, this.listener_6);
  },
  $is_args1: true
},

_Future__propagateToListeners__closure0: {"": "Closure;box_0,listener_7",
  call$2: function(error, stackTrace) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.completeResult_0;
    t3 = J.getInterceptor(t2);
    if (typeof t2 !== "object" || t2 === null || !t3.$is_Future) {
      t1.completeResult_0 = P._Future$(null);
      t1.completeResult_0._setError$2(error, stackTrace);
    }
    P._Future__propagateToListeners(t1.completeResult_0, this.listener_7);
  },
  call$1: function(error) {
    return this.call$2(error, null);
  },
  $is_args2: true,
  $is_args1: true
},

Stream: {"": "Object;",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = P._Future$(null);
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(J.JSInt);
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
    return future;
  },
  get$first: function(_) {
    var t1, future;
    t1 = {};
    future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
    return future;
  }
},

Stream_forEach_closure: {"": "Closure;box_0,this_1,action_2,future_3",
  call$1: function(element) {
    P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
  },
  $is_args1: true
},

Stream_forEach__closure: {"": "Closure;action_4,element_5",
  call$0: function() {
    return this.action_4.call$1(this.element_5);
  }
},

Stream_forEach__closure0: {"": "Closure;",
  call$1: function(_) {
  },
  $is_args1: true
},

Stream_forEach_closure0: {"": "Closure;future_6",
  call$0: function() {
    this.future_6._complete$1(null);
  }
},

Stream_length_closure: {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = t1.count_0 + 1;
  },
  $is_args1: true
},

Stream_length_closure0: {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._complete$1(this.box_0.count_0);
  }
},

Stream_first_closure: {"": "Closure;box_0,this_1,future_2",
  call$1: function(value) {
    P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
  },
  $is_args1: true
},

Stream_first_closure0: {"": "Closure;future_3",
  call$0: function() {
    this.future_3._completeError$1(new P.StateError("No elements"));
  }
},

StreamSubscription: {"": "Object;"},

_StreamController: {"": "Object;",
  get$_pendingEvents: function() {
    if ((this._state & 8) === 0)
      return this._varData;
    return this._varData.get$varData();
  },
  _ensurePendingEvents$0: function() {
    if ((this._state & 8) === 0) {
      if (this._varData == null)
        this._varData = new P._StreamImplEvents(null, null, 0);
      return this._varData;
    }
    var t1 = this._varData.get$varData();
    return t1;
  },
  get$_subscription: function() {
    if ((this._state & 8) !== 0)
      return this._varData.get$varData();
    return this._varData;
  },
  _badEventState$0: function() {
    if ((this._state & 4) !== 0)
      return new P.StateError("Cannot add event after closing");
    return new P.StateError("Cannot add event while adding a stream");
  },
  _ensureDoneFuture$0: function() {
    if (this._doneFuture == null) {
      this._doneFuture = P._Future$(null);
      if ((this._state & 2) !== 0)
        this._doneFuture._complete$1(null);
    }
    return this._doneFuture;
  },
  close$0: function(_) {
    var t1 = this._state;
    if ((t1 & 4) !== 0)
      return this._doneFuture;
    if (t1 >= 4)
      throw H.wrapException(this._badEventState$0());
    this._state = (t1 | 4) >>> 0;
    this._ensureDoneFuture$0();
    t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendDone$0();
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, C.C__DelayedDone);
    }
    return this._doneFuture;
  },
  _async$_add$1: function(value) {
    var t1 = this._state;
    if ((t1 & 1) !== 0)
      this._sendData$1(value);
    else if ((t1 & 3) === 0) {
      t1 = this._ensurePendingEvents$0();
      t1.add$1(t1, new P._DelayedData(value, null));
    }
  },
  _subscribe$1: function(cancelOnError) {
    var t1, t2, subscription, pendingEvents, addState;
    if ((this._state & 3) !== 0)
      throw H.wrapException(new P.StateError("Stream has already been listened to."));
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    subscription = new P._ControllerSubscription(this, null, null, null, t1, t2, null, null);
    H.setRuntimeTypeInfo(subscription, [null]);
    pendingEvents = this.get$_pendingEvents();
    this._state = (this._state | 1) >>> 0;
    if ((this._state & 8) !== 0) {
      addState = this._varData;
      addState.set$varData(subscription);
      addState.resume$0();
    } else
      this._varData = subscription;
    subscription._setPendingEvents$1(pendingEvents);
    subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
    return subscription;
  },
  _recordCancel$1: function(subscription) {
    var t1, future;
    if ((this._state & 8) !== 0)
      this._varData.cancel$0();
    this._varData = null;
    this._state = (this._state & 4294967286 | 2) >>> 0;
    t1 = new P._StreamController__recordCancel_complete(this);
    future = P._runGuarded(this.get$_onCancel());
    if (future != null)
      future = future.whenComplete$1(t1);
    else
      t1.call$0();
    return future;
  }
},

_StreamController__subscribe_closure: {"": "Closure;this_0",
  call$0: function() {
    P._runGuarded(this.this_0.get$_onListen());
  }
},

_StreamController__recordCancel_complete: {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0._doneFuture;
    if (t1 != null && t1._state === 0)
      t1._asyncComplete$1(null);
  }
},

_SyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._async$_add$1(data);
  },
  _sendDone$0: function() {
    this.get$_subscription()._close$0();
  }
},

_AsyncStreamControllerDispatch: {"": "Object;",
  _sendData$1: function(data) {
    this.get$_subscription()._addPending$1(new P._DelayedData(data, null));
  },
  _sendDone$0: function() {
    this.get$_subscription()._addPending$1(C.C__DelayedDone);
  }
},

_AsyncStreamController: {"": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__AsyncStreamControllerDispatch: {"": "_StreamController+_AsyncStreamControllerDispatch;"},

_SyncStreamController: {"": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture"},

_StreamController__SyncStreamControllerDispatch: {"": "_StreamController+_SyncStreamControllerDispatch;"},

_ControllerStream: {"": "_StreamImpl;_async$_controller",
  _createSubscription$1: function(cancelOnError) {
    return this._async$_controller._subscribe$1(cancelOnError);
  },
  get$hashCode: function(_) {
    return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (this === other)
      return true;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$is_ControllerStream)
      return false;
    return other._async$_controller === this._async$_controller;
  },
  $is_ControllerStream: true,
  $as_StreamImpl: null
},

_ControllerSubscription: {"": "_BufferingStreamSubscription;_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
  _onCancel$0: function() {
    return this._async$_controller._recordCancel$1(this);
  },
  _onPause$0: function() {
    var t1, addState;
    t1 = this._async$_controller;
    if ((t1._state & 8) !== 0) {
      addState = t1._varData;
      addState.pause$0(addState);
    }
    P._runGuarded(t1.get$_onPause());
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
    var t1 = this._async$_controller;
    if ((t1._state & 8) !== 0)
      t1._varData.resume$0();
    P._runGuarded(t1.get$_onResume());
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._ControllerSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  $as_BufferingStreamSubscription: null
},

_EventSink: {"": "Object;"},

_BufferingStreamSubscription: {"": "Object;_async$_onData,_onError,_onDone,_zone<,_state,_cancelFuture,_pending",
  _setPendingEvents$1: function(pendingEvents) {
    if (pendingEvents == null)
      return;
    this._pending = pendingEvents;
    if (!pendingEvents.get$isEmpty(pendingEvents)) {
      this._state = (this._state | 64) >>> 0;
      this._pending.schedule$1(this);
    }
  },
  onData$1: function(handleData) {
    $.Zone__current.toString;
    this._async$_onData = handleData;
  },
  onError$1: function(_, handleError) {
    this._onError = P._registerErrorHandler(handleError, $.Zone__current);
  },
  onDone$1: function(handleDone) {
    $.Zone__current.toString;
    this._onDone = handleDone;
  },
  pause$1: function(_, resumeSignal) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 + 128 | 4) >>> 0;
    if (t1 < 128 && this._pending != null)
      this._pending.cancelSchedule$0();
    if ((t1 & 4) === 0 && (this._state & 32) === 0)
      this._guardCallback$1(this.get$_onPause());
  },
  pause$0: function($receiver) {
    return this.pause$1($receiver, null);
  },
  resume$0: function() {
    var t1, t2;
    t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 >= 128) {
      this._state = t1 - 128;
      t1 = this._state;
      if (t1 < 128) {
        if ((t1 & 64) !== 0) {
          t2 = this._pending;
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = false;
        if (t2)
          this._pending.schedule$1(this);
        else {
          this._state = (t1 & 4294967291) >>> 0;
          if ((this._state & 32) === 0)
            this._guardCallback$1(this.get$_onResume());
        }
      }
    }
  },
  cancel$0: function() {
    this._state = (this._state & 4294967279) >>> 0;
    if ((this._state & 8) !== 0)
      return this._cancelFuture;
    this._cancel$0();
    return this._cancelFuture;
  },
  get$_mayResumeInput: function() {
    if (this._state < 128) {
      var t1 = this._pending;
      t1 = t1 == null || t1.get$isEmpty(t1);
    } else
      t1 = false;
    return t1;
  },
  _cancel$0: function() {
    this._state = (this._state | 8) >>> 0;
    if ((this._state & 64) !== 0)
      this._pending.cancelSchedule$0();
    if ((this._state & 32) === 0)
      this._pending = null;
    this._cancelFuture = this._onCancel$0();
  },
  _async$_add$1: function(data) {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    if (t1 < 32)
      this._sendData$1(data);
    else
      this._addPending$1(new P._DelayedData(data, null));
  },
  _close$0: function() {
    var t1 = this._state;
    if ((t1 & 8) !== 0)
      return;
    this._state = (t1 | 2) >>> 0;
    if (this._state < 32)
      this._sendDone$0();
    else
      this._addPending$1(C.C__DelayedDone);
  },
  _onPause$0: function() {
  },
  get$_onPause: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onPause$0, null, "_onPause$0");
  },
  _onResume$0: function() {
  },
  get$_onResume: function() {
    return new P.BoundClosure$0(this, P._BufferingStreamSubscription.prototype._onResume$0, null, "_onResume$0");
  },
  _onCancel$0: function() {
  },
  _addPending$1: function($event) {
    var pending, t1;
    pending = this._pending;
    if (pending == null) {
      pending = new P._StreamImplEvents(null, null, 0);
      this._pending = pending;
    }
    pending.add$1(pending, $event);
    t1 = this._state;
    if ((t1 & 64) === 0) {
      this._state = (t1 | 64) >>> 0;
      if (this._state < 128)
        this._pending.schedule$1(this);
    }
  },
  _sendData$1: function(data) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    this._zone.runUnaryGuarded$2(this._async$_onData, data);
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _sendDone$0: function() {
    var t1, t2, t3;
    t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
    this._cancel$0();
    this._state = (this._state | 16) >>> 0;
    t2 = this._cancelFuture;
    t3 = J.getInterceptor(t2);
    if (typeof t2 === "object" && t2 !== null && !!t3.$isFuture)
      t2.whenComplete$1(t1);
    else
      t1.call$0();
  },
  _guardCallback$1: function(callback) {
    var t1 = this._state;
    this._state = (t1 | 32) >>> 0;
    callback.call$0();
    this._state = (this._state & 4294967263) >>> 0;
    this._checkState$1((t1 & 4) !== 0);
  },
  _checkState$1: function(wasInputPaused) {
    var t1, t2, isInputPaused;
    t1 = this._state;
    if ((t1 & 64) !== 0) {
      t2 = this._pending;
      t2 = t2.get$isEmpty(t2);
    } else
      t2 = false;
    if (t2) {
      this._state = (t1 & 4294967231) >>> 0;
      if ((this._state & 4) !== 0 && this.get$_mayResumeInput())
        this._state = (this._state & 4294967291) >>> 0;
    }
    for (; true; wasInputPaused = isInputPaused) {
      t1 = this._state;
      if ((t1 & 8) !== 0) {
        this._pending = null;
        return;
      }
      isInputPaused = (t1 & 4) !== 0;
      if (wasInputPaused === isInputPaused)
        break;
      this._state = (t1 ^ 32) >>> 0;
      if (isInputPaused)
        this._onPause$0();
      else
        this._onResume$0();
      this._state = (this._state & 4294967263) >>> 0;
    }
    t1 = this._state;
    if ((t1 & 64) !== 0 && t1 < 128)
      this._pending.schedule$1(this);
  },
  static: {
"": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT",
}

},

_BufferingStreamSubscription__sendDone_sendDone: {"": "Closure;this_0",
  call$0: function() {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1._state;
    if ((t2 & 16) === 0)
      return;
    t1._state = (t2 | 42) >>> 0;
    t1._zone.runGuarded$1(t1._onDone);
    t1._state = (t1._state & 4294967263) >>> 0;
  }
},

_StreamImpl: {"": "Stream;",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var subscription = this._createSubscription$1(true === cancelOnError);
    subscription.onData$1(onData);
    subscription.onError$1(subscription, onError);
    subscription.onDone$1(onDone);
    return subscription;
  },
  _createSubscription$1: function(cancelOnError) {
    var t1, t2;
    t1 = $.Zone__current;
    t2 = cancelOnError ? 1 : 0;
    return new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
  },
  $asStream: null
},

_DelayedEvent: {"": "Object;next@"},

_DelayedData: {"": "_DelayedEvent;value,next",
  perform$1: function(dispatch) {
    dispatch._sendData$1(this.value);
  }
},

_DelayedDone: {"": "Object;",
  perform$1: function(dispatch) {
    dispatch._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw H.wrapException(new P.StateError("No events after a done."));
  }
},

_PendingEvents: {"": "Object;",
  schedule$1: function(dispatch) {
    var t1 = this._state;
    if (t1 === 1)
      return;
    if (t1 >= 1) {
      this._state = 1;
      return;
    }
    P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
    this._state = 1;
  },
  cancelSchedule$0: function() {
    if (this._state === 1)
      this._state = 3;
  }
},

_PendingEvents_schedule_closure: {"": "Closure;this_0,dispatch_1",
  call$0: function() {
    var t1, oldState;
    t1 = this.this_0;
    oldState = t1._state;
    t1._state = 0;
    if (oldState === 3)
      return;
    t1.handleNext$1(this.dispatch_1);
  }
},

_StreamImplEvents: {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(dispatch) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(dispatch);
  }
},

_cancelAndError_closure: {"": "Closure;future_0,error_1,stackTrace_2",
  call$0: function() {
    return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
  }
},

_cancelAndErrorClosure_closure: {"": "Closure;subscription_0,future_1",
  call$2: function(error, stackTrace) {
    return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
  },
  $is_args2: true
},

_cancelAndValue_closure: {"": "Closure;future_0,value_1",
  call$0: function() {
    return this.future_0._complete$1(this.value_1);
  }
},

Timer: {"": "Object;"},

_BaseZone: {"": "Object;",
  runGuarded$1: function(f) {
    var e, s, t1, exception;
    try {
      t1 = this.run$1(f);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  runUnaryGuarded$2: function(f, arg) {
    var e, s, t1, exception;
    try {
      t1 = this.runUnary$2(f, arg);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      return this.handleUncaughtError$2(e, s);
    }

  },
  bindCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindCallback_closure(this, registered);
    else
      return new P._BaseZone_bindCallback_closure0(this, registered);
  },
  bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
    var registered = this.registerUnaryCallback$1(f);
    if (runGuarded)
      return new P._BaseZone_bindUnaryCallback_closure(this, registered);
    else
      return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
  }
},

_BaseZone_bindCallback_closure: {"": "Closure;this_0,registered_1",
  call$0: function() {
    return this.this_0.runGuarded$1(this.registered_1);
  }
},

_BaseZone_bindCallback_closure0: {"": "Closure;this_2,registered_3",
  call$0: function() {
    return this.this_2.run$1(this.registered_3);
  }
},

_BaseZone_bindUnaryCallback_closure: {"": "Closure;this_0,registered_1",
  call$1: function(arg) {
    return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
  },
  $is_args1: true
},

_BaseZone_bindUnaryCallback_closure0: {"": "Closure;this_2,registered_3",
  call$1: function(arg) {
    return this.this_2.runUnary$2(this.registered_3, arg);
  },
  $is_args1: true
},

_rootHandleUncaughtError_closure: {"": "Closure;error_0,stackTrace_1",
  call$0: function() {
    P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
  }
},

_rootHandleUncaughtError__closure: {"": "Closure;error_2,stackTrace_3",
  call$0: function() {
    var t1, trace, t2;
    t1 = this.error_2;
    P.print("Uncaught Error: " + H.S(t1));
    trace = this.stackTrace_3;
    if (trace == null) {
      t2 = J.getInterceptor(t1);
      t2 = typeof t1 === "object" && t1 !== null && !!t2.$isError;
    } else
      t2 = false;
    if (t2)
      trace = t1.get$stackTrace();
    if (trace != null)
      P.print("Stack Trace: \n" + H.S(trace) + "\n");
    throw H.wrapException(t1);
  }
},

_RootZone: {"": "_BaseZone;",
  $index: function(_, key) {
    return;
  },
  handleUncaughtError$2: function(error, stackTrace) {
    return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
  },
  run$1: function(f) {
    return P._rootRun(this, null, this, f);
  },
  runUnary$2: function(f, arg) {
    return P._rootRunUnary(this, null, this, f, arg);
  },
  registerCallback$1: function(f) {
    return f;
  },
  registerUnaryCallback$1: function(f) {
    return f;
  }
}}],
["dart.collection", "dart:collection", , P, {
_defaultEquals: function(a, b) {
  return J.$eq(a, b);
},

_defaultHashCode: function(a) {
  return J.get$hashCode$(a);
},

HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._HashMap(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

HashSet_HashSet$identity: function($E) {
  var t1 = new P._IdentityHashSet(0, null, null, null, null);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

_iterableToString: function(iterable) {
  var parts, t1;
  t1 = $.get$_toStringVisiting();
  if (t1.contains$1(t1, iterable))
    return "(...)";
  t1 = $.get$_toStringVisiting();
  t1.add$1(t1, iterable);
  parts = [];
  try {
    P._iterablePartsToStrings(iterable, parts);
  } finally {
    t1 = $.get$_toStringVisiting();
    t1.remove$1(t1, iterable);
  }
  t1 = P.StringBuffer$("(");
  t1.writeAll$2(parts, ", ");
  t1.write$1(")");
  return t1._contents;
},

_iterablePartsToStrings: function(iterable, parts) {
  var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
  it = iterable.get$iterator(iterable);
  $length = 0;
  count = 0;
  while (true) {
    if (!($length < 80 || count < 3))
      break;
    if (!it.moveNext$0())
      return;
    next = H.S(it.get$current());
    parts.push(next);
    $length += next.length + 2;
    ++count;
  }
  if (!it.moveNext$0()) {
    if (count <= 5)
      return;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    ultimateString = parts.pop();
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    penultimateString = parts.pop();
  } else {
    penultimate = it.get$current();
    ++count;
    if (!it.moveNext$0()) {
      if (count <= 4) {
        parts.push(H.S(penultimate));
        return;
      }
      ultimateString = H.S(penultimate);
      if (0 >= parts.length)
        throw H.ioore(parts, 0);
      penultimateString = parts.pop();
      $length += ultimateString.length + 2;
    } else {
      ultimate = it.get$current();
      ++count;
      for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
        ultimate0 = it.get$current();
        ++count;
        if (count > 100) {
          while (true) {
            if (!($length > 75 && count > 3))
              break;
            if (0 >= parts.length)
              throw H.ioore(parts, 0);
            $length -= parts.pop().length + 2;
            --count;
          }
          parts.push("...");
          return;
        }
      }
      penultimateString = H.S(penultimate);
      ultimateString = H.S(ultimate);
      $length += ultimateString.length + penultimateString.length + 4;
    }
  }
  if (count > parts.length + 2) {
    $length += 5;
    elision = "...";
  } else
    elision = null;
  while (true) {
    if (!($length > 80 && parts.length > 3))
      break;
    if (0 >= parts.length)
      throw H.ioore(parts, 0);
    $length -= parts.pop().length + 2;
    if (elision == null) {
      $length += 5;
      elision = "...";
    }
  }
  if (elision != null)
    parts.push(elision);
  parts.push(penultimateString);
  parts.push(ultimateString);
},

LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
  var t1 = new P._LinkedHashMap(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$K, $V]);
  return t1;
},

LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
  var t1 = new P._LinkedHashSet(0, null, null, null, null, null, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  return t1;
},

Maps_mapToString: function(m) {
  var t1, result, i, t2;
  t1 = {};
  for (i = 0; i < $.get$Maps__toStringList().length; ++i) {
    t2 = $.get$Maps__toStringList();
    if (i >= t2.length)
      throw H.ioore(t2, i);
    if (t2[i] === m)
      return "{...}";
  }
  result = P.StringBuffer$("");
  try {
    $.get$Maps__toStringList().push(m);
    result.write$1("{");
    t1.first_0 = true;
    J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
    result.write$1("}");
  } finally {
    t1 = $.get$Maps__toStringList();
    if (0 >= t1.length)
      throw H.ioore(t1, 0);
    t1.pop();
  }
  return result.get$_contents();
},

_HashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$keys: function() {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.HashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_HashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._HashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._HashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._HashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        this._collection$_length = this._collection$_length + 1;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._collection$_length = this._collection$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw H.wrapException(P.ConcurrentModificationError$(this));
    }
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _addHashTableEntry$3: function(table, key, value) {
    if (table[key] == null) {
      this._collection$_length = this._collection$_length + 1;
      this._keys = null;
    }
    P._HashMap__setTableEntry(table, key, value);
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; i += 2)
      if (J.$eq(bucket[i], key))
        return i;
    return -1;
  },
  $isMap: true,
  static: {
_HashMap__setTableEntry: function(table, key, value) {
  if (value == null)
    table[key] = table;
  else
    table[key] = value;
},

_HashMap__newHashTable: function() {
  var table = Object.create(null);
  P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
  delete table["<non-identifier-key>"];
  return table;
}}

},

_HashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

HashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

HashMapKeyIterator: {"": "Object;_map,_keys,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashMap: {"": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$length: function(_) {
    return this._collection$_length;
  },
  get$isEmpty: function(_) {
    return this._collection$_length === 0;
  },
  get$keys: function() {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return t1;
  },
  get$values: function(_) {
    var t1 = new P.LinkedHashMapKeyIterable(this);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_LinkedHashMap", 0)]);
    return H.MappedIterable_MappedIterable(t1, new P._LinkedHashMap_values_closure(this), H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
  },
  containsKey$1: function(key) {
    var nums, rest;
    if ((key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_collection$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        strings = P._LinkedHashMap__newHashTable();
        this._strings = strings;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        nums = P._LinkedHashMap__newHashTable();
        this._nums = nums;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index, cell;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell._collection$_value);
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._collection$_next;
    }
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_collection$_value(value);
  },
  _removeHashTableEntry$2: function(table, key) {
    var cell;
    if (table == null)
      return;
    cell = table[key];
    if (cell == null)
      return;
    this._unlinkCell$1(cell);
    delete table[key];
    return cell.get$_collection$_value();
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = new P.LinkedHashMapCell(key, value, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_collection$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_collection$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_collection$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._collection$_length = this._collection$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  _computeHashCode$1: function(key) {
    return J.get$hashCode$(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, key) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_key(), key))
        return i;
    return -1;
  },
  toString$0: function(_) {
    return P.Maps_mapToString(this);
  },
  $isMap: true,
  static: {
_LinkedHashMap__newHashTable: function() {
  var table = Object.create(null);
  table["<non-identifier-key>"] = table;
  delete table["<non-identifier-key>"];
  return table;
}}

},

_LinkedHashMap_values_closure: {"": "Closure;this_0",
  call$1: function(each) {
    var t1 = this.this_0;
    return t1.$index(t1, each);
  },
  $is_args1: true
},

LinkedHashMapCell: {"": "Object;_key<,_collection$_value@,_collection$_next@,_previous@"},

LinkedHashMapKeyIterable: {"": "IterableBase;_map",
  get$length: function(_) {
    return this._map._collection$_length;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    t1 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
    t1._cell = t1._map._first;
    return t1;
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = cell._collection$_next;
    }
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

LinkedHashMapKeyIterator: {"": "Object;_map,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_key();
        this._cell = this._cell.get$_collection$_next();
        return true;
      }
    }
  }
},

_HashSet: {"": "_HashSetBase;",
  get$iterator: function(_) {
    return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    rest = this._rest;
    if (rest == null)
      return;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return;
    return J.$index$asx(bucket, index);
  },
  add$1: function(_, element) {
    var rest, table, hash, bucket;
    rest = this._rest;
    if (rest == null) {
      table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      this._rest = table;
      rest = table;
    }
    hash = this._computeHashCode$1(element);
    bucket = rest[hash];
    if (bucket == null)
      rest[hash] = [element];
    else {
      if (this._findBucketIndex$2(bucket, element) >= 0)
        return false;
      bucket.push(element);
    }
    this._collection$_length = this._collection$_length + 1;
    this._elements = null;
    return true;
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    rest = this._rest;
    if (rest == null)
      return false;
    bucket = rest[this._computeHashCode$1(object)];
    index = this._findBucketIndex$2(bucket, object);
    if (index < 0)
      return false;
    this._collection$_length = this._collection$_length - 1;
    this._elements = null;
    bucket.splice(index, 1);
    return true;
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = P.List_List(this._collection$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i], element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

_IdentityHashSet: {"": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
  _computeHashCode$1: function(key) {
    return H.objectHashCode(key) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i, t1;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i) {
      t1 = bucket[i];
      if (t1 == null ? element == null : t1 === element)
        return i;
    }
    return -1;
  },
  $as_HashSet: null
},

HashSetIterator: {"": "Object;_set,_elements,_offset,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._collection$_current = null;
      return false;
    } else {
      this._collection$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
},

_LinkedHashSet: {"": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
  get$iterator: function(_) {
    var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
    t1._cell = t1._set._first;
    return t1;
  },
  get$length: function(_) {
    return this._collection$_length;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    }
  },
  lookup$1: function(object) {
    var t1, rest, bucket, index;
    if (!(typeof object === "string" && object !== "__proto__"))
      t1 = typeof object === "number" && (object & 0x3ffffff) === object;
    else
      t1 = true;
    if (t1)
      return this.contains$1(this, object) ? object : null;
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_collection$_element());
      if (modifications !== this._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(this));
      cell = cell._collection$_next;
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      return this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      return this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
      this.add$1(this, t1._current);
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return false;
    table[element] = this._newLinkedCell$1(element);
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = new P.LinkedHashSetCell(element, null, null);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_collection$_next(cell);
      this._last = cell;
    }
    this._collection$_length = this._collection$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _computeHashCode$1: function(element) {
    return J.get$hashCode$(element) & 0x3ffffff;
  },
  _findBucketIndex$2: function(bucket, element) {
    var $length, i;
    if (bucket == null)
      return -1;
    $length = bucket.length;
    for (i = 0; i < $length; ++i)
      if (J.$eq(bucket[i].get$_collection$_element(), element))
        return i;
    return -1;
  },
  $as_HashSetBase: null,
  $isEfficientLength: true
},

LinkedHashSetCell: {"": "Object;_collection$_element<,_collection$_next@,_previous@"},

LinkedHashSetIterator: {"": "Object;_set,_modifications,_cell,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw H.wrapException(P.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = t1.get$_collection$_element();
        this._cell = this._cell.get$_collection$_next();
        return true;
      }
    }
  }
},

_HashSetBase: {"": "IterableBase;",
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  $asIterableBase: null,
  $isEfficientLength: true
},

IterableBase: {"": "Object;",
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  toList$1$growable: function(_, growable) {
    return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  get$single: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw H.wrapException(new P.StateError("No elements"));
    result = it.get$current();
    if (it.moveNext$0())
      throw H.wrapException(new P.StateError("More than one element"));
    return result;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (index < 0)
      throw H.wrapException(P.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw H.wrapException(P.RangeError$value(index));
  },
  toString$0: function(_) {
    return P._iterableToString(this);
  }
},

ListBase: {"": "Object+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

ListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  forEach$1: function(receiver, action) {
    var $length, i;
    $length = this.get$length(receiver);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(receiver, i));
      if ($length !== this.get$length(receiver))
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
    }
  },
  where$1: function(receiver, test) {
    var t1 = new H.WhereIterable(receiver, test);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    return t1;
  },
  toString$0: function(receiver) {
    var result, t1;
    t1 = $.get$_toStringVisiting();
    if (t1.contains$1(t1, receiver))
      return "[...]";
    result = P.StringBuffer$("");
    try {
      t1 = $.get$_toStringVisiting();
      t1.add$1(t1, receiver);
      result.write$1("[");
      result.writeAll$2(receiver, ", ");
      result.write$1("]");
    } finally {
      t1 = $.get$_toStringVisiting();
      t1.remove$1(t1, receiver);
    }
    return result.get$_contents();
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

Maps_mapToString_closure: {"": "Closure;box_0,result_1",
  call$2: function(k, v) {
    var t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t1.write$1(k);
    t1.write$1(": ");
    t1.write$1(v);
  },
  $is_args2: true
},

ListQueue: {"": "IterableBase;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return P._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw H.ioore(t1, i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(this));
    }
  },
  get$length: function(_) {
    return (this._tail - this._head & this._table.length - 1) >>> 0;
  },
  toString$0: function(_) {
    return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
  },
  addFirst$1: function(element) {
    var t1, t2;
    this._head = (this._head - 1 & this._table.length - 1) >>> 0;
    t1 = this._table;
    t2 = this._head;
    if (t2 < 0 || t2 >= t1.length)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    if (t2 === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw H.wrapException(P.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw H.ioore(t1, t2);
    t1[t2] = element;
    this._tail = (t2 + 1 & t3 - 1) >>> 0;
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = P.List_List(this._table.length * 2, H.getRuntimeTypeArgument(this, "ListQueue", 0));
    H.setRuntimeTypeInfo(newTable, [H.getRuntimeTypeArgument(this, "ListQueue", 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
    t1 = this._head;
    t2 = this._table;
    H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  ListQueue$1: function(initialCapacity, $E) {
    var t1 = P.List_List(8, $E);
    H.setRuntimeTypeInfo(t1, [$E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $isEfficientLength: true,
  static: {
"": "ListQueue__INITIAL_CAPACITY",
ListQueue$: function(initialCapacity, $E) {
  var t1 = new P.ListQueue(null, 0, 0, 0);
  H.setRuntimeTypeInfo(t1, [$E]);
  t1.ListQueue$1(initialCapacity, $E);
  return t1;
}}

},

_ListQueueIterator: {"": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
  get$current: function() {
    return this._collection$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      H.throwExpression(P.ConcurrentModificationError$(t1));
    t2 = this._collection$_position;
    if (t2 === this._end) {
      this._collection$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw H.ioore(t3, t2);
    this._collection$_current = t3[t2];
    this._collection$_position = (this._collection$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  },
  static: {
_ListQueueIterator$: function(queue) {
  return new P._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
}}

}}],
["dart.core", "dart:core", , P, {
_symbolToString: function(symbol) {
  return H.Symbol_getName(symbol);
},

Comparable_compare: function(a, b) {
  return J.compareTo$1$ns(a, b);
},

Error_safeToString: function(object) {
  var buffer, t1, i, codeUnit, t2, charCodes;
  if (typeof object === "number" || typeof object === "boolean" || null == object)
    return J.toString$0(object);
  if (typeof object === "string") {
    buffer = new P.StringBuffer("");
    buffer._contents = "\"";
    for (t1 = object.length, i = 0; i < t1; ++i) {
      codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
      if (codeUnit <= 31)
        if (codeUnit === 10)
          buffer._contents = buffer._contents + "\\n";
        else if (codeUnit === 13)
          buffer._contents = buffer._contents + "\\r";
        else if (codeUnit === 9)
          buffer._contents = buffer._contents + "\\t";
        else {
          buffer._contents = buffer._contents + "\\x";
          if (codeUnit < 16)
            buffer._contents = buffer._contents + "0";
          else {
            buffer._contents = buffer._contents + "1";
            codeUnit -= 16;
          }
          t2 = codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit;
          charCodes = P.List_List$filled(1, t2, J.JSInt);
          charCodes.$builtinTypeInfo = [J.JSInt];
          t2 = H.Primitives_stringFromCharCodes(charCodes);
          buffer._contents = buffer._contents + t2;
        }
      else if (codeUnit === 92)
        buffer._contents = buffer._contents + "\\\\";
      else if (codeUnit === 34)
        buffer._contents = buffer._contents + "\\\"";
      else {
        charCodes = P.List_List$filled(1, codeUnit, J.JSInt);
        charCodes.$builtinTypeInfo = [J.JSInt];
        t2 = H.Primitives_stringFromCharCodes(charCodes);
        buffer._contents = buffer._contents + t2;
      }
    }
    buffer._contents = buffer._contents + "\"";
    return buffer._contents;
  }
  return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
},

Exception_Exception: function(message) {
  return new P._ExceptionImplementation(message);
},

identical: function(a, b) {
  return a == null ? b == null : a === b;
},

identityHashCode: function(object) {
  return H.objectHashCode(object);
},

List_List: function($length, $E) {
  var result;
  if ($length == null)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + H.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
},

List_List$filled: function($length, fill, $E) {
  var result, t1, i;
  if ($length < 0)
    throw H.wrapException(P.ArgumentError$("Length must be a positive integer: " + $length + "."));
  result = H.Primitives_newFixedList($length);
  if ($length !== 0 && true)
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
},

List_List$from: function(other, growable, $E) {
  var list, t1, $length, fixedList, i;
  list = P.List_List(null, $E);
  H.setRuntimeTypeInfo(list, [$E]);
  for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = P.List_List($length, $E);
  H.setRuntimeTypeInfo(fixedList, [$E]);
  for (t1 = list.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw H.ioore(list, i);
    fixedList[i] = list[i];
  }
  return fixedList;
},

List_List$generate: function($length, generator, growable, $E) {
  var result, i, t1;
  if (growable) {
    result = [];
    H.setRuntimeTypeInfo(result, [$E]);
    C.JSArray_methods.set$length(result, $length);
  } else {
    result = P.List_List($length, $E);
    H.setRuntimeTypeInfo(result, [$E]);
  }
  for (i = 0; i < $length; ++i) {
    t1 = generator.call$1(i);
    if (i >= result.length)
      throw H.ioore(result, i);
    result[i] = t1;
  }
  return result;
},

print: function(object) {
  var line = J.toString$0(object);
  H.printToConsole(line);
},

NoSuchMethodError_toString_closure: {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if (t1.i_1 > 0)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(P._symbolToString(key));
  },
  $is_args2: true
},

Comparable: {"": "Object;"},

Duration: {"": "Object;_duration<",
  $add: function(_, other) {
    return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return C.JSNumber_methods.$gt(this._duration, other.get$_duration());
  },
  $ge: function(_, other) {
    return C.JSNumber_methods.$ge(this._duration, other.get$_duration());
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return this._duration & 0x1FFFFFFF;
  },
  compareTo$1: function(_, other) {
    return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new P.Duration_toString_twoDigits();
    t2 = this._duration;
    if (t2 < 0)
      return "-" + H.S(P.Duration$(0, 0, -t2, 0, 0, 0));
    twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 60000000), 60));
    twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods.$tdiv(t2, 1000000), 60));
    sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
    return H.S(C.JSNumber_methods.$tdiv(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
  },
  $isDuration: true,
  static: {
"": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO",
Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
  return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
}}

},

Duration_toString_sixDigits: {"": "Closure;",
  call$1: function(n) {
    var t1 = J.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return H.S(n);
    if (t1.$ge(n, 10000))
      return "0" + H.S(n);
    if (t1.$ge(n, 1000))
      return "00" + H.S(n);
    if (t1.$ge(n, 100))
      return "000" + H.S(n);
    if (t1.$gt(n, 10))
      return "0000" + H.S(n);
    return "00000" + H.S(n);
  },
  $is_args1: true
},

Duration_toString_twoDigits: {"": "Closure;",
  call$1: function(n) {
    if (J.$ge$n(n, 10))
      return H.S(n);
    return "0" + H.S(n);
  },
  $is_args1: true
},

Error: {"": "Object;",
  get$stackTrace: function() {
    return new H._StackTrace(this.$thrownJsError, null);
  },
  $isError: true
},

NullThrownError: {"": "Error;",
  toString$0: function(_) {
    return "Throw of null.";
  }
},

ArgumentError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + H.S(t1);
    return "Illegal argument(s)";
  },
  static: {
ArgumentError$: function(message) {
  return new P.ArgumentError(message);
}}

},

RangeError: {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + H.S(this.message);
  },
  static: {
RangeError$value: function(value) {
  return new P.RangeError("value " + H.S(value));
},

RangeError$range: function(value, start, end) {
  return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
}}

},

UnsupportedError: {"": "Error;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  static: {
UnsupportedError$: function(message) {
  return new P.UnsupportedError(message);
}}

},

UnimplementedError: {"": "Error;message",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
  },
  $isError: true,
  static: {
UnimplementedError$: function(message) {
  return new P.UnimplementedError(message);
}}

},

StateError: {"": "Error;message",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  },
  static: {
StateError$: function(message) {
  return new P.StateError(message);
}}

},

ConcurrentModificationError: {"": "Error;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
  },
  static: {
ConcurrentModificationError$: function(modifiedObject) {
  return new P.ConcurrentModificationError(modifiedObject);
}}

},

StackOverflowError: {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  },
  get$stackTrace: function() {
    return;
  },
  $isError: true
},

CyclicInitializationError: {"": "Error;variableName",
  toString$0: function(_) {
    return "Reading static variable '" + this.variableName + "' during its initialization";
  },
  static: {
CyclicInitializationError$: function(variableName) {
  return new P.CyclicInitializationError(variableName);
}}

},

_ExceptionImplementation: {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + H.S(t1);
  }
},

Expando: {"": "Object;name",
  toString$0: function(_) {
    return "Expando:" + H.S(this.name);
  },
  $index: function(_, object) {
    var values = H.Primitives_getProperty(object, "expando$values");
    return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = H.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = new P.Object();
      H.Primitives_setProperty(object, "expando$values", values);
    }
    H.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = H.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = t1 + 1;
      key = "expando$key$" + t1;
      H.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  },
  static: {
"": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount",
}

},

Function: {"": "Object;"},

Iterator: {"": "Object;"},

Null: {"": "Object;",
  toString$0: function(_) {
    return "null";
  }
},

Object: {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return H.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return H.Primitives_objectToString(this);
  }
},

StackTrace: {"": "Object;"},

StringBuffer: {"": "Object;_contents<",
  get$length: function(_) {
    return this._contents.length;
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : H.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    iterator = J.get$iterator$ax(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator.length === 0)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      this.write$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : H.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  },
  static: {
StringBuffer$: function($content) {
  var t1 = new P.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
}}

},

Symbol: {"": "Object;"}}],
["dart.dom.html", "dart:html", , W, {
AnchorElement_AnchorElement: function(href) {
  var e = document.createElement("a", null);
  return e;
},

Element_Element$html: function(html, treeSanitizer, validator) {
  var fragment, t1;
  fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
  fragment.toString;
  t1 = new W._ChildNodeListLazy(fragment);
  t1 = t1.where$1(t1, new W.Element_Element$html_closure());
  return t1.get$single(t1);
},

_ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
  return document.createElement(tag);
},

ImageElement_ImageElement: function(height, src, width) {
  var e = document.createElement("img", null);
  J.set$src$x(e, src);
  return e;
},

Window__isDartLocation: function(thing) {
  var t1, t2, exception;
  try {
    t1 = thing;
    t2 = J.getInterceptor(t1);
    return typeof t1 === "object" && t1 !== null && !!t2.$isLocation;
  } catch (exception) {
    H.unwrapException(exception);
    return false;
  }

},

_wrapZone: function(callback) {
  var t1 = $.Zone__current;
  if (t1 === C.C__RootZone)
    return callback;
  return t1.bindUnaryCallback$2$runGuarded(callback, true);
},

HtmlElement: {"": "Element;", "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseFontElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"},

AnchorElement: {"": "HtmlElement;hostname=,href},port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "HTMLAnchorElement"
},

AreaElement: {"": "HtmlElement;hostname=,href},port=,protocol=", "%": "HTMLAreaElement"},

BaseElement: {"": "HtmlElement;href}", "%": "HTMLBaseElement"},

BodyElement: {"": "HtmlElement;",
  get$onLoad: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $isBodyElement: true,
  "%": "HTMLBodyElement"
},

ButtonElement: {"": "HtmlElement;name=,value=", "%": "HTMLButtonElement"},

CanvasElement: {"": "HtmlElement;height},width}",
  getContext$2: function(receiver, contextId, attrs) {
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, null);
  },
  "%": "HTMLCanvasElement"
},

CanvasRenderingContext: {"": "Interceptor;", "%": ";CanvasRenderingContext"},

CanvasRenderingContext2D: {"": "CanvasRenderingContext;fillStyle},globalAlpha},lineWidth}",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  clearRect$4: function(receiver, x, y, width, height) {
    return receiver.clearRect(x, y, width, height);
  },
  closePath$0: function(receiver) {
    return receiver.closePath();
  },
  fill$1: function(receiver, winding) {
    return receiver.fill(winding);
  },
  fill$0: function($receiver) {
    return $receiver.fill();
  },
  fillRect$4: function(receiver, x, y, width, height) {
    return receiver.fillRect(x, y, width, height);
  },
  arc$6: function(receiver, x, y, radius, startAngle, endAngle, anticlockwise) {
    receiver.arc(x, y, radius, startAngle, endAngle, anticlockwise);
  },
  arc$5: function($receiver, x, y, radius, startAngle, endAngle) {
    return this.arc$6($receiver, x, y, radius, startAngle, endAngle, false);
  },
  drawImageToRect$3$sourceRect: function(receiver, source, destRect, sourceRect) {
    receiver.drawImage(source, sourceRect.left, sourceRect.top, sourceRect.width, sourceRect.height, destRect.left, destRect.top, destRect.width, destRect.height);
  },
  drawImageScaled$5: function(receiver, source, destX, destY, destWidth, destHeight) {
    return receiver.drawImage(source, destX, destY, destWidth, destHeight);
  },
  drawImageScaledFromSource$9: function(receiver, source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight) {
    return receiver.drawImage(source, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
  },
  fillText$4: function(receiver, text, x, y, maxWidth) {
    receiver.fillText(text, x, y);
  },
  fillText$3: function($receiver, text, x, y) {
    return this.fillText$4($receiver, text, x, y, null);
  },
  "%": "CanvasRenderingContext2D"
},

CharacterData: {"": "Node;length=", "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"},

Document: {"": "Node;", "%": "SVGDocument;Document"},

DomException: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMException"
},

Element: {"": "Node;",
  get$attributes: function(receiver) {
    return new W._ElementAttributeMap(receiver);
  },
  toString$0: function(receiver) {
    return receiver.localName;
  },
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var t1, t2, base, contextElement, fragment;
    if (treeSanitizer == null) {
      if ($.Element__defaultValidator == null) {
        t1 = [];
        H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
        t1 = new W.NodeValidatorBuilder(t1);
        t2 = t1._validators;
        t2.push(W._Html5NodeValidator$(null));
        t2.push(W._TemplatingNodeValidator$());
        $.Element__defaultValidator = t1;
      }
      validator = $.Element__defaultValidator;
      t1 = $.Element__defaultSanitizer;
      if (t1 == null)
        $.Element__defaultSanitizer = new W._ValidatingTreeSanitizer(validator);
      else
        t1.validator = validator;
      treeSanitizer = $.Element__defaultSanitizer;
    }
    if ($.Element__parseDocument == null) {
      $.Element__parseDocument = document.implementation.createHTMLDocument("");
      $.Element__parseRange = $.Element__parseDocument.createRange();
      base = $.Element__parseDocument.createElement("base", null);
      J.set$href$x(base, document.baseURI);
      $.Element__parseDocument.head.appendChild(base);
    }
    t1 = $.Element__parseDocument;
    if (!!this.$isBodyElement)
      contextElement = t1.body;
    else {
      contextElement = t1.createElement(receiver.tagName, null);
      $.Element__parseDocument.body.appendChild(contextElement);
    }
    if ("createContextualFragment" in window.Range.prototype) {
      $.Element__parseRange.selectNodeContents(contextElement);
      fragment = $.Element__parseRange.createContextualFragment(html);
    } else {
      contextElement.innerHTML = html;
      fragment = $.Element__parseDocument.createDocumentFragment();
      for (; t1 = contextElement.firstChild, t1 != null;)
        fragment.appendChild(t1);
    }
    t1 = $.Element__parseDocument.body;
    if (contextElement == null ? t1 != null : contextElement !== t1)
      J.remove$0$ax(contextElement);
    treeSanitizer.sanitizeTree$1(fragment);
    document.adoptNode(fragment);
    return fragment;
  },
  createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
    return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
  },
  set$innerHtml: function(receiver, html) {
    this.setInnerHtml$1(receiver, html);
  },
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  get$onLoad: function(receiver) {
    var t1 = new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_load._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    return t1;
  },
  $isElement: true,
  "%": ";Element"
},

EmbedElement: {"": "HtmlElement;height},name=,src},width}", "%": "HTMLEmbedElement"},

ErrorEvent: {"": "Event;error=", "%": "ErrorEvent"},

Event: {"": "Interceptor;", "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeLoadEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|ProgressEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechInputEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent|XMLHttpRequestProgressEvent;Event"},

EventTarget: {"": "Interceptor;",
  addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
  },
  "%": "MediaStream;EventTarget"
},

FieldSetElement: {"": "HtmlElement;name=", "%": "HTMLFieldSetElement"},

FormElement: {"": "HtmlElement;length=,name=", "%": "HTMLFormElement"},

HtmlDocument: {"": "Document;body=", "%": "HTMLDocument"},

IFrameElement: {"": "HtmlElement;height},name=,src},width}", "%": "HTMLIFrameElement"},

ImageElement: {"": "HtmlElement;height},src},width}", "%": "HTMLImageElement"},

InputElement: {"": "HtmlElement;height},name=,src},value=,width}", $isElement: true, "%": "HTMLInputElement"},

KeyboardEvent: {"": "UIEvent;",
  get$keyCode: function(receiver) {
    return receiver.keyCode;
  },
  "%": "KeyboardEvent"
},

KeygenElement: {"": "HtmlElement;name=", "%": "HTMLKeygenElement"},

LIElement: {"": "HtmlElement;value=", "%": "HTMLLIElement"},

LinkElement: {"": "HtmlElement;href}", "%": "HTMLLinkElement"},

Location: {"": "Interceptor;hostname=,port=,protocol=",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  $isLocation: true,
  "%": "Location"
},

MapElement: {"": "HtmlElement;name=", "%": "HTMLMapElement"},

MediaElement: {"": "HtmlElement;error=,src}", "%": "HTMLAudioElement;HTMLMediaElement"},

MetaElement: {"": "HtmlElement;name=", "%": "HTMLMetaElement"},

MeterElement: {"": "HtmlElement;value=", "%": "HTMLMeterElement"},

MidiOutput: {"": "MidiPort;",
  send$2: function(receiver, data, timestamp) {
    return receiver.send(data, timestamp);
  },
  send$1: function($receiver, data) {
    return $receiver.send(data);
  },
  "%": "MIDIOutput"
},

MidiPort: {"": "EventTarget;", "%": "MIDIInput;MIDIPort"},

Node: {"": "EventTarget;lastChild=,nodeType=",
  get$nodes: function(receiver) {
    return new W._ChildNodeListLazy(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  toString$0: function(receiver) {
    var t1 = receiver.nodeValue;
    return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
  },
  "%": "DocumentFragment|DocumentType|Entity|Notation|ShadowRoot;Node"
},

NodeList: {"": "Interceptor_ListMixin_ImmutableListMixin;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "NodeList|RadioNodeList"
},

ObjectElement: {"": "HtmlElement;height},name=,width}", "%": "HTMLObjectElement"},

OptionElement: {"": "HtmlElement;value=", "%": "HTMLOptionElement"},

OutputElement: {"": "HtmlElement;name=,value=", "%": "HTMLOutputElement"},

ParamElement: {"": "HtmlElement;name=,value=", "%": "HTMLParamElement"},

ProgressElement: {"": "HtmlElement;position=,value=", "%": "HTMLProgressElement"},

Range: {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "Range"
},

ScriptElement0: {"": "HtmlElement;src}", "%": "HTMLScriptElement"},

SelectElement: {"": "HtmlElement;length=,name=,value=", "%": "HTMLSelectElement"},

SourceElement: {"": "HtmlElement;src}", "%": "HTMLSourceElement"},

SpeechRecognitionError: {"": "Event;error=", "%": "SpeechRecognitionError"},

TableElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var table, fragment, t1;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1.addAll$1(t1, J.get$nodes$x(table));
    return fragment;
  },
  "%": "HTMLTableElement"
},

TableRowElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section, row;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    section.toString;
    t1 = new W._ChildNodeListLazy(section);
    row = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    row.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(row));
    return fragment;
  },
  "%": "HTMLTableRowElement"
},

TableSectionElement: {"": "HtmlElement;",
  createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment, t1, section;
    if ("createContextualFragment" in window.Range.prototype)
      return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
    fragment = document.createDocumentFragment();
    t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
    t1.toString;
    t1 = new W._ChildNodeListLazy(t1);
    section = t1.get$single(t1);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    section.toString;
    t1.addAll$1(t1, new W._ChildNodeListLazy(section));
    return fragment;
  },
  "%": "HTMLTableSectionElement"
},

TemplateElement: {"": "HtmlElement;",
  setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
    var fragment;
    receiver.textContent = null;
    fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
    receiver.content.appendChild(fragment);
  },
  setInnerHtml$1: function($receiver, html) {
    return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
  },
  $isTemplateElement: true,
  "%": "HTMLTemplateElement"
},

TextAreaElement: {"": "HtmlElement;name=,value=", "%": "HTMLTextAreaElement"},

TrackElement: {"": "HtmlElement;src}", "%": "HTMLTrackElement"},

UIEvent: {"": "Event;", "%": "CompositionEvent|DragEvent|FocusEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|SVGZoomEvent|TextEvent|TouchEvent|WheelEvent;UIEvent"},

VideoElement: {"": "MediaElement;height},width}", "%": "HTMLVideoElement"},

Window: {"": "EventTarget;",
  get$animationFrame: function(receiver) {
    var t1, completer;
    t1 = J.JSNumber;
    completer = new P._AsyncCompleter(P._Future$(t1));
    H.setRuntimeTypeInfo(completer, [t1]);
    this._ensureRequestAnimationFrame$0(receiver);
    this._requestAnimationFrame$1(receiver, W._wrapZone(new W.Window_animationFrame_closure(completer)));
    return completer.future;
  },
  get$location: function(receiver) {
    var result = receiver.location;
    if (W.Window__isDartLocation(result) === true)
      return result;
    if (null == receiver._location_wrapper)
      receiver._location_wrapper = new W._LocationWrapper(result);
    return receiver._location_wrapper;
  },
  _requestAnimationFrame$1: function(receiver, callback) {
    return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
  },
  _ensureRequestAnimationFrame$0: function(receiver) {
    if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
      return;
      (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(receiver);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  "%": "DOMWindow|Window"
},

_Attr: {"": "Node;name=,value=", "%": "Attr"},

_NamedNodeMap: {"": "Interceptor_ListMixin_ImmutableListMixin0;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1 = receiver.length;
    if (index >>> 0 !== index || index >= t1)
      throw H.wrapException(P.RangeError$range(index, 0, t1));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
  },
  elementAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw H.ioore(receiver, index);
    return receiver[index];
  },
  $asList: function() {
    return [W.Node];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "MozNamedAttrMap|NamedNodeMap"
},

Console: {"": "Object;",
  error$1: function(_, arg) {
    return typeof console != "undefined" ? console.error(arg) : null;
  },
  get$error: function(_receiver) {
    return new W.BoundClosure$i1(this, W.Console.prototype.error$1, _receiver, "error$1");
  },
  static: {
"": "Console__safeConsole",
}

},

Element_Element$html_closure: {"": "Closure;",
  call$1: function(e) {
    var t1 = J.getInterceptor(e);
    return typeof e === "object" && e !== null && !!t1.$isElement;
  },
  $is_args1: true
},

_ChildNodeListLazy: {"": "ListBase;_this",
  get$single: function(_) {
    var t1, l;
    t1 = this._this;
    l = t1.childNodes.length;
    if (l === 0)
      throw H.wrapException(new P.StateError("No elements"));
    if (l > 1)
      throw H.wrapException(new P.StateError("More than one element"));
    return t1.firstChild;
  },
  addAll$1: function(_, iterable) {
    var t1, t2, len, i;
    t1 = iterable._this;
    t2 = this._this;
    if (t1 !== t2)
      for (len = t1.childNodes.length, i = 0; i < len; ++i)
        t2.appendChild(t1.firstChild);
    return;
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw H.ioore(t2, index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return C.NodeList_methods.get$iterator(this._this.childNodes);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw H.ioore(t1, index);
    return t1[index];
  },
  $asList: function() {
    return [W.Node];
  }
},

Interceptor_ListMixin: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin: {"": "Interceptor_ListMixin+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

Window_animationFrame_closure: {"": "Closure;completer_0",
  call$1: function(time) {
    var t1 = this.completer_0.future;
    if (t1._state !== 0)
      H.throwExpression(P.StateError$("Future already completed"));
    t1._asyncComplete$1(time);
  },
  $is_args1: true
},

Interceptor_ListMixin0: {"": "Interceptor+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

Interceptor_ListMixin_ImmutableListMixin0: {"": "Interceptor_ListMixin0+ImmutableListMixin;", $asList: null, $isList: true, $isEfficientLength: true},

_AttributeMap: {"": "Object;",
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
      key = t1._current;
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._element.attributes;
    keys = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(keys, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(J.get$name$x(t1));
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._element.attributes;
    values = P.List_List(null, J.JSString);
    H.setRuntimeTypeInfo(values, [J.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw H.ioore(attributes, i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push(J.get$value$x(t1));
    }
    return values;
  },
  $isMap: true,
  $asMap: function() {
    return [J.JSString, J.JSString];
  }
},

_ElementAttributeMap: {"": "_AttributeMap;_element",
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
},

EventStreamProvider: {"": "Object;_eventType"},

_EventStream: {"": "Stream;_target,_eventType,_useCapture",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
    H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "_EventStream", 0)]);
    t1._tryResume$0();
    return t1;
  },
  $asStream: null
},

_ElementEventStreamImpl: {"": "_EventStream;_target,_eventType,_useCapture", $as_EventStream: null},

_EventStreamSubscription: {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this._target == null)
      return;
    this._unlisten$0();
    this._target = null;
    this._onData = null;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && this._pauseCount <= 0)
      J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _unlisten$0: function() {
    var t1 = this._onData;
    if (t1 != null)
      J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  $asStreamSubscription: null
},

_Html5NodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = $.get$_Html5NodeValidator__allowedElements();
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1, validator;
    tagName = element.tagName;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    validator = t1.$index(t1, tagName + "::" + attributeName);
    if (validator == null) {
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(t1, "*::" + attributeName);
    }
    if (validator == null)
      return false;
    return validator.call$4(element, attributeName, value, this);
  },
  _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
    var t1, attr, t2;
    t1 = $.get$_Html5NodeValidator__attributeValidators();
    if (t1.get$isEmpty(t1)) {
      for (t1 = new H.ListIterator(C.List_1GN, 261, 0, null); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__standardAttributeValidator$closure);
      }
      for (t1 = new H.ListIterator(C.List_yrN, 12, 0, null); t1.moveNext$0();) {
        attr = t1._current;
        t2 = $.get$_Html5NodeValidator__attributeValidators();
        t2.$indexSet(t2, attr, W._Html5NodeValidator__uriAttributeValidator$closure);
      }
    }
  },
  static: {
"": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators",
_Html5NodeValidator$: function(uriPolicy) {
  var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), C.Window_methods.get$location(window));
  t1 = new W._Html5NodeValidator(t1);
  t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
  return t1;
},

_Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
  return true;
},

_Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
  return context.get$uriPolicy().allowsUri$1(value);
}}

},

ImmutableListMixin: {"": "Object;",
  get$iterator: function(receiver) {
    return W.FixedSizeListIterator$(receiver);
  },
  $isList: true,
  $asList: null,
  $isEfficientLength: true
},

NodeValidatorBuilder: {"": "Object;_validators",
  allowsElement$1: function(element) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
  },
  allowsAttribute$3: function(element, attributeName, value) {
    return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
  }
},

NodeValidatorBuilder_allowsElement_closure: {"": "Closure;element_0",
  call$1: function(v) {
    return v.allowsElement$1(this.element_0);
  },
  $is_args1: true
},

NodeValidatorBuilder_allowsAttribute_closure: {"": "Closure;element_0,attributeName_1,value_2",
  call$1: function(v) {
    return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
  },
  $is_args1: true
},

_SimpleNodeValidator: {"": "Object;uriPolicy<",
  allowsElement$1: function(element) {
    var t1 = this.allowedElements;
    return t1.contains$1(t1, element.tagName);
  },
  allowsAttribute$3: function(element, attributeName, value) {
    var tagName, t1;
    tagName = element.tagName;
    t1 = this.allowedUriAttributes;
    if (t1.contains$1(t1, tagName + "::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else if (t1.contains$1(t1, "*::" + attributeName))
      return this.uriPolicy.allowsUri$1(value);
    else {
      t1 = this.allowedAttributes;
      if (t1.contains$1(t1, tagName + "::" + attributeName))
        return true;
      else if (t1.contains$1(t1, "*::" + attributeName))
        return true;
      else if (t1.contains$1(t1, tagName + "::*"))
        return true;
      else if (t1.contains$1(t1, "*::*"))
        return true;
    }
    return false;
  }
},

_TemplatingNodeValidator: {"": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
  allowsAttribute$3: function(element, attributeName, value) {
    var t1;
    if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
      return true;
    if (attributeName === "template" && value === "")
      return true;
    if (new W._ElementAttributeMap(element)._element.getAttribute("template") === "") {
      t1 = this._templateAttrs;
      return t1.contains$1(t1, attributeName);
    }
    return false;
  },
  static: {
"": "_TemplatingNodeValidator__TEMPLATE_ATTRS",
_TemplatingNodeValidator$: function() {
  var t1, t2, t3, t4;
  t1 = new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure());
  H.setRuntimeTypeInfo(t1, [null, null]);
  t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t2.addAll$1(t2, ["TEMPLATE"]);
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t3.addAll$1(t3, t1);
  t1 = t3;
  t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, J.JSString);
  t4.addAll$1(t4, C.List_wSV);
  return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
}}

},

_TemplatingNodeValidator_closure: {"": "Closure;",
  call$1: function(attr) {
    return "TEMPLATE::" + H.S(attr);
  },
  $is_args1: true
},

_SvgNodeValidator: {"": "Object;",
  allowsElement$1: function(element) {
    var t1 = J.getInterceptor(element);
    if (!!t1.$isScriptElement)
      return false;
    if (!!t1.$isSvgElement)
      return true;
    return false;
  },
  allowsAttribute$3: function(element, attributeName, value) {
    if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
      return false;
    return this.allowsElement$1(element);
  }
},

FixedSizeListIterator: {"": "Object;_array,_html$_length,_position,_html$_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = this._position + 1;
    t1 = this._html$_length;
    if (nextPosition < t1) {
      this._html$_current = J.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._html$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._html$_current;
  },
  static: {
FixedSizeListIterator$: function(array) {
  return new W.FixedSizeListIterator(array, J.get$length$asx(array), -1, null);
}}

},

_LocationWrapper: {"": "Object;_ptr",
  get$hostname: function(_) {
    return this._ptr.hostname;
  },
  get$port: function(_) {
    return this._ptr.port;
  },
  get$protocol: function(_) {
    return this._ptr.protocol;
  },
  toString$0: function(_) {
    return this._ptr.toString();
  },
  $isLocation: true
},

NodeValidator: {"": "Object;"},

_SameOriginUriPolicy: {"": "Object;_hiddenAnchor,_loc",
  allowsUri$1: function(uri) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._hiddenAnchor;
    t2 = J.getInterceptor$x(t1);
    t2.set$href(t1, uri);
    t3 = t2.get$hostname(t1);
    t4 = this._loc;
    t5 = J.getInterceptor$x(t4);
    t6 = t5.get$hostname(t4);
    if (t3 == null ? t6 == null : t3 === t6) {
      t3 = t2.get$port(t1);
      t6 = t5.get$port(t4);
      if (t3 == null ? t6 == null : t3 === t6) {
        t3 = t2.get$protocol(t1);
        t4 = t5.get$protocol(t4);
        t4 = t3 == null ? t4 == null : t3 === t4;
        t3 = t4;
      } else
        t3 = false;
    } else
      t3 = false;
    if (!t3)
      t1 = t2.get$hostname(t1) === "" && t2.get$port(t1) === "" && t2.get$protocol(t1) === ":";
    else
      t1 = true;
    return t1;
  }
},

_ValidatingTreeSanitizer: {"": "Object;validator",
  sanitizeTree$1: function(node) {
    new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
  },
  sanitizeNode$1: function(node) {
    var t1, attrs, t2, t3, isAttr, keys, i, $name, t4;
    t1 = J.getInterceptor$x(node);
    switch (t1.get$nodeType(node)) {
      case 1:
        attrs = t1.get$attributes(node);
        if (!this.validator.allowsElement$1(node)) {
          window;
          t2 = $.get$Console__safeConsole();
          t3 = "Removing disallowed element <" + node.tagName + ">";
          t2.toString;
          if (typeof console != "undefined")
            console.warn(t3);
          t1.remove$0(node);
          break;
        }
        t2 = attrs._element;
        isAttr = t2.getAttribute("is");
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
            window;
            t2 = $.get$Console__safeConsole();
            t3 = "Removing disallowed type extension <" + node.tagName + " is=\"" + isAttr + "\">";
            t2.toString;
            if (typeof console != "undefined")
              console.warn(t3);
            t1.remove$0(node);
            break;
          }
        t3 = attrs.get$keys();
        keys = P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "JSArray", 0));
        for (i = attrs.get$keys().length - 1; i >= 0; --i) {
          if (i >= keys.length)
            throw H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
            window;
            t3 = $.get$Console__safeConsole();
            t4 = "Removing disallowed attribute <" + node.tagName + " " + $name + "=\"" + t2.getAttribute($name) + "\">";
            t3.toString;
            if (typeof console != "undefined")
              console.warn(t4);
            t2.getAttribute($name);
            t2.removeAttribute($name);
          }
        }
        if (typeof node === "object" && node !== null && !!t1.$isTemplateElement)
          this.sanitizeTree$1(node.content);
        break;
      case 8:
      case 11:
      case 3:
      case 4:
        break;
      default:
        t1.remove$0(node);
    }
  }
},

_ValidatingTreeSanitizer_sanitizeTree_walk: {"": "Closure;this_0",
  call$1: function(node) {
    var child, nextChild;
    this.this_0.sanitizeNode$1(node);
    child = J.get$lastChild$x(node);
    for (; child != null; child = nextChild) {
      nextChild = child.previousSibling;
      this.call$1(child);
    }
  },
  $is_args1: true
}}],
["dart.dom.svg", "dart:svg", , P, {
FEBlendElement: {"": "SvgElement;x=,y=", "%": "SVGFEBlendElement"},

FEColorMatrixElement: {"": "SvgElement;x=,y=", "%": "SVGFEColorMatrixElement"},

FEComponentTransferElement: {"": "SvgElement;x=,y=", "%": "SVGFEComponentTransferElement"},

FECompositeElement: {"": "SvgElement;x=,y=", "%": "SVGFECompositeElement"},

FEConvolveMatrixElement: {"": "SvgElement;x=,y=", "%": "SVGFEConvolveMatrixElement"},

FEDiffuseLightingElement: {"": "SvgElement;x=,y=", "%": "SVGFEDiffuseLightingElement"},

FEDisplacementMapElement: {"": "SvgElement;x=,y=", "%": "SVGFEDisplacementMapElement"},

FEFloodElement: {"": "SvgElement;x=,y=", "%": "SVGFEFloodElement"},

FEGaussianBlurElement: {"": "SvgElement;x=,y=", "%": "SVGFEGaussianBlurElement"},

FEImageElement: {"": "SvgElement;x=,y=", "%": "SVGFEImageElement"},

FEMergeElement: {"": "SvgElement;x=,y=", "%": "SVGFEMergeElement"},

FEMorphologyElement: {"": "SvgElement;x=,y=", "%": "SVGFEMorphologyElement"},

FEOffsetElement: {"": "SvgElement;x=,y=", "%": "SVGFEOffsetElement"},

FEPointLightElement: {"": "SvgElement;x=,y=", "%": "SVGFEPointLightElement"},

FESpecularLightingElement: {"": "SvgElement;x=,y=", "%": "SVGFESpecularLightingElement"},

FESpotLightElement: {"": "SvgElement;x=,y=", "%": "SVGFESpotLightElement"},

FETileElement: {"": "SvgElement;x=,y=", "%": "SVGFETileElement"},

FETurbulenceElement: {"": "SvgElement;x=,y=", "%": "SVGFETurbulenceElement"},

FilterElement: {"": "SvgElement;x=,y=", "%": "SVGFilterElement"},

ForeignObjectElement: {"": "GraphicsElement;x=,y=", "%": "SVGForeignObjectElement"},

GraphicsElement: {"": "SvgElement;", "%": "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGGElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGSwitchElement;SVGGraphicsElement"},

ImageElement0: {"": "GraphicsElement;x=,y=", "%": "SVGImageElement"},

MaskElement: {"": "SvgElement;x=,y=", "%": "SVGMaskElement"},

PatternElement: {"": "SvgElement;x=,y=", "%": "SVGPatternElement"},

Rect: {"": "Interceptor;height},width},x%,y%", "%": "SVGRect"},

RectElement: {"": "GraphicsElement;x=,y=", "%": "SVGRectElement"},

ScriptElement: {"": "SvgElement;", $isScriptElement: true, "%": "SVGScriptElement"},

SvgElement: {"": "Element;",
  set$innerHtml: function(receiver, value) {
    receiver.textContent = null;
    receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, value, null, null));
  },
  createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
    var t1, html, fragment, svgFragment, root;
    t1 = [];
    H.setRuntimeTypeInfo(t1, [W.NodeValidator]);
    validator = new W.NodeValidatorBuilder(t1);
    t1 = validator._validators;
    t1.push(W._Html5NodeValidator$(null));
    t1.push(W._TemplatingNodeValidator$());
    t1.push(new W._SvgNodeValidator());
    treeSanitizer = new W._ValidatingTreeSanitizer(validator);
    html = "<svg version=\"1.1\">" + svg + "</svg>";
    fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
    svgFragment = document.createDocumentFragment();
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    root = t1.get$single(t1);
    for (; t1 = root.firstChild, t1 != null;)
      svgFragment.appendChild(t1);
    return svgFragment;
  },
  $isSvgElement: true,
  "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
},

SvgSvgElement: {"": "GraphicsElement;viewport=,x=,y=", "%": "SVGSVGElement"},

TextContentElement: {"": "GraphicsElement;", "%": "SVGTextPathElement;SVGTextContentElement"},

TextPositioningElement: {"": "TextContentElement;x=,y=", "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"},

UseElement: {"": "GraphicsElement;x=,y=", "%": "SVGUseElement"}}],
["dart.dom.web_gl", "dart:web_gl", , P, {
RenderingContext: {"": "CanvasRenderingContext;",
  viewport$4: function(receiver, x, y, width, height) {
    return receiver.viewport(x, y, width, height);
  },
  get$viewport: function(_receiver) {
    return new P.BoundClosure$i4(this, P.RenderingContext.prototype.viewport$4, _receiver, "viewport$4");
  },
  "%": "WebGLRenderingContext"
}}],
["dart.isolate", "dart:isolate", , P, {
ReceivePort: {"": "Object;"}}],
["dart.math", "dart:math", , P, {
_JenkinsSmiHash_combine: function(hash, value) {
  hash = 536870911 & hash + value;
  hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
  return (hash ^ C.JSInt_methods.$shr(hash, 6)) >>> 0;
},

_JenkinsSmiHash_finish: function(hash) {
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ C.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
},

min: function(a, b) {
  var t1;
  if (a > b)
    return b;
  if (a < b)
    return a;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return (a + b) * a * b;
    if (a === 0)
      t1 = b === 0 ? 1 / b < 0 : b < 0;
    else
      t1 = false;
    if (t1 || isNaN(b))
      return b;
    return a;
  }
  return a;
},

max: function(a, b) {
  var t1;
  if (typeof a !== "number")
    throw H.wrapException(new P.ArgumentError(a));
  if (typeof b !== "number")
    throw H.wrapException(new P.ArgumentError(b));
  if (a > b)
    return a;
  if (a < b)
    return b;
  if (typeof b === "number") {
    if (typeof a === "number")
      if (a === 0)
        return a + b;
    if (isNaN(b))
      return b;
    return a;
  }
  if (b === 0)
    t1 = a === 0 ? 1 / a < 0 : a < 0;
  else
    t1 = false;
  if (t1)
    return b;
  return a;
},

_Random: {"": "Object;",
  nextInt$1: function(max) {
    if (max < 0)
      throw H.wrapException(new P.ArgumentError("negative max: " + max));
    if (max > 4294967295)
      max = 4294967295;
    return Math.random() * max >>> 0;
  }
},

_RectangleBase: {"": "Object;",
  toString$0: function(_) {
    return "Rectangle (" + this.get$left() + ", " + this.top + ") " + this.width + " x " + this.height;
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    t1 = J.getInterceptor(other);
    if (typeof other !== "object" || other === null || !t1.$isRectangle)
      return false;
    return this.get$left() === other.left && this.top === other.top && this.width === other.width && this.height === other.height;
  },
  get$hashCode: function(_) {
    var t1, t2, t3, t4;
    t1 = this.get$left() & 0x1FFFFFFF;
    t2 = this.top & 0x1FFFFFFF;
    t3 = this.width & 0x1FFFFFFF;
    t4 = this.height & 0x1FFFFFFF;
    return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
  }
},

Rectangle: {"": "_RectangleBase;left<,top,width,height", $isRectangle: true, $as_RectangleBase: null}}],
["dart.typed_data", "dart:typed_data", , P, {
TypedData: {"": "Interceptor;",
  _invalidIndex$2: function(receiver, index, $length) {
    var t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$ge(index, $length))
      throw H.wrapException(P.RangeError$range(index, 0, $length));
    else
      throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
  },
  "%": "DataView;ArrayBufferView;TypedData_ListMixin|TypedData_ListMixin_FixedLengthListMixin|TypedData_ListMixin0|TypedData_ListMixin_FixedLengthListMixin0|TypedData_ListMixin1|TypedData_ListMixin_FixedLengthListMixin1|TypedData_ListMixin2|TypedData_ListMixin_FixedLengthListMixin2|TypedData_ListMixin3|TypedData_ListMixin_FixedLengthListMixin3|TypedData_ListMixin4|TypedData_ListMixin_FixedLengthListMixin4|TypedData_ListMixin5|TypedData_ListMixin_FixedLengthListMixin5|TypedData_ListMixin6|TypedData_ListMixin_FixedLengthListMixin6|TypedData_ListMixin7|TypedData_ListMixin_FixedLengthListMixin7|Int64List|Uint64List"
},

Float32List: {"": "TypedData_ListMixin_FixedLengthListMixin;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float32Array"
},

Float64List: {"": "TypedData_ListMixin_FixedLengthListMixin0;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSDouble];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Float64Array"
},

Int16List: {"": "TypedData_ListMixin_FixedLengthListMixin1;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int16Array"
},

Int32List: {"": "TypedData_ListMixin_FixedLengthListMixin2;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int32Array"
},

Int8List: {"": "TypedData_ListMixin_FixedLengthListMixin3;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Int8Array"
},

Uint16List: {"": "TypedData_ListMixin_FixedLengthListMixin4;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint16Array"
},

Uint32List: {"": "TypedData_ListMixin_FixedLengthListMixin5;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "Uint32Array"
},

Uint8ClampedList: {"": "TypedData_ListMixin_FixedLengthListMixin6;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": "CanvasPixelArray|Uint8ClampedArray"
},

Uint8List: {"": "TypedData_ListMixin_FixedLengthListMixin7;",
  get$length: function(receiver) {
    return C.JS_CONST_ZYJ(receiver);
  },
  $index: function(receiver, index) {
    var t1, t2;
    t1 = C.JS_CONST_ZYJ(receiver);
    if (!(index >>> 0 != index)) {
      if (typeof index !== "number")
        throw index.$ge();
      t2 = index >= t1;
    } else
      t2 = true;
    if (t2)
      this._invalidIndex$2(receiver, index, t1);
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1 = C.JS_CONST_ZYJ(receiver);
    if (index >>> 0 != index || J.$ge$n(index, t1))
      this._invalidIndex$2(receiver, index, t1);
    receiver[index] = value;
  },
  $asList: function() {
    return [J.JSInt];
  },
  $isList: true,
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  "%": ";Uint8Array"
},

TypedData_ListMixin: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin: {"": "TypedData_ListMixin+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin0: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin0: {"": "TypedData_ListMixin0+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin1: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin1: {"": "TypedData_ListMixin1+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin2: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin2: {"": "TypedData_ListMixin2+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin3: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin3: {"": "TypedData_ListMixin3+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin4: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin4: {"": "TypedData_ListMixin4+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin5: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin5: {"": "TypedData_ListMixin5+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin6: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin6: {"": "TypedData_ListMixin6+FixedLengthListMixin;", $asList: null},

TypedData_ListMixin7: {"": "TypedData+ListMixin;", $isList: true, $asList: null, $isEfficientLength: true},

TypedData_ListMixin_FixedLengthListMixin7: {"": "TypedData_ListMixin7+FixedLengthListMixin;", $asList: null},

Int64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Int64List_BYTES_PER_ELEMENT",
}

},

Uint64List: {"": "TypedData;", $isList: true,
  $asList: function() {
    return [J.JSInt];
  },
  $isEfficientLength: true,
  $isJavaScriptIndexingBehavior: true,
  static: {
"": "Uint64List_BYTES_PER_ELEMENT",
}

}}],
["julspel", "julspel.dart", , V, {
main: function() {
  var t1, t2, t3, game;
  t1 = P.List_List(null, J.JSInt);
  H.setRuntimeTypeInfo(t1, [J.JSInt]);
  t2 = P.List_List(null, V.Level);
  H.setRuntimeTypeInfo(t2, [V.Level]);
  t3 = P.List_List(null, T.Vector2);
  H.setRuntimeTypeInfo(t3, [T.Vector2]);
  game = new V.Game(null, null, null, null, t1, t2, null, null, 0, 0, false, false, null, null, t3, C.C__Random);
  game.initialize$0(game);
  game.run$0();
},

Game: {"": "Object;canvas,ctx,frameCount,fpsCounter,keysDown,levels,currentLevel,previousLevel,levelSwapFinishTimestamp,levelSwapStartTimestamp,isGameWon,levelCompleted,gameWonView,levelSwapIndicator,snowFlakes,rng",
  drawSnow$0: function() {
    J.set$fillStyle$x(this.ctx, "#fff");
    H.IterableMixinWorkaround_forEach(this.snowFlakes, new V.Game_drawSnow_closure(this));
  },
  step$1: function(_, timestamp) {
    var t1, t2, levelName, t3;
    J.clearRect$4$x(this.ctx, 0, 0, 800, 600);
    if (this.isGameWon)
      this.gameWonView.render$1(timestamp);
    else if (this.levelCompleted) {
      this.levelCompleted = false;
      this.goToNextLevel$0();
      C.JSArray_methods.remove$1(this.levels, this.previousLevel);
      this.levelSwapStartTimestamp = timestamp;
    } else {
      t1 = J.getInterceptor$n(timestamp);
      if (J.$lt$n(t1.$sub(timestamp, this.levelSwapStartTimestamp), 2500)) {
        t2 = this.previousLevel;
        if (t2 != null)
          t2.render$1(timestamp);
        J.set$globalAlpha$x(this.ctx, J.$div$n(t1.$sub(timestamp, this.levelSwapStartTimestamp), 1250));
        this.currentLevel.render$1(timestamp);
        t1 = t1.$sub(timestamp, this.levelSwapStartTimestamp);
        if (typeof t1 !== "number")
          throw H.iae(t1);
        levelName = this.currentLevel.get$levelName();
        t2 = this.ctx;
        J.getInterceptor$x(t2).set$globalAlpha(t2, 1);
        t2.lineWidth = 0.5;
        t2.fillStyle = "#fff";
        t2.font = "80px monospace";
        C.CanvasRenderingContext2D_methods.fillText$3(t2, levelName + " in " + C.JSInt_methods.toString$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0((2500 - t1) / 1000 * 10)) / 10) + "s", 40, 140);
        this.levelSwapFinishTimestamp = timestamp;
      } else {
        t2 = this.currentLevel;
        if (t2 != null) {
          t2.step$1(t2, timestamp);
          t2.render$1(timestamp);
          t3 = this.levels;
          if (t3.length > 1)
            this.levelSwapIndicator.render$3(timestamp, this.ctx, J.$div$n(t1.$sub(timestamp, this.levelSwapFinishTimestamp), 16000));
          t2.handleInput$1(this.keysDown);
          if (J.$gt$n(t1.$sub(timestamp, this.levelSwapFinishTimestamp), 16000))
            if (!this.isGameWon) {
              this.goToNextLevel$0();
              if (t3.length > 1)
                this.levelSwapStartTimestamp = timestamp;
            }
        }
      }
    }
    C.JSArray_methods.set$length(this.keysDown, 0);
    this.drawSnow$0();
    t1 = this.frameCount;
    if (typeof t1 !== "number")
      throw t1.$add();
    this.frameCount = t1 + 1;
    C.Window_methods.get$animationFrame(window).then$1(new V.Game_step_closure(this));
  },
  _initCanvas$0: function() {
    this.canvas = W._ElementFactoryProvider_createElement_tag("canvas", null);
    J.set$width$x(this.canvas, 800);
    J.set$height$x(this.canvas, 600);
    var t1 = document.body;
    t1.toString;
    new W._ChildNodeListLazy(t1)._this.appendChild(this.canvas);
    this.ctx = J.getContext$1$x(this.canvas, "2d");
    this.frameCount = 0;
    this.fpsCounter = document.querySelector("#fps-counter");
    this.fpsCounter.hidden = true;
  },
  initialize$0: function(_) {
    var t1, t2, t3, i, t4, t5;
    this._initCanvas$0();
    t1 = new V.GameWonView(this.ctx, W.ImageElement_ImageElement(null, "images/background_won.png", null), C.C__Random);
    t2 = $.get$Game_imagesLoading();
    t3 = J.get$onLoad$x(t1.img_back_won);
    t2.push(t3.get$first(t3));
    this.gameWonView = t1;
    this.levelSwapIndicator = new V.LevelSwapIndicator();
    for (t1 = this.snowFlakes, i = 0; i < 150; ++i) {
      t2 = Math.random();
      t3 = Math.random();
      t4 = new Float32Array(2);
      t4.$dartCachedLength = t4.length;
      t4 = new T.Vector2(t4);
      t5 = t4.storage;
      t5[0] = t2 * 800;
      t5[1] = t3 * 600;
      t1.push(t4);
    }
    t1 = this.levels;
    t1.push(V.Level1$(this, this.ctx));
    t1.push(V.Level2$(this, this.ctx));
    t1.push(V.Level3$(this, this.ctx));
    t1.push(V.Level4$(this, this.ctx));
    t1.push(V.Level5$(this, this.ctx));
    t1.push(V.Level6$(this, this.ctx));
    this.goToFirstLevel$0();
    t1 = new W._EventStream(window, C.EventStreamProvider_keydown._eventType, false);
    H.setRuntimeTypeInfo(t1, [null]);
    t2 = new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new V.Game_initialize_closure(this)), t1._useCapture);
    H.setRuntimeTypeInfo(t2, [H.getRuntimeTypeArgument(t1, "_EventStream", 0)]);
    t2._tryResume$0();
  },
  waitForImages$1: function(timestamp) {
    var numDots, dots, i, t1;
    J.clearRect$4$x(this.ctx, 0, 0, 800, 600);
    J.set$fillStyle$x(this.ctx, "#3e523c");
    J.fillRect$4$x(this.ctx, 0, 0, 800, 600);
    if (typeof timestamp !== "number")
      throw timestamp.$mod();
    numDots = C.JSNumber_methods.$tdiv(C.JSNumber_methods.$mod(timestamp, 600), 150);
    for (dots = "", i = 0; i < numDots; ++i)
      dots += ".";
    t1 = this.ctx;
    J.getInterceptor$x(t1).set$lineWidth(t1, 0.5);
    t1.fillStyle = "#fff";
    t1.font = "100px monospace";
    C.CanvasRenderingContext2D_methods.fillText$3(t1, "Loading" + dots, 40, 140);
    this.levelSwapFinishTimestamp = timestamp;
    this.levelSwapStartTimestamp = timestamp;
    if ($.Game_imagesLoaded) {
      t1 = window;
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(new V.Game_waitForImages_closure(this)));
    } else {
      t1 = window;
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(new V.Game_waitForImages_closure0(this)));
    }
  },
  run$0: function() {
    V.Game__loadImages();
    var t1 = window;
    C.Window_methods._ensureRequestAnimationFrame$0(t1);
    C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(new V.Game_run_closure(this)));
    if ($.Game_imagesLoaded) {
      t1 = window;
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(new V.Game_run_closure0(this)));
    } else {
      t1 = window;
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      C.Window_methods._requestAnimationFrame$1(t1, W._wrapZone(new V.Game_run_closure1(this)));
    }
  },
  goToFirstLevel$0: function() {
    var t1 = this.currentLevel;
    if (t1 != null)
      t1.toString;
    this.currentLevel = C.JSArray_methods.get$first(this.levels);
  },
  goToNextLevel$0: function() {
    var t1, t2, t3, t4;
    this.previousLevel = this.currentLevel;
    t1 = this.levels;
    t2 = H.Arrays_indexOf(t1, this.currentLevel, 0, t1.length) + 1;
    t3 = t1.length;
    if (t2 < t3) {
      t4 = this.currentLevel;
      if (t4 != null)
        t4.toString;
      if (t2 >>> 0 !== t2 || t2 >= t3)
        throw H.ioore(t1, t2);
      this.currentLevel = t1[t2];
    } else
      this.goToFirstLevel$0();
  },
  completeLevel$1: function(level) {
    if (this.levels.length === 1) {
      this.currentLevel = null;
      this.isGameWon = true;
    } else if (this.currentLevel === level)
      this.levelCompleted = true;
  },
  static: {
"": "Game_CANVAS_WIDTH,Game_CANVAS_HEIGHT,Game_VIEWPORT_SCALE,Game_GRAVITY,Game_TIME_STEP,Game_VELOCITY_ITERATIONS,Game_POSITION_ITERATIONS,Game_LEVEL_SWITCH_INTERVAL,Game_LEVEL_SWITCH_FADE_TIME,Game_SNOWFLAKES_NUM,Game_DEBUG_DRAW,Game_imagesLoading,Game_imagesLoaded",
Game__loadImages: function() {
  P.Future_wait($.get$Game_imagesLoading()).then$1(new V.Game__loadImages_closure());
}}

},

Game_drawSnow_closure: {"": "Closure;this_0",
  call$1: function(pos) {
    var t1, t2, t3;
    t1 = this.this_0;
    J.beginPath$0$x(t1.ctx);
    t2 = J.getInterceptor$x(pos);
    J.arc$5$x(t1.ctx, t2.get$x(pos), t2.get$y(pos), 2, 0, 6.283185307179586);
    J.closePath$0$x(t1.ctx);
    J.fill$0$x(t1.ctx);
    t2.set$x(pos, J.$add$ns(t2.get$x(pos), Math.random() * 4 - 2));
    t1 = t2.get$y(pos);
    t3 = Math.random();
    if (typeof t1 !== "number")
      throw t1.$add();
    t2.set$y(pos, t1 + t3 * 2);
    t1 = t2.get$y(pos);
    if (typeof t1 !== "number")
      throw t1.$gt();
    if (t1 > 600) {
      t2.set$y(pos, 0);
      t2.set$x(pos, Math.random() * 800);
    }
  },
  $is_args1: true
},

Game_step_closure: {"": "Closure;this_0",
  call$1: function(time) {
    var t1 = this.this_0;
    t1.step$1(t1, time);
  },
  $is_args1: true
},

Game__initCanvas_closure: {"": "Closure;this_0",
  call$1: function(t) {
    var t1 = this.this_0;
    J.set$innerHtml$x(t1.fpsCounter, "FPS: " + J.toString$0(t1.frameCount));
    t1.frameCount = 0;
  },
  $is_args1: true
},

Game_initialize_closure0: {"": "Closure;this_0",
  call$1: function(l) {
    var debugDraw = Y.CanvasDraw$(J.get$viewport$x(l), this.this_0.ctx);
    l.get$world()._debugDraw = debugDraw;
  },
  $is_args1: true
},

Game_initialize_closure: {"": "Closure;this_1",
  call$1: function(e) {
    this.this_1.keysDown.push(J.get$keyCode$x(e));
  },
  $is_args1: true
},

Game_waitForImages_closure: {"": "Closure;this_0",
  call$1: function(time) {
    var t1 = this.this_0;
    t1.step$1(t1, time);
  },
  $is_args1: true
},

Game_waitForImages_closure0: {"": "Closure;this_1",
  call$1: function(time) {
    this.this_1.waitForImages$1(time);
  },
  $is_args1: true
},

Game_run_closure: {"": "Closure;this_0",
  call$1: function(time) {
    this.this_0.waitForImages$1(time);
  },
  $is_args1: true
},

Game_run_closure0: {"": "Closure;this_1",
  call$1: function(time) {
    var t1 = this.this_1;
    t1.step$1(t1, time);
  },
  $is_args1: true
},

Game_run_closure1: {"": "Closure;this_2",
  call$1: function(time) {
    this.this_2.waitForImages$1(time);
  },
  $is_args1: true
},

Game__loadImages_closure: {"": "Closure;",
  call$1: function(_) {
    $.Game_imagesLoaded = true;
  },
  $is_args1: true
},

Level: {"": "Object;world<,viewport>",
  _moveCamera$0: function() {
    var t1, playerPos, t2, t3, t4;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    playerPos = new T.Vector2(t1);
    this.viewport.getWorldToScreen$2(this.get$player()._body.originTransform.position, playerPos);
    t1 = playerPos.storage;
    if (Math.abs(t1[0] - this.viewport.center.storage[0]) > 1) {
      t2 = t1[0];
      t3 = this.viewport.center.storage;
      t4 = t3[0];
      if (t2 > t4)
        t3[0] = t4 + 1;
      else
        t3[0] = t4 - 1;
    }
    t1 = t1[1];
    if (t1 < 0) {
      t1 = this.viewport.center.storage;
      t1[1] = t1[1] + 600;
    } else if (t1 > 600) {
      t1 = this.viewport.center.storage;
      t1[1] = t1[1] - 600;
    }
  },
  get$backgroundColor: function() {
    return "#3e523c";
  },
  render$1: function(timestamp) {
    J.set$fillStyle$x(this.ctx, this.get$backgroundColor());
    J.fillRect$4$x(this.ctx, 0, 0, 800, 600);
    this._renderBackground$1(timestamp);
    H.IterableMixinWorkaround_forEach(this.gameObjectViews, new V.Level_render_closure(this, timestamp));
  },
  step$1: function(_, timestamp) {
    var t1 = this.world;
    t1.step$3(t1, 0.016666666666666666, 10, 10);
    this._moveCamera$0();
  },
  handleInput$1: function(keysDown) {
    H.IterableMixinWorkaround_forEach(keysDown, new V.Level_handleInput_closure(this));
  },
  Level$3: function(game, ctx, size) {
    var t1, t2, extents;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t2 = t1.storage;
    t2[0] = 0;
    t2[1] = -10;
    this.world = V.World$(t1, true, V.DefaultWorldPool$());
    this.world._contactManager.contactListener = new V.CollisionListener();
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    extents = new T.Vector2(t1);
    t1 = extents.storage;
    t1[0] = 400;
    t1[1] = 300;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t1.setFrom$1(extents);
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t2.setFrom$1(extents);
    t2 = new Y.CanvasViewportTransform(null, t1, 20, t2);
    t2.yFlip = true;
    this.viewport = t2;
    this.viewport.scale = 10;
    t2 = this.viewport;
    this.canvasDraw = new V.ViewCanvasDraw(this.ctx, t2);
    this.gameObjectViews.push(new V.WorldBorderView(V.WorldBorder$(this.world, this.size)));
    this.ground = V.Ground$(this.world, this.size);
  }
},

Level_render_closure: {"": "Closure;this_0,timestamp_1",
  call$1: function(view) {
    view.render$2(this.this_0.canvasDraw, this.timestamp_1);
  },
  $is_args1: true
},

Level_handleInput_closure: {"": "Closure;this_0",
  call$1: function(keyCode) {
    var t1 = J.getInterceptor(keyCode);
    if (t1.$eq(keyCode, 32))
      this.this_0.get$player().jump$0();
    else if (t1.$eq(keyCode, 65))
      this.this_0.get$player().moveLeft$0();
    else if (t1.$eq(keyCode, 68))
      this.this_0.get$player().moveRight$0();
  },
  $is_args1: true
},

Level1: {"": "Level;player<,img_background,background_pos,game,ctx,world,viewport,canvasDraw,gameObjectViews,worldBorder,size,ground",
  get$levelName: function() {
    return "Level 1";
  },
  _renderBackground$1: function(timestamp) {
    var t1, t2, t3;
    t1 = this.canvasDraw;
    t2 = this.background_pos;
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t3.setFrom$1(t2);
    t1.drawBackgroundImage$3(this.img_background, t3, this.size);
  },
  Level1$2: function(game, ctx) {
    var t1, t2, t3, t4, t5, t6;
    t1 = $.get$Game_imagesLoading();
    t2 = J.get$onLoad$x(this.img_background);
    t1.push(t2.get$first(t2));
    t2 = this.size.storage[1];
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t3 = t1.storage;
    t3[0] = 0;
    t3[1] = t2 / 4;
    this.background_pos = t1;
    t1 = this.world;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = -20;
    t3[1] = -20;
    this.player = V.Player$(t1, t2);
    t2 = this.gameObjectViews;
    t2.push(new V.PlayerView(this.player));
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 20, 2, t1);
    t3.Platform$5(t1, 30, -17, 20, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = this.world;
    t5 = new V.WalkablePlatform(null, 20, 2, t6);
    t5.Platform$5(t6, 10, -21, 20, 2);
    t6 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t1 = $.get$WalkablePlatformView__imgSize();
    t3 = new V.WalkablePlatformView(t5, null, null, t6, t4, t1);
    t3.StaticObjectView$4(t5, t6, t4, t1);
    t2.push(t3);
    t3 = this.world;
    t1 = new V.WalkablePlatform(null, 20, 2, t3);
    t1.Platform$5(t3, -10, -25, 20, 2);
    t3 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t6 = $.get$WalkablePlatformView__imgSize();
    t5 = new V.WalkablePlatformView(t1, null, null, t3, t4, t6);
    t5.StaticObjectView$4(t1, t3, t4, t6);
    t2.push(t5);
    t5 = V.Goal$(this.world, this, 30, 12, 5, 5);
    t6 = $.get$GoalView__img_goal();
    t4 = $.get$GoalView__imgOffset();
    t3 = $.get$GoalView__imgSize();
    t1 = new V.GoalView(t5, null, null, t6, t4, t3);
    t1.StaticObjectView$4(t5, t6, t4, t3);
    t2.push(t1);
  },
  static: {
Level1$: function(game, ctx) {
  var t1, t2, t3;
  t1 = W.ImageElement_ImageElement(null, "images/level1.png", null);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector2(t2);
  t3 = t2.storage;
  t3[0] = 100;
  t3[1] = 140;
  t3 = P.List_List(null, V.GameObjectView);
  H.setRuntimeTypeInfo(t3, [V.GameObjectView]);
  t3 = new V.Level1(null, t1, null, game, ctx, null, null, null, t3, null, t2, null);
  t3.Level$3(game, ctx, t2);
  t3.Level1$2(game, ctx);
  return t3;
}}

},

Level2: {"": "Level;player<,img_background,background_pos,game,ctx,world,viewport,canvasDraw,gameObjectViews,worldBorder,size,ground",
  get$levelName: function() {
    return "Level 2";
  },
  get$backgroundColor: function() {
    return "#88382d";
  },
  _renderBackground$1: function(timestamp) {
    var t1, t2, t3;
    t1 = this.canvasDraw;
    t2 = this.background_pos;
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t3.setFrom$1(t2);
    t1.drawBackgroundImage$3(this.img_background, t3, this.size);
  },
  Level2$2: function(game, ctx) {
    var t1, t2, t3, t4, t5, t6;
    t1 = $.get$Game_imagesLoading();
    t2 = J.get$onLoad$x(this.img_background);
    t1.push(t2.get$first(t2));
    t2 = this.size.storage[1];
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t3 = t1.storage;
    t3[0] = 0;
    t3[1] = t2 / 4;
    this.background_pos = t1;
    t1 = this.world;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = -20;
    t3[1] = -20;
    this.player = V.Player$(t1, t2);
    t2 = this.gameObjectViews;
    t2.push(new V.PlayerView(this.player));
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 10, 2, t1);
    t3.Platform$5(t1, -9, -25, 10, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = this.world;
    t5 = new V.WalkablePlatform(null, 10, 2, t6);
    t5.Platform$5(t6, 9, -18, 10, 2);
    t6 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t1 = $.get$WalkablePlatformView__imgSize();
    t3 = new V.WalkablePlatformView(t5, null, null, t6, t4, t1);
    t3.StaticObjectView$4(t5, t6, t4, t1);
    t2.push(t3);
    t3 = this.world;
    t1 = new V.WalkablePlatform(null, 10, 2, t3);
    t1.Platform$5(t3, -9, -11, 10, 2);
    t3 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t6 = $.get$WalkablePlatformView__imgSize();
    t5 = new V.WalkablePlatformView(t1, null, null, t3, t4, t6);
    t5.StaticObjectView$4(t1, t3, t4, t6);
    t2.push(t5);
    t5 = this.world;
    t6 = new V.WalkablePlatform(null, 10, 2, t5);
    t6.Platform$5(t5, 9, -4, 10, 2);
    t5 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t3 = $.get$WalkablePlatformView__imgSize();
    t1 = new V.WalkablePlatformView(t6, null, null, t5, t4, t3);
    t1.StaticObjectView$4(t6, t5, t4, t3);
    t2.push(t1);
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 10, 2, t1);
    t3.Platform$5(t1, -9, 3, 10, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = V.Goal$(this.world, this, -9, 12, 5, 5);
    t5 = $.get$GoalView__img_goal();
    t4 = $.get$GoalView__imgOffset();
    t1 = $.get$GoalView__imgSize();
    t3 = new V.GoalView(t6, null, null, t5, t4, t1);
    t3.StaticObjectView$4(t6, t5, t4, t1);
    t2.push(t3);
  },
  static: {
Level2$: function(game, ctx) {
  var t1, t2, t3;
  t1 = W.ImageElement_ImageElement(null, "images/level2.png", null);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector2(t2);
  t3 = t2.storage;
  t3[0] = 100;
  t3[1] = 140;
  t3 = P.List_List(null, V.GameObjectView);
  H.setRuntimeTypeInfo(t3, [V.GameObjectView]);
  t3 = new V.Level2(null, t1, null, game, ctx, null, null, null, t3, null, t2, null);
  t3.Level$3(game, ctx, t2);
  t3.Level2$2(game, ctx);
  return t3;
}}

},

Level3: {"": "Level;player<,img_background,background_pos,game,ctx,world,viewport,canvasDraw,gameObjectViews,worldBorder,size,ground",
  get$levelName: function() {
    return "Level 3";
  },
  get$backgroundColor: function() {
    return "#002872";
  },
  _renderBackground$1: function(timestamp) {
    var t1, t2, t3;
    t1 = this.canvasDraw;
    t2 = this.background_pos;
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t3.setFrom$1(t2);
    t1.drawBackgroundImage$3(this.img_background, t3, this.size);
  },
  Level3$2: function(game, ctx) {
    var t1, t2, t3, t4, t5, t6;
    t1 = $.get$Game_imagesLoading();
    t2 = J.get$onLoad$x(this.img_background);
    t1.push(t2.get$first(t2));
    t2 = this.size.storage[1];
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t3 = t1.storage;
    t3[0] = 0;
    t3[1] = t2 / 4;
    this.background_pos = t1;
    t1 = this.world;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = -20;
    t3[1] = -20;
    this.player = V.Player$(t1, t2);
    t2 = this.gameObjectViews;
    t2.push(new V.PlayerView(this.player));
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 10, 2, t1);
    t3.Platform$5(t1, 9, -25, 10, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = this.world;
    t5 = new V.WalkablePlatform(null, 10, 2, t6);
    t5.Platform$5(t6, 9, -18, 10, 2);
    t6 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t1 = $.get$WalkablePlatformView__imgSize();
    t3 = new V.WalkablePlatformView(t5, null, null, t6, t4, t1);
    t3.StaticObjectView$4(t5, t6, t4, t1);
    t2.push(t3);
    t3 = this.world;
    t1 = new V.WalkablePlatform(null, 10, 2, t3);
    t1.Platform$5(t3, 9, -11, 10, 2);
    t3 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t6 = $.get$WalkablePlatformView__imgSize();
    t5 = new V.WalkablePlatformView(t1, null, null, t3, t4, t6);
    t5.StaticObjectView$4(t1, t3, t4, t6);
    t2.push(t5);
    t5 = this.world;
    t6 = new V.WalkablePlatform(null, 10, 2, t5);
    t6.Platform$5(t5, 9, -4, 10, 2);
    t5 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t3 = $.get$WalkablePlatformView__imgSize();
    t1 = new V.WalkablePlatformView(t6, null, null, t5, t4, t3);
    t1.StaticObjectView$4(t6, t5, t4, t3);
    t2.push(t1);
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 10, 2, t1);
    t3.Platform$5(t1, 9, 3, 10, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = V.Goal$(this.world, this, 9, 12, 5, 5);
    t5 = $.get$GoalView__img_goal();
    t4 = $.get$GoalView__imgOffset();
    t1 = $.get$GoalView__imgSize();
    t3 = new V.GoalView(t6, null, null, t5, t4, t1);
    t3.StaticObjectView$4(t6, t5, t4, t1);
    t2.push(t3);
  },
  static: {
Level3$: function(game, ctx) {
  var t1, t2, t3;
  t1 = W.ImageElement_ImageElement(null, "images/level3.png", null);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector2(t2);
  t3 = t2.storage;
  t3[0] = 100;
  t3[1] = 180;
  t3 = P.List_List(null, V.GameObjectView);
  H.setRuntimeTypeInfo(t3, [V.GameObjectView]);
  t3 = new V.Level3(null, t1, null, game, ctx, null, null, null, t3, null, t2, null);
  t3.Level$3(game, ctx, t2);
  t3.Level3$2(game, ctx);
  return t3;
}}

},

Level4: {"": "Level;player<,img_background,background_pos,game,ctx,world,viewport,canvasDraw,gameObjectViews,worldBorder,size,ground",
  get$levelName: function() {
    return "Level 4";
  },
  get$backgroundColor: function() {
    return "#000";
  },
  _renderBackground$1: function(timestamp) {
    var t1, t2, t3;
    t1 = this.canvasDraw;
    t2 = this.background_pos;
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t3.setFrom$1(t2);
    t1.drawBackgroundImage$3(this.img_background, t3, this.size);
  },
  Level4$2: function(game, ctx) {
    var t1, t2, t3, t4, t5, t6;
    t1 = $.get$Game_imagesLoading();
    t2 = J.get$onLoad$x(this.img_background);
    t1.push(t2.get$first(t2));
    t2 = this.size.storage[1];
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t3 = t1.storage;
    t3[0] = 0;
    t3[1] = t2 / 4;
    this.background_pos = t1;
    t1 = this.world;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = -20;
    t3[1] = -20;
    this.player = V.Player$(t1, t2);
    t2 = this.gameObjectViews;
    t2.push(new V.PlayerView(this.player));
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 10, 2, t1);
    t3.Platform$5(t1, 0, -25, 10, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = this.world;
    t5 = new V.WalkablePlatform(null, 10, 2, t6);
    t5.Platform$5(t6, 0, -18, 10, 2);
    t6 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t1 = $.get$WalkablePlatformView__imgSize();
    t3 = new V.WalkablePlatformView(t5, null, null, t6, t4, t1);
    t3.StaticObjectView$4(t5, t6, t4, t1);
    t2.push(t3);
    t3 = this.world;
    t1 = new V.WalkablePlatform(null, 10, 2, t3);
    t1.Platform$5(t3, 0, -11, 10, 2);
    t3 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t6 = $.get$WalkablePlatformView__imgSize();
    t5 = new V.WalkablePlatformView(t1, null, null, t3, t4, t6);
    t5.StaticObjectView$4(t1, t3, t4, t6);
    t2.push(t5);
    t5 = this.world;
    t6 = new V.WalkablePlatform(null, 10, 2, t5);
    t6.Platform$5(t5, 0, -4, 10, 2);
    t5 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t3 = $.get$WalkablePlatformView__imgSize();
    t1 = new V.WalkablePlatformView(t6, null, null, t5, t4, t3);
    t1.StaticObjectView$4(t6, t5, t4, t3);
    t2.push(t1);
    t1 = this.world;
    t3 = new V.Wall(null, 2, 20, t1);
    t3.Platform$5(t1, 6, 5, 2, 20);
    t1 = $.get$WallView__img_platform();
    t4 = $.get$WallView__imgOffset();
    t5 = $.get$WallView__imgSize();
    t6 = new V.WallView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = this.world;
    t5 = new V.Wall(null, 2, 20, t6);
    t5.Platform$5(t6, 13, 5, 2, 20);
    t6 = $.get$WallView__img_platform();
    t4 = $.get$WallView__imgOffset();
    t1 = $.get$WallView__imgSize();
    t3 = new V.WallView(t5, null, null, t6, t4, t1);
    t3.StaticObjectView$4(t5, t6, t4, t1);
    t2.push(t3);
    t3 = this.world;
    t1 = new V.WalkablePlatform(null, 10, 2, t3);
    t1.Platform$5(t3, 19, -25, 10, 2);
    t3 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t6 = $.get$WalkablePlatformView__imgSize();
    t5 = new V.WalkablePlatformView(t1, null, null, t3, t4, t6);
    t5.StaticObjectView$4(t1, t3, t4, t6);
    t2.push(t5);
    t5 = this.world;
    t6 = new V.WalkablePlatform(null, 10, 2, t5);
    t6.Platform$5(t5, 19, -18, 10, 2);
    t5 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t3 = $.get$WalkablePlatformView__imgSize();
    t1 = new V.WalkablePlatformView(t6, null, null, t5, t4, t3);
    t1.StaticObjectView$4(t6, t5, t4, t3);
    t2.push(t1);
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 10, 2, t1);
    t3.Platform$5(t1, 19, -11, 10, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = this.world;
    t5 = new V.WalkablePlatform(null, 10, 2, t6);
    t5.Platform$5(t6, 19, -4, 10, 2);
    t6 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t1 = $.get$WalkablePlatformView__imgSize();
    t3 = new V.WalkablePlatformView(t5, null, null, t6, t4, t1);
    t3.StaticObjectView$4(t5, t6, t4, t1);
    t2.push(t3);
    t3 = V.Goal$(this.world, this, 9.5, 12, 5, 5);
    t1 = $.get$GoalView__img_goal();
    t4 = $.get$GoalView__imgOffset();
    t6 = $.get$GoalView__imgSize();
    t5 = new V.GoalView(t3, null, null, t1, t4, t6);
    t5.StaticObjectView$4(t3, t1, t4, t6);
    t2.push(t5);
  },
  static: {
Level4$: function(game, ctx) {
  var t1, t2, t3;
  t1 = W.ImageElement_ImageElement(null, "images/level4.png", null);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector2(t2);
  t3 = t2.storage;
  t3[0] = 100;
  t3[1] = 180;
  t3 = P.List_List(null, V.GameObjectView);
  H.setRuntimeTypeInfo(t3, [V.GameObjectView]);
  t3 = new V.Level4(null, t1, null, game, ctx, null, null, null, t3, null, t2, null);
  t3.Level$3(game, ctx, t2);
  t3.Level4$2(game, ctx);
  return t3;
}}

},

Level5: {"": "Level;player<,img_background,background_pos,game,ctx,world,viewport,canvasDraw,gameObjectViews,worldBorder,size,ground",
  get$levelName: function() {
    return "Level 5";
  },
  get$backgroundColor: function() {
    return "#000";
  },
  _renderBackground$1: function(timestamp) {
    var t1, t2, t3;
    t1 = this.canvasDraw;
    t2 = this.background_pos;
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t3.setFrom$1(t2);
    t1.drawBackgroundImage$3(this.img_background, t3, this.size);
  },
  Level5$2: function(game, ctx) {
    var t1, t2, t3, t4, t5, t6;
    t1 = $.get$Game_imagesLoading();
    t2 = J.get$onLoad$x(this.img_background);
    t1.push(t2.get$first(t2));
    t2 = this.size.storage[1];
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t3 = t1.storage;
    t3[0] = 0;
    t3[1] = t2 / 4;
    this.background_pos = t1;
    t1 = this.world;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = -20;
    t3[1] = -20;
    this.player = V.Player$(t1, t2);
    t2 = this.gameObjectViews;
    t2.push(new V.PlayerView(this.player));
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 10, 2, t1);
    t3.Platform$5(t1, 0, -25, 10, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = this.world;
    t5 = new V.WalkablePlatform(null, 10, 2, t6);
    t5.Platform$5(t6, 0, -18, 10, 2);
    t6 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t1 = $.get$WalkablePlatformView__imgSize();
    t3 = new V.WalkablePlatformView(t5, null, null, t6, t4, t1);
    t3.StaticObjectView$4(t5, t6, t4, t1);
    t2.push(t3);
    t3 = this.world;
    t1 = new V.WalkablePlatform(null, 10, 2, t3);
    t1.Platform$5(t3, 0, -11, 10, 2);
    t3 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t6 = $.get$WalkablePlatformView__imgSize();
    t5 = new V.WalkablePlatformView(t1, null, null, t3, t4, t6);
    t5.StaticObjectView$4(t1, t3, t4, t6);
    t2.push(t5);
    t5 = this.world;
    t6 = new V.WalkablePlatform(null, 10, 2, t5);
    t6.Platform$5(t5, 0, -4, 10, 2);
    t5 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t3 = $.get$WalkablePlatformView__imgSize();
    t1 = new V.WalkablePlatformView(t6, null, null, t5, t4, t3);
    t1.StaticObjectView$4(t6, t5, t4, t3);
    t2.push(t1);
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 20, 2, t1);
    t3.Platform$5(t1, 0, 8, 20, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = V.Goal$(this.world, this, 0, 12, 5, 5);
    t5 = $.get$GoalView__img_goal();
    t4 = $.get$GoalView__imgOffset();
    t1 = $.get$GoalView__imgSize();
    t3 = new V.GoalView(t6, null, null, t5, t4, t1);
    t3.StaticObjectView$4(t6, t5, t4, t1);
    t2.push(t3);
  },
  static: {
Level5$: function(game, ctx) {
  var t1, t2, t3;
  t1 = W.ImageElement_ImageElement(null, "images/level5.png", null);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector2(t2);
  t3 = t2.storage;
  t3[0] = 100;
  t3[1] = 180;
  t3 = P.List_List(null, V.GameObjectView);
  H.setRuntimeTypeInfo(t3, [V.GameObjectView]);
  t3 = new V.Level5(null, t1, null, game, ctx, null, null, null, t3, null, t2, null);
  t3.Level$3(game, ctx, t2);
  t3.Level5$2(game, ctx);
  return t3;
}}

},

Level6: {"": "Level;player<,img_background,background_pos,game,ctx,world,viewport,canvasDraw,gameObjectViews,worldBorder,size,ground",
  get$levelName: function() {
    return "Level 6";
  },
  get$backgroundColor: function() {
    return "#b7acac";
  },
  _renderBackground$1: function(timestamp) {
    var t1, t2, t3;
    t1 = this.canvasDraw;
    t2 = this.background_pos;
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t3.setFrom$1(t2);
    t1.drawBackgroundImage$3(this.img_background, t3, this.size);
  },
  Level6$2: function(game, ctx) {
    var t1, t2, t3, t4, t5, t6;
    t1 = $.get$Game_imagesLoading();
    t2 = J.get$onLoad$x(this.img_background);
    t1.push(t2.get$first(t2));
    t2 = this.size.storage[1];
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t3 = t1.storage;
    t3[0] = 0;
    t3[1] = t2 / 4;
    this.background_pos = t1;
    t1 = this.world;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = -20;
    t3[1] = -20;
    this.player = V.Player$(t1, t2);
    t2 = this.gameObjectViews;
    t2.push(new V.PlayerView(this.player));
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 10, 2, t1);
    t3.Platform$5(t1, 0, -25, 10, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t3, null, null, t1, t4, t5);
    t6.StaticObjectView$4(t3, t1, t4, t5);
    t2.push(t6);
    t6 = this.world;
    t5 = new V.WalkablePlatform(null, 10, 2, t6);
    t5.Platform$5(t6, 0, -18, 10, 2);
    t6 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t1 = $.get$WalkablePlatformView__imgSize();
    t3 = new V.WalkablePlatformView(t5, null, null, t6, t4, t1);
    t3.StaticObjectView$4(t5, t6, t4, t1);
    t2.push(t3);
    t3 = this.world;
    t1 = new V.WalkablePlatform(null, 10, 2, t3);
    t1.Platform$5(t3, 0, -11, 10, 2);
    t3 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t6 = $.get$WalkablePlatformView__imgSize();
    t5 = new V.WalkablePlatformView(t1, null, null, t3, t4, t6);
    t5.StaticObjectView$4(t1, t3, t4, t6);
    t2.push(t5);
    t5 = this.world;
    t6 = new V.WalkablePlatform(null, 10, 2, t5);
    t6.Platform$5(t5, 0, -4, 10, 2);
    t5 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t3 = $.get$WalkablePlatformView__imgSize();
    t1 = new V.WalkablePlatformView(t6, null, null, t5, t4, t3);
    t1.StaticObjectView$4(t6, t5, t4, t3);
    t2.push(t1);
    t1 = V.Platform$(this.world, 0, 8, 20, 2);
    t3 = $.get$PlatformView__img_platform();
    t4 = $.get$PlatformView__imgOffset();
    t5 = $.get$PlatformView__imgSize();
    t6 = new V.PlatformView(t1, null, null, t3, t4, t5);
    t6.StaticObjectView$4(t1, t3, t4, t5);
    t2.push(t6);
    t6 = this.world;
    t5 = new V.WalkablePlatform(null, 2, 2, t6);
    t5.Platform$5(t6, 50, -25, 2, 2);
    t6 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t3 = $.get$WalkablePlatformView__imgSize();
    t1 = new V.WalkablePlatformView(t5, null, null, t6, t4, t3);
    t1.StaticObjectView$4(t5, t6, t4, t3);
    t2.push(t1);
    t1 = this.world;
    t3 = new V.WalkablePlatform(null, 2, 2, t1);
    t3.Platform$5(t1, 50, -18, 2, 2);
    t1 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t6 = $.get$WalkablePlatformView__imgSize();
    t5 = new V.WalkablePlatformView(t3, null, null, t1, t4, t6);
    t5.StaticObjectView$4(t3, t1, t4, t6);
    t2.push(t5);
    t5 = this.world;
    t6 = new V.WalkablePlatform(null, 2, 2, t5);
    t6.Platform$5(t5, 50, -11, 2, 2);
    t5 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t1 = $.get$WalkablePlatformView__imgSize();
    t3 = new V.WalkablePlatformView(t6, null, null, t5, t4, t1);
    t3.StaticObjectView$4(t6, t5, t4, t1);
    t2.push(t3);
    t3 = this.world;
    t1 = new V.WalkablePlatform(null, 2, 2, t3);
    t1.Platform$5(t3, 50, -4, 2, 2);
    t3 = $.get$WalkablePlatformView__img_platform();
    t4 = $.get$WalkablePlatformView__imgOffset();
    t5 = $.get$WalkablePlatformView__imgSize();
    t6 = new V.WalkablePlatformView(t1, null, null, t3, t4, t5);
    t6.StaticObjectView$4(t1, t3, t4, t5);
    t2.push(t6);
    t6 = V.Goal$(this.world, this, 0, 12, 5, 5);
    t5 = $.get$GoalView__img_goal();
    t4 = $.get$GoalView__imgOffset();
    t3 = $.get$GoalView__imgSize();
    t1 = new V.GoalView(t6, null, null, t5, t4, t3);
    t1.StaticObjectView$4(t6, t5, t4, t3);
    t2.push(t1);
  },
  static: {
Level6$: function(game, ctx) {
  var t1, t2, t3;
  t1 = W.ImageElement_ImageElement(null, "images/level6.png", null);
  t2 = new Float32Array(2);
  t2.$dartCachedLength = t2.length;
  t2 = new T.Vector2(t2);
  t3 = t2.storage;
  t3[0] = 140;
  t3[1] = 200;
  t3 = P.List_List(null, V.GameObjectView);
  H.setRuntimeTypeInfo(t3, [V.GameObjectView]);
  t3 = new V.Level6(null, t1, null, game, ctx, null, null, null, t3, null, t2, null);
  t3.Level$3(game, ctx, t2);
  t3.Level6$2(game, ctx);
  return t3;
}}

},

CollisionListener: {"": "Object;",
  beginContact$1: function(contact) {
    var objA, objB, t1;
    objA = J.get$body$x(contact.fixtureA).get$userData();
    objB = J.get$body$x(contact.fixtureB).get$userData();
    t1 = J.getInterceptor(objA);
    if (typeof objA === "object" && objA !== null && !!t1.$isGameObject) {
      t1 = J.getInterceptor(objB);
      t1 = typeof objB === "object" && objB !== null && !!t1.$isGameObject;
    } else
      t1 = false;
    if (t1) {
      objA.beginContact$1(objB);
      objB.beginContact$1(objA);
    }
  },
  endContact$1: function(contact) {
    var objA, objB, t1;
    objA = J.get$body$x(contact.fixtureA).get$userData();
    objB = J.get$body$x(contact.fixtureB).get$userData();
    t1 = J.getInterceptor(objA);
    if (typeof objA === "object" && objA !== null && !!t1.$isGameObject) {
      t1 = J.getInterceptor(objB);
      t1 = typeof objB === "object" && objB !== null && !!t1.$isGameObject;
    } else
      t1 = false;
    if (t1)
      ;
  }
},

GameObject: {"": "Object;",
  beginContact$1: function(other) {
  },
  $isGameObject: true
},

Goal: {"": "GameObject;_body,_level,width*,height*,_world",
  get$physicsBody: function() {
    return this._body;
  },
  beginContact$1: function(other) {
    var t1;
    if (!!other.$isPlayer) {
      t1 = this._level;
      t1.game.completeLevel$1(t1);
    }
  },
  Goal$6: function(world, _level, x, y, width, height) {
    var shape, bodyDef, t1;
    shape = V.PolygonShape$();
    bodyDef = V.BodyDef$();
    t1 = bodyDef.position.storage;
    t1[0] = x;
    t1[1] = y;
    bodyDef.type = 2;
    bodyDef.userData = this;
    this._body = world.createBody$1(bodyDef);
    shape.setAsBox$2(this.width / 2, this.height / 2);
    this._body.createFixtureFromShape$1(shape);
  },
  static: {
Goal$: function(world, _level, x, y, width, height) {
  var t1 = new V.Goal(null, _level, width, height, world);
  t1.Goal$6(world, _level, x, y, width, height);
  return t1;
}}

},

Ground: {"": "GameObject;_body,_world",
  Ground$2: function(world, size) {
    var shape, bodyDef, t1;
    shape = V.PolygonShape$();
    bodyDef = V.BodyDef$();
    t1 = bodyDef.position.storage;
    t1[0] = 0;
    t1[1] = -30;
    bodyDef.userData = this;
    this._body = world.createBody$1(bodyDef);
    shape.setAsBox$2(size.storage[0] / 2, 0.2);
    this._body.createFixtureFromShape$1(shape);
  },
  $isWalkable: true,
  static: {
Ground$: function(world, size) {
  var t1 = new V.Ground(null, world);
  t1.Ground$2(world, size);
  return t1;
}}

},

Platform: {"": "GameObject;_body,width*,height*,_world",
  get$physicsBody: function() {
    return this._body;
  },
  Platform$5: function(world, x, y, width, height) {
    var shape, bodyDef, t1;
    shape = V.PolygonShape$();
    bodyDef = V.BodyDef$();
    t1 = bodyDef.position.storage;
    t1[0] = x;
    t1[1] = y;
    bodyDef.userData = this;
    this._body = world.createBody$1(bodyDef);
    shape.setAsBox$2(this.width / 2, this.height / 2);
    this._body.createFixtureFromShape$1(shape);
  },
  static: {
Platform$: function(world, x, y, width, height) {
  var t1 = new V.Platform(null, width, height, world);
  t1.Platform$5(world, x, y, width, height);
  return t1;
}}

},

WalkablePlatform: {"": "Platform;_body,width,height,_world", $isWalkable: true},

Player: {"": "GameObject;_jumpCharges,_body,_world",
  jump$0: function() {
    var t1, t2, t3;
    if (this._jumpCharges < 1)
      return;
    t1 = this._body;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = 0;
    t3[1] = 8;
    t1.applyLinearImpulse$2(t2, this._body.sweep.center);
    this._jumpCharges = this._jumpCharges - 1;
  },
  moveLeft$0: function() {
    var t1, t2, t3;
    t1 = this._body;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = -2;
    t3[1] = 0;
    t1.applyLinearImpulse$2(t2, this._body.sweep.center);
    t1 = this._body._linearVelocity.storage;
    if (t1[0] < -8)
      t1[0] = -8;
  },
  moveRight$0: function() {
    var t1, t2, t3;
    t1 = this._body;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = 2;
    t3[1] = 0;
    t1.applyLinearImpulse$2(t2, this._body.sweep.center);
    t1 = this._body._linearVelocity.storage;
    if (t1[0] > 8)
      t1[0] = 8;
  },
  beginContact$1: function(other) {
    if (!!other.$isWalkable)
      this._jumpCharges = 2;
  },
  Player$2: function(world, position) {
    var shape, bodyDef;
    shape = V.PolygonShape$();
    bodyDef = V.BodyDef$();
    bodyDef.position.setFrom$1(position);
    bodyDef.awake = true;
    bodyDef.type = 2;
    bodyDef.userData = this;
    this._body = world.createBody$1(bodyDef);
    shape.setAsBox$2(2, 4);
    this._body.createFixtureFromShape$1(shape);
  },
  $isPlayer: true,
  static: {
"": "Player_MAX_JUMPS,Player_HEIGHT,Player_WIDTH,Player_MAX_SPEED_X,Player_ACCELERATION_X,Player_ACCELERATION_Y",
Player$: function(world, position) {
  var t1 = new V.Player(2, null, world);
  t1.Player$2(world, position);
  return t1;
}}

},

Wall: {"": "Platform;_body,width,height,_world"},

WorldBorder: {"": "GameObject;_body,size,_world",
  WorldBorder$2: function(world, size) {
    var shape, bodyDef, t1, t2, t3, t4, t5;
    shape = V.PolygonShape$();
    bodyDef = V.BodyDef$();
    t1 = bodyDef.position.storage;
    t1[0] = 0;
    t1[1] = -30;
    bodyDef.userData = this;
    this._body = world.createBody$1(bodyDef);
    t1 = this.size.storage[0];
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t3 = t2.storage;
    t3[0] = -t1 / 2;
    t3[1] = 0;
    t3 = this.size.storage;
    t1 = t3[0];
    t3 = t3[1];
    t4 = new Float32Array(2);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector2(t4);
    t5 = t4.storage;
    t5[0] = -t1 / 2;
    t5[1] = t3 / 2;
    shape.setAsEdge$2(t2, t4);
    this._body.createFixtureFromShape$1(shape);
    t4 = this.size.storage;
    t2 = t4[0];
    t4 = t4[1];
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t5 = t3.storage;
    t5[0] = -t2 / 2;
    t5[1] = t4 / 2;
    t4 = this.size.storage;
    t5 = t4[0];
    t4 = t4[1];
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t1 = t2.storage;
    t1[0] = t5 / 2;
    t1[1] = t4 / 2;
    shape.setAsEdge$2(t3, t2);
    this._body.createFixtureFromShape$1(shape);
    t2 = this.size.storage;
    t3 = t2[0];
    t2 = t2[1];
    t4 = new Float32Array(2);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector2(t4);
    t1 = t4.storage;
    t1[0] = t3 / 2;
    t1[1] = t2 / 2;
    t2 = this.size.storage[0];
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t3 = t1.storage;
    t3[0] = t2 / 2;
    t3[1] = 0;
    shape.setAsEdge$2(t4, t1);
    this._body.createFixtureFromShape$1(shape);
  },
  static: {
WorldBorder$: function(world, size) {
  var t1 = new V.WorldBorder(null, size, world);
  t1.WorldBorder$2(world, size);
  return t1;
}}

},

GameObjectView: {"": "Object;"},

GameWonView: {"": "Object;ctx,img_back_won,rng",
  render$1: function(timestamp) {
    var frame, t1, t2, t3;
    if (typeof timestamp !== "number")
      throw timestamp.$mod();
    frame = C.JSNumber_methods.toInt$0(Math.ceil(C.JSNumber_methods.$mod(timestamp, 800) / 200));
    J.set$fillStyle$x(this.ctx, "#2e422c");
    J.fillRect$4$x(this.ctx, 0, 0, 800, 600);
    if (frame === 1) {
      t1 = this.ctx;
      t2 = new P.Rectangle(0, 0, 800, 600);
      H.setRuntimeTypeInfo(t2, [null]);
      t3 = new P.Rectangle(0, 0, 800, 600);
      H.setRuntimeTypeInfo(t3, [null]);
      J.drawImageToRect$3$sourceRect$x(t1, this.img_back_won, t2, t3);
    } else if (frame === 2) {
      t1 = this.ctx;
      t2 = new P.Rectangle(0, 0, 800, 600);
      H.setRuntimeTypeInfo(t2, [null]);
      t3 = new P.Rectangle(800, 0, 800, 600);
      H.setRuntimeTypeInfo(t3, [null]);
      J.drawImageToRect$3$sourceRect$x(t1, this.img_back_won, t2, t3);
    } else if (frame === 3) {
      t1 = this.ctx;
      t2 = new P.Rectangle(0, 0, 800, 600);
      H.setRuntimeTypeInfo(t2, [null]);
      t3 = new P.Rectangle(0, 600, 800, 600);
      H.setRuntimeTypeInfo(t3, [null]);
      J.drawImageToRect$3$sourceRect$x(t1, this.img_back_won, t2, t3);
    } else if (frame === 4) {
      t1 = this.ctx;
      t2 = new P.Rectangle(0, 0, 800, 600);
      H.setRuntimeTypeInfo(t2, [null]);
      t3 = new P.Rectangle(800, 600, 800, 600);
      H.setRuntimeTypeInfo(t3, [null]);
      J.drawImageToRect$3$sourceRect$x(t1, this.img_back_won, t2, t3);
    }
    t1 = this.ctx;
    J.getInterceptor$x(t1).set$lineWidth(t1, 0.5);
    t1.fillStyle = "#000";
    t1.font = "100px sans-serif";
    t2 = this.rng;
    C.CanvasRenderingContext2D_methods.fillText$3(t1, "YOU DID IT!", 100 + t2.nextInt$1(5), 100 + t2.nextInt$1(5));
  }
},

GoalView: {"": "StaticObjectView;obj,pos,size,img,imgOffset,imgSize",
  render$2: function(canvasDraw, timestamp) {
    var t1, t2;
    t1 = this.obj.get$physicsBody().originTransform;
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    t2 = new T.Vector2(t2);
    t2.setFrom$1(t1.position);
    this.pos = t2;
    V.StaticObjectView.prototype.render$2.call(this, canvasDraw, timestamp);
  },
  static: {
"": "GoalView__img_goal,GoalView__imgOffset,GoalView__imgSize",
}

},

LevelSwapIndicator: {"": "Object;",
  render$3: function(timestamp, ctx, progress) {
    var x;
    J.drawImageScaledFromSource$9$x(ctx, $.get$LevelSwapIndicator_img_indicator_bg(), 0, 0, 500, 10, 10, 10, 780, 10);
    x = J.$add$ns(J.$mul$n(progress, 740), 30);
    ctx.drawImage($.get$LevelSwapIndicator_img_indicator(), 0, 0, 60, 60, x, 5, 20, 20);
  },
  static: {
"": "LevelSwapIndicator_img_indicator_bg,LevelSwapIndicator_img_indicator",
}

},

PlatformView: {"": "StaticObjectView;obj,pos,size,img,imgOffset,imgSize", static: {
"": "PlatformView__img_platform,PlatformView__imgOffset,PlatformView__imgSize",
}
},

WalkablePlatformView: {"": "StaticObjectView;obj,pos,size,img,imgOffset,imgSize", static: {
"": "WalkablePlatformView__img_platform,WalkablePlatformView__imgOffset,WalkablePlatformView__imgSize",
}
},

PlayerView: {"": "GameObjectView;_player",
  render$2: function(canvasDraw, timestamp) {
    var t1, t2, t3, playerPos, playerSize, frame;
    t1 = $.get$PlayerView_img_player();
    t2 = $.get$Game_imagesLoading();
    t1 = J.get$onLoad$x(t1);
    t2.push(t1.get$first(t1));
    t1 = this._player;
    t2 = t1._body.originTransform;
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    playerPos = new T.Vector2(t3);
    playerPos.setFrom$1(t2.position);
    t2 = new Float32Array(2);
    t2.$dartCachedLength = t2.length;
    playerSize = new T.Vector2(t2);
    t2 = playerSize.storage;
    t2[0] = 4;
    t2[1] = 8;
    if (typeof timestamp !== "number")
      throw timestamp.$mod();
    frame = C.JSNumber_methods.toInt$0(Math.ceil(C.JSNumber_methods.$mod(timestamp, 400) / 200));
    t1 = t1._body._linearVelocity.storage;
    if (t1[1] > 0)
      if (frame === 1)
        canvasDraw.drawImageFromSource$7($.get$PlayerView_img_player(), 0, 200, 100, 200, playerPos, playerSize);
      else
        canvasDraw.drawImageFromSource$7($.get$PlayerView_img_player(), 100, 200, 100, 200, playerPos, playerSize);
    else {
      t1 = t1[0];
      if (t1 < 0)
        if (frame === 1)
          canvasDraw.drawImageFromSource$7($.get$PlayerView_img_player(), 0, 400, 100, 200, playerPos, playerSize);
        else
          canvasDraw.drawImageFromSource$7($.get$PlayerView_img_player(), 100, 400, 100, 200, playerPos, playerSize);
      else if (t1 > 0)
        if (frame === 1)
          canvasDraw.drawImageFromSource$7($.get$PlayerView_img_player(), 0, 600, 100, 200, playerPos, playerSize);
        else
          canvasDraw.drawImageFromSource$7($.get$PlayerView_img_player(), 100, 600, 100, 200, playerPos, playerSize);
      else if (frame === 1)
        canvasDraw.drawImageFromSource$7($.get$PlayerView_img_player(), 0, 0, 100, 200, playerPos, playerSize);
      else
        canvasDraw.drawImageFromSource$7($.get$PlayerView_img_player(), 100, 0, 100, 200, playerPos, playerSize);
    }
  },
  static: {
"": "PlayerView_img_player",
}

},

StaticObjectView: {"": "GameObjectView;",
  render$2: function(canvasDraw, timestamp) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.imgOffset.storage;
    t2 = t1[0];
    t1 = t1[1];
    t3 = this.imgSize.storage;
    t4 = t3[0];
    t3 = t3[1];
    t5 = this.pos;
    t6 = new Float32Array(2);
    t6.$dartCachedLength = t6.length;
    t6 = new T.Vector2(t6);
    t6.setFrom$1(t5);
    canvasDraw.drawImageFromSource$7(this.img, t2, t1, t4, t3, t6, this.size);
  },
  StaticObjectView$4: function(obj, img, imgOffset, imgSize) {
    var t1, t2, t3, t4;
    t1 = $.get$Game_imagesLoading();
    t2 = J.get$onLoad$x(this.img);
    t1.push(t2.get$first(t2));
    t2 = this.obj;
    t1 = t2.get$physicsBody().originTransform;
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t3.setFrom$1(t1.position);
    this.pos = t3;
    t3 = t2.get$width(t2);
    t2 = t2.get$height(t2);
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t4 = t1.storage;
    t4[0] = t3;
    t4[1] = t2;
    this.size = t1;
  }
},

ViewCanvasDraw: {"": "Object;ctx,viewport>",
  drawBackgroundImage$3: function(source, pos, size) {
    var t1, t2, t3, t4, t5;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    t1 = new T.Vector2(t1);
    t1.setFrom$1(size);
    size = t1.$div(t1, 2);
    this.viewport.getWorldToScreen$2(pos, pos);
    t1 = pos.storage;
    t1[1] = t1[1] - size.storage[1] / 2;
    size = size.$mul(size, this.viewport.scale);
    t2 = size.storage;
    J.drawImageScaled$5$x(this.ctx, source, t1[0], t1[1], t2[0], t2[1]);
    t3 = this.ctx;
    t4 = t1[0];
    t5 = t2[0];
    J.drawImageScaled$5$x(t3, source, t4 - t5, t1[1], t5, t2[1]);
    t5 = this.ctx;
    t4 = t1[0];
    t3 = t2[0];
    J.drawImageScaled$5$x(t5, source, t4 + t3, t1[1], t3, t2[1]);
    t3 = this.ctx;
    t4 = t1[0];
    t5 = t2[0];
    J.drawImageScaled$5$x(t3, source, t4 - t5 * 2, t1[1], t5, t2[1]);
    t5 = this.ctx;
    t4 = t1[0];
    t3 = t2[0];
    J.drawImageScaled$5$x(t5, source, t4 + t3 * 2, t1[1], t3, t2[1]);
  },
  drawImageFromSource$7: function(source, sourceX, sourceY, sourceWidth, sourceHeight, pos, size) {
    var t1, t2;
    this.viewport.getWorldToScreen$2(pos, pos);
    size = size.$mul(size, this.viewport.scale);
    pos = pos.$sub(pos, size.$div(size, 2));
    t1 = pos.storage;
    t2 = size.storage;
    J.drawImageScaledFromSource$9$x(this.ctx, source, sourceX, sourceY, sourceWidth, sourceHeight, t1[0], t1[1], t2[0], t2[1]);
  }
},

WallView: {"": "StaticObjectView;obj,pos,size,img,imgOffset,imgSize", static: {
"": "WallView__img_platform,WallView__imgOffset,WallView__imgSize",
}
},

WorldBorderView: {"": "GameObjectView;_worldBorder",
  render$2: function(canvasDraw, timestamp) {
  }
}},
1],
["vector_math", "package:vector_math/vector_math.dart", , T, {
Matrix2: {"": "Object;storage<",
  setValues$4: function(arg0, arg1, arg2, arg3) {
    var t1 = this.storage;
    t1[3] = arg3;
    t1[2] = arg2;
    t1[1] = arg1;
    t1[0] = arg0;
    return this;
  },
  setFrom$1: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 3);
    t1[3] = t2[3];
    t2 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 2);
    t1[2] = t2[2];
    t2 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t2[1];
    t2 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    return "[0] " + H.S(this.getRow$1(0)) + "\n[1] " + H.S(this.getRow$1(1)) + "\n";
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 4)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  getRow$1: function(row) {
    var t1, r, t2, t3;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector2(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = 0 + row;
    if (t3 < 0 || t3 >= 4)
      throw H.ioore(t2, t3);
    t1[0] = t2[t3];
    t3 = 2 + row;
    if (t3 < 0 || t3 >= 4)
      throw H.ioore(t2, t3);
    t1[1] = t2[t3];
    return r;
  },
  _mul_scale$1: function(arg) {
    var t1, r, t2;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix2(t1);
    t1 = r.storage;
    t2 = this.storage;
    t1[3] = t2[3] * arg;
    t1[2] = t2[2] * arg;
    t1[1] = t2[1] * arg;
    t1[0] = t2[0] * arg;
    return r;
  },
  _mul_vector$1: function(arg) {
    var t1, r, t2, t3, t4, t5;
    t1 = new Float32Array(2);
    t1.$dartCachedLength = t1.length;
    r = new T.Vector2(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[1];
    t4 = arg.get$storage();
    t4 = C.JSNumber_methods.$mul(t3, t4.$index(t4, 0));
    t3 = t2[3];
    t5 = arg.get$storage();
    t1[1] = t4 + C.JSNumber_methods.$mul(t3, t5.$index(t5, 1));
    t5 = t2[0];
    t3 = arg.get$storage();
    t3 = C.JSNumber_methods.$mul(t5, t3.$index(t3, 0));
    t2 = t2[2];
    t5 = arg.get$storage();
    t1[0] = t3 + C.JSNumber_methods.$mul(t2, t5.$index(t5, 1));
    return r;
  },
  $mul: function(_, arg) {
    var t1;
    if (typeof arg === "number")
      return this._mul_scale$1(arg);
    t1 = J.getInterceptor(arg);
    if (typeof arg === "object" && arg !== null && !!t1.$isVector2)
      return this._mul_vector$1(arg);
    arg.get$dimension();
    throw H.wrapException(new P.ArgumentError(arg));
  },
  $add: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix2(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 + t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 + t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 + t4[2];
    t2 = t2[3];
    t4 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 3);
    t1[3] = t2 + t4[3];
    return r;
  },
  $sub: function(_, arg) {
    var t1, r, t2, t3, t4;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix2(t1);
    t1 = r.storage;
    t2 = this.storage;
    t3 = t2[0];
    t4 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 0);
    t1[0] = t3 - t4[0];
    t4 = t2[1];
    t3 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 1);
    t1[1] = t4 - t3[1];
    t3 = t2[2];
    t4 = arg.get$storage();
    if (2 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 2);
    t1[2] = t3 - t4[2];
    t2 = t2[3];
    t4 = arg.get$storage();
    if (3 >= C.JS_CONST_ZYJ(t4))
      throw H.ioore(t4, 3);
    t1[3] = t2 - t4[3];
    return r;
  },
  transposed$0: function() {
    var t1, r, t2;
    t1 = new Float32Array(4);
    t1.$dartCachedLength = t1.length;
    r = new T.Matrix2(t1);
    t1 = r.storage;
    t2 = this.storage;
    t1[0] = t2[0];
    t1[1] = t2[2];
    t1[2] = t2[1];
    t1[3] = t2[3];
    return r;
  },
  determinant$0: function() {
    var t1 = this.storage;
    return t1[0] * t1[3] - t1[1] * t1[2];
  },
  invert$0: function() {
    var det, invDet, t1, temp;
    det = this.determinant$0();
    if (det === 0)
      return 0;
    invDet = 1 / det;
    t1 = this.storage;
    temp = t1[0];
    t1[0] = t1[3] * invDet;
    t1[1] = -t1[1] * invDet;
    t1[2] = -t1[2] * invDet;
    t1[3] = temp * invDet;
    return det;
  },
  setRotation$1: function(radians) {
    var c, s, t1;
    c = Math.cos(radians);
    s = Math.sin(radians);
    t1 = this.storage;
    t1[0] = c;
    t1[1] = s;
    t1[2] = -s;
    t1[3] = c;
  },
  transform$1: function(_, arg) {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = this.storage;
    t2 = t1[0];
    t3 = arg.storage;
    t4 = t3[0];
    t5 = t1[2];
    t6 = t3[1];
    t7 = t1[1];
    t1 = t1[3];
    t3[0] = t2 * t4 + t5 * t6;
    t3[1] = t7 * t4 + t1 * t6;
    return arg;
  },
  transformed$2: function(arg, out) {
    out.setFrom$1(arg);
    return this.transform$1(this, out);
  }
},

Vector2: {"": "Object;storage<",
  setValues$2: function(x_, y_) {
    var t1 = this.storage;
    t1[0] = x_;
    t1[1] = y_;
    return this;
  },
  setZero$0: function() {
    var t1 = this.storage;
    t1[0] = 0;
    t1[1] = 0;
    return this;
  },
  setFrom$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t2[1];
    t2 = other.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 0);
    t1[0] = t2[0];
    return this;
  },
  toString$0: function(_) {
    var t1 = this.storage;
    return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
  },
  $sub: function(_, other) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t1 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t3 = t3[1];
    t4 = new Float32Array(2);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector2(t4);
    t6 = t4.storage;
    t6[0] = t2 - t5;
    t6[1] = t1 - t3;
    return t4;
  },
  $add: function(_, other) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.get$storage();
    t4 = C.JS_CONST_ZYJ(t3);
    if (0 >= t4)
      throw H.ioore(t3, 0);
    t5 = t3[0];
    t1 = t1[1];
    if (1 >= t4)
      throw H.ioore(t3, 1);
    t3 = t3[1];
    t4 = new Float32Array(2);
    t4.$dartCachedLength = t4.length;
    t4 = new T.Vector2(t4);
    t6 = t4.storage;
    t6[0] = t2 + t5;
    t6[1] = t1 + t3;
    return t4;
  },
  $div: function(_, scale) {
    var o, t1, t2, t3, t4;
    o = 1 / scale;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t4 = t3.storage;
    t4[0] = t2 * o;
    t4[1] = t1 * o;
    return t3;
  },
  $mul: function(_, scale) {
    var t1, t2, t3, t4;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    t3 = new Float32Array(2);
    t3.$dartCachedLength = t3.length;
    t3 = new T.Vector2(t3);
    t4 = t3.storage;
    t4[0] = t2 * scale;
    t4[1] = t1 * scale;
    return t3;
  },
  $index: function(_, i) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 2)
      throw H.ioore(t1, i);
    return t1[i];
  },
  $indexSet: function(_, i, v) {
    var t1 = this.storage;
    if (i >>> 0 !== i || i >= 2)
      throw H.ioore(t1, i);
    t1[i] = v;
  },
  get$length: function(_) {
    var t1, t2;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    return Math.sqrt(t2 * t2 + t1 * t1);
  },
  get$length2: function() {
    var t1, t2;
    t1 = this.storage;
    t2 = t1[0];
    t1 = t1[1];
    return t2 * t2 + t1 * t1;
  },
  normalize$0: function() {
    var l, t1;
    l = this.get$length(this);
    if (l === 0)
      return this;
    l = 1 / l;
    t1 = this.storage;
    t1[0] = t1[0] * l;
    t1[1] = t1[1] * l;
    return this;
  },
  normalizeLength$0: function() {
    var l, t1;
    l = this.get$length(this);
    if (l === 0)
      return 0;
    l = 1 / l;
    t1 = this.storage;
    t1[0] = t1[0] * l;
    t1[1] = t1[1] * l;
    return l;
  },
  dot$1: function(other) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = other.storage;
    return t2 * t3[0] + t1[1] * t3[1];
  },
  cross$1: function(other) {
    var t1, t2;
    t1 = this.storage;
    t2 = other.storage;
    return t1[0] * t2[1] - t1[1] * t2[0];
  },
  add$1: function(_, arg) {
    var t1, t2, t3;
    t1 = this.storage;
    t2 = t1[0];
    t3 = arg.get$storage();
    if (0 >= C.JS_CONST_ZYJ(t3))
      throw H.ioore(t3, 0);
    t1[0] = t2 + t3[0];
    t3 = t1[1];
    t2 = arg.get$storage();
    if (1 >= C.JS_CONST_ZYJ(t2))
      throw H.ioore(t2, 1);
    t1[1] = t3 + t2[1];
    return this;
  },
  sub$1: function(arg) {
    var t1, t2;
    t1 = this.storage;
    t2 = arg.storage;
    t1[0] = t1[0] - t2[0];
    t1[1] = t1[1] - t2[1];
    return this;
  },
  scale$1: function(_, arg) {
    var t1 = this.storage;
    t1[1] = t1[1] * arg;
    t1[0] = t1[0] * arg;
    return this;
  },
  negate$0: function() {
    var t1 = this.storage;
    t1[1] = -t1[1];
    t1[0] = -t1[0];
    return this;
  },
  set$x: function(_, arg) {
    this.storage[0] = arg;
    return arg;
  },
  set$y: function(_, arg) {
    this.storage[1] = arg;
    return arg;
  },
  get$x: function(_) {
    return this.storage[0];
  },
  get$y: function(_) {
    return this.storage[1];
  },
  $isVector2: true
}}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Static function getters
init.globalFunctions.IsolateNatives__processWorkerMessage$closure = H.IsolateNatives__processWorkerMessage$closure = new H.Closure$2(H.IsolateNatives__processWorkerMessage, "IsolateNatives__processWorkerMessage$closure");
init.globalFunctions.toStringWrapper$closure = H.toStringWrapper$closure = new H.Closure$0(H.toStringWrapper, "toStringWrapper$closure");
init.globalFunctions.invokeClosure$closure = H.invokeClosure$closure = new H.Closure$7(H.invokeClosure, "invokeClosure$closure");
init.globalFunctions._asyncRunCallback$closure = P._asyncRunCallback$closure = new H.Closure$0(P._asyncRunCallback, "_asyncRunCallback$closure");
init.globalFunctions._nullDataHandler$closure = P._nullDataHandler$closure = new P.Closure$1(P._nullDataHandler, "_nullDataHandler$closure");
init.globalFunctions._nullErrorHandler$closure = P._nullErrorHandler$closure = new P.Closure$20(P._nullErrorHandler, "_nullErrorHandler$closure");
init.globalFunctions._nullDoneHandler$closure = P._nullDoneHandler$closure = new H.Closure$0(P._nullDoneHandler, "_nullDoneHandler$closure");
init.globalFunctions._defaultEquals$closure = P._defaultEquals$closure = new H.Closure$2(P._defaultEquals, "_defaultEquals$closure");
init.globalFunctions._defaultHashCode$closure = P._defaultHashCode$closure = new P.Closure$1(P._defaultHashCode, "_defaultHashCode$closure");
init.globalFunctions.Comparable_compare$closure = P.Comparable_compare$closure = new H.Closure$2(P.Comparable_compare, "Comparable_compare$closure");
init.globalFunctions.identical$closure = P.identical$closure = new H.Closure$2(P.identical, "identical$closure");
init.globalFunctions.identityHashCode$closure = P.identityHashCode$closure = new P.Closure$1(P.identityHashCode, "identityHashCode$closure");
init.globalFunctions._Html5NodeValidator__standardAttributeValidator$closure = W._Html5NodeValidator__standardAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__standardAttributeValidator, "_Html5NodeValidator__standardAttributeValidator$closure");
init.globalFunctions._Html5NodeValidator__uriAttributeValidator$closure = W._Html5NodeValidator__uriAttributeValidator$closure = new W.Closure$4(W._Html5NodeValidator__uriAttributeValidator, "_Html5NodeValidator__uriAttributeValidator$closure");
init.globalFunctions.main$closure = V.main$closure = new H.Closure$0(V.main, "main$closure");
// Runtime type support
J.JSInt.$isint = true;
J.JSInt.$isnum = true;
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isComparable = true;
J.JSInt.$asComparable = [J.JSNumber];
J.JSInt.$isObject = true;
J.JSDouble.$isdouble = true;
J.JSDouble.$isnum = true;
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isComparable = true;
J.JSDouble.$asComparable = [J.JSNumber];
J.JSDouble.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
J.JSNumber.$isnum = true;
J.JSNumber.$isComparable = true;
J.JSNumber.$asComparable = [J.JSNumber];
J.JSNumber.$isObject = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
J.JSString.$isString = true;
J.JSString.$isComparable = true;
J.JSString.$asComparable = [J.JSString];
J.JSString.$isObject = true;
V.Level.$isLevel = true;
V.Level.$isObject = true;
T.Vector2.$isVector2 = true;
T.Vector2.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
J.JSArray.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isObject = true;
V.GameObjectView.$isGameObjectView = true;
V.GameObjectView.$isObject = true;
V.ClipVertex.$isObject = true;
V.SimplexVertex.$isObject = true;
V.ContactRegister.$isObject = true;
V.Contact.$isObject = true;
V.Body.$isObject = true;
V.PolygonContact.$isObject = true;
V.ManifoldPoint.$isObject = true;
V.PolygonAndCircleContact.$isObject = true;
V.CircleContact.$isObject = true;
V.DynamicTreeNode.$isObject = true;
V.Pair.$isComparable = true;
V.Pair.$asComparable = [null];
V.Pair.$isObject = true;
V.ContactConstraint.$isObject = true;
V.ContactConstraintPoint.$isObject = true;
V.TimeOfImpactConstraint.$isObject = true;
V.Joint.$isObject = true;
V.Velocity.$isObject = true;
V.Position.$isObject = true;
W.Event.$isObject = true;
W.NodeValidator.$isObject = true;
P.ReceivePort.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
P.Symbol.$isSymbol = true;
P.Symbol.$isObject = true;
P.Object.$isObject = true;
P.Timer.$isTimer = true;
P.Timer.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
J.JSBool.$isbool = true;
J.JSBool.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
V.TimeOfImpactOutput.$isTimeOfImpactOutput = true;
V.TimeOfImpactOutput.$isObject = true;
V.TimeOfImpactInput.$isTimeOfImpactInput = true;
V.TimeOfImpactInput.$isObject = true;
V.DistanceOutput.$isDistanceOutput = true;
V.DistanceOutput.$isObject = true;
V.SimplexCache.$isSimplexCache = true;
V.SimplexCache.$isObject = true;
V.DistanceInput.$isDistanceInput = true;
V.DistanceInput.$isObject = true;
V.Fixture.$isFixture = true;
V.Fixture.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
C.C__DelayedDone = new P._DelayedDone();
C.C__Random = new P._Random();
C.C__RootZone = new P._RootZone();
C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_6qb = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_86y = function getTagFallback(o) {
  if (o == null) return "Null";
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.builtin$cls;
    if (typeof name == "string") return name;
    name = constructor.name;
    if (typeof name == "string"
        && name !== ""
        && name !== "Object"
        && name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Cbr = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (userAgent.indexOf("Chrome") >= 0 ||
        userAgent.indexOf("DumpRenderTree") >= 0) {
      return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_TtD = function() {
  function typeNameInChrome(obj) { return obj.constructor.name; }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_ZYJ =     ((typeof version == "function" && typeof os == "object" && "system" in os)
    || (typeof navigator == "object"
        && navigator.userAgent.indexOf('Chrome') != -1))
        ? function(x) { return x.$dartCachedLength || x.length; }
        : function(x) { return x.length; };
;
C.JS_CONST_rD3 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    if (tag == "Document") return null;
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [J.JSString]);
C.List_empty = Isolate.makeConstantList([]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [J.JSString]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [J.JSString]);
C.NodeList_methods = W.NodeList.prototype;
C.Type_oqh = H.createRuntimeType('Uint64List');
C.Type_qxd = H.createRuntimeType('Int64List');
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$.printToZone = null;
$._callbacksAreEnqueued = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.Game_imagesLoaded = false;
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$n(receiver).$mul(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.arc$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).arc$5(receiver, a0, a1, a2, a3, a4);
};
J.beginPath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).beginPath$0(receiver);
};
J.clearRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearRect$4(receiver, a0, a1, a2, a3);
};
J.closePath$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).closePath$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.drawImageScaled$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).drawImageScaled$5(receiver, a0, a1, a2, a3, a4);
};
J.drawImageScaledFromSource$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return J.getInterceptor$x(receiver).drawImageScaledFromSource$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
J.drawImageToRect$3$sourceRect$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).drawImageToRect$3$sourceRect(receiver, a0, a1, a2);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.fill$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).fill$0(receiver);
};
J.fillRect$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).fillRect$4(receiver, a0, a1, a2, a3);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$body$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$body(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$keyCode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keyCode(receiver);
};
J.get$lastChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastChild(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$onLoad$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onLoad(receiver);
};
J.get$position$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$position(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$viewport$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$viewport(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$fillStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fillStyle(receiver, value);
};
J.set$globalAlpha$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$globalAlpha(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$innerHtml$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
J.set$parent$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parent(receiver, value);
};
J.set$src$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$src(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.set$x$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$x(receiver, value);
};
J.set$y$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$y(receiver, value);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() { return this; }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({ $method$: null, toString: function() { return "$receiver$"; } }));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined());
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return P.ListQueue$(null, {func: "void_", void: true});
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return P.List_List(null, null);
});
Isolate.$lazy($, "_safeConsole", "Console__safeConsole", "get$Console__safeConsole", function() {
  return new W.Console();
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(t1, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return H.fillLiteralMap([], P.LinkedHashMap_LinkedHashMap(null, null, null, null, null));
});
Isolate.$lazy($, "imagesLoading", "Game_imagesLoading", "get$Game_imagesLoading", function() {
  var t1 = P.List_List(null, P.Future);
  H.setRuntimeTypeInfo(t1, [P.Future]);
  return t1;
});
Isolate.$lazy($, "_img_goal", "GoalView__img_goal", "get$GoalView__img_goal", function() {
  return W.ImageElement_ImageElement(null, "images/goal.png", null);
});
Isolate.$lazy($, "_imgOffset", "GoalView__imgOffset", "get$GoalView__imgOffset", function() {
  var t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  return new T.Vector2(t1);
});
Isolate.$lazy($, "_imgSize", "GoalView__imgSize", "get$GoalView__imgSize", function() {
  var t1, t2;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector2(t1);
  t2 = t1.storage;
  t2[0] = 100;
  t2[1] = 100;
  return t1;
});
Isolate.$lazy($, "img_indicator_bg", "LevelSwapIndicator_img_indicator_bg", "get$LevelSwapIndicator_img_indicator_bg", function() {
  return W.ImageElement_ImageElement(null, "images/level_indicator_bg.png", null);
});
Isolate.$lazy($, "img_indicator", "LevelSwapIndicator_img_indicator", "get$LevelSwapIndicator_img_indicator", function() {
  return W.ImageElement_ImageElement(null, "images/level_indicator.png", null);
});
Isolate.$lazy($, "_img_platform", "PlatformView__img_platform", "get$PlatformView__img_platform", function() {
  return W.ImageElement_ImageElement(null, "images/platform_not_walkable.png", null);
});
Isolate.$lazy($, "_imgOffset", "PlatformView__imgOffset", "get$PlatformView__imgOffset", function() {
  var t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  return new T.Vector2(t1);
});
Isolate.$lazy($, "_imgSize", "PlatformView__imgSize", "get$PlatformView__imgSize", function() {
  var t1, t2;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector2(t1);
  t2 = t1.storage;
  t2[0] = 200;
  t2[1] = 20;
  return t1;
});
Isolate.$lazy($, "_img_platform", "WalkablePlatformView__img_platform", "get$WalkablePlatformView__img_platform", function() {
  return W.ImageElement_ImageElement(null, "images/platform.png", null);
});
Isolate.$lazy($, "_imgOffset", "WalkablePlatformView__imgOffset", "get$WalkablePlatformView__imgOffset", function() {
  var t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  return new T.Vector2(t1);
});
Isolate.$lazy($, "_imgSize", "WalkablePlatformView__imgSize", "get$WalkablePlatformView__imgSize", function() {
  var t1, t2;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector2(t1);
  t2 = t1.storage;
  t2[0] = 200;
  t2[1] = 20;
  return t1;
});
Isolate.$lazy($, "img_player", "PlayerView_img_player", "get$PlayerView_img_player", function() {
  return W.ImageElement_ImageElement(null, "images/player.png", null);
});
Isolate.$lazy($, "_img_platform", "WallView__img_platform", "get$WallView__img_platform", function() {
  return W.ImageElement_ImageElement(null, "images/wall.png", null);
});
Isolate.$lazy($, "_imgOffset", "WallView__imgOffset", "get$WallView__imgOffset", function() {
  var t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  return new T.Vector2(t1);
});
Isolate.$lazy($, "_imgSize", "WallView__imgSize", "get$WallView__imgSize", function() {
  var t1, t2;
  t1 = new Float32Array(2);
  t1.$dartCachedLength = t1.length;
  t1 = new T.Vector2(t1);
  t2 = t1.storage;
  t2[0] = 20;
  t2[1] = 200;
  return t1;
});
// Native classes

init.functionAliases = {};
;
init.metadata = [];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {};
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  var objectProto = Object.prototype;
  for (var i = 0;; i++) {
    var property = "___dart_dispatch_record_ZxYxX_0_";
    if (i > 0)
      property = rootProperty + "_" + i;
    if (!(property in objectProto))
      return init.dispatchPropertyName = property;
  }
}();
// BEGIN invoke [main].
;(function (callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }

  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;

  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { H.startRootIsolate(V.main$closure); });
  } else {
    H.startRootIsolate(V.main$closure);
  }
});
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, accessors, cls) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable = false;
    if (code == 45) {
      len--;
      code = field.charCodeAt(len - 1);
      field = field.substring(0, len);
      reflectable = true;
    }
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AnchorElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AnchorElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AnchorElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  AreaElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AreaElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AreaElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AreaElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  BaseElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  CanvasElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  CanvasElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function CanvasGradient() {
  }
  CanvasGradient.builtin$cls = "CanvasGradient";
  if (!"name" in CanvasGradient)
    CanvasGradient.name = "CanvasGradient";
  $desc = $collectedClasses.CanvasGradient;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasGradient.prototype = $desc;
  function CanvasPattern() {
  }
  CanvasPattern.builtin$cls = "CanvasPattern";
  if (!"name" in CanvasPattern)
    CanvasPattern.name = "CanvasPattern";
  $desc = $collectedClasses.CanvasPattern;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasPattern.prototype = $desc;
  function CanvasRenderingContext() {
  }
  CanvasRenderingContext.builtin$cls = "CanvasRenderingContext";
  if (!"name" in CanvasRenderingContext)
    CanvasRenderingContext.name = "CanvasRenderingContext";
  $desc = $collectedClasses.CanvasRenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext.prototype = $desc;
  function CanvasRenderingContext2D() {
  }
  CanvasRenderingContext2D.builtin$cls = "CanvasRenderingContext2D";
  if (!"name" in CanvasRenderingContext2D)
    CanvasRenderingContext2D.name = "CanvasRenderingContext2D";
  $desc = $collectedClasses.CanvasRenderingContext2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext2D.prototype = $desc;
  CanvasRenderingContext2D.prototype.set$fillStyle = function(receiver, v) {
    return receiver.fillStyle = v;
  };
  CanvasRenderingContext2D.prototype.set$globalAlpha = function(receiver, v) {
    return receiver.globalAlpha = v;
  };
  CanvasRenderingContext2D.prototype.set$lineWidth = function(receiver, v) {
    return receiver.lineWidth = v;
  };
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DocumentType() {
  }
  DocumentType.builtin$cls = "DocumentType";
  if (!"name" in DocumentType)
    DocumentType.name = "DocumentType";
  $desc = $collectedClasses.DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentType.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  function DomImplementation() {
  }
  DomImplementation.builtin$cls = "DomImplementation";
  if (!"name" in DomImplementation)
    DomImplementation.name = "DomImplementation";
  $desc = $collectedClasses.DomImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomImplementation.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  EmbedElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  HtmlDocument.prototype.get$body = function(receiver) {
    return receiver.body;
  };
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  IFrameElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  IFrameElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ImageElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ImageElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  InputElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  LinkElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  function Location() {
  }
  Location.builtin$cls = "Location";
  if (!"name" in Location)
    Location.name = "Location";
  $desc = $collectedClasses.Location;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Location.prototype = $desc;
  Location.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  Location.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  Location.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  MediaElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  function MidiInput() {
  }
  MidiInput.builtin$cls = "MidiInput";
  if (!"name" in MidiInput)
    MidiInput.name = "MidiInput";
  $desc = $collectedClasses.MidiInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiInput.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  function MidiOutput() {
  }
  MidiOutput.builtin$cls = "MidiOutput";
  if (!"name" in MidiOutput)
    MidiOutput.name = "MidiOutput";
  $desc = $collectedClasses.MidiOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiOutput.prototype = $desc;
  function MidiPort() {
  }
  MidiPort.builtin$cls = "MidiPort";
  if (!"name" in MidiPort)
    MidiPort.name = "MidiPort";
  $desc = $collectedClasses.MidiPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiPort.prototype = $desc;
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  Node.prototype.get$lastChild = function(receiver) {
    return receiver.lastChild;
  };
  Node.prototype.get$nodeType = function(receiver) {
    return receiver.nodeType;
  };
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$position = function(receiver) {
    return receiver.position;
  };
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function Range() {
  }
  Range.builtin$cls = "Range";
  if (!"name" in Range)
    Range.name = "Range";
  $desc = $collectedClasses.Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Range.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  ScriptElement0.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  SourceElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  TrackElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  VideoElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  VideoElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function _Entity() {
  }
  _Entity.builtin$cls = "_Entity";
  if (!"name" in _Entity)
    _Entity.name = "_Entity";
  $desc = $collectedClasses._Entity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Entity.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLBaseFontElement() {
  }
  _HTMLBaseFontElement.builtin$cls = "_HTMLBaseFontElement";
  if (!"name" in _HTMLBaseFontElement)
    _HTMLBaseFontElement.name = "_HTMLBaseFontElement";
  $desc = $collectedClasses._HTMLBaseFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLBaseFontElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedTransformList() {
  }
  AnimatedTransformList.builtin$cls = "AnimatedTransformList";
  if (!"name" in AnimatedTransformList)
    AnimatedTransformList.name = "AnimatedTransformList";
  $desc = $collectedClasses.AnimatedTransformList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedTransformList.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PointList() {
  }
  PointList.builtin$cls = "PointList";
  if (!"name" in PointList)
    PointList.name = "PointList";
  $desc = $collectedClasses.PointList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PointList.prototype = $desc;
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function Rect() {
  }
  Rect.builtin$cls = "Rect";
  if (!"name" in Rect)
    Rect.name = "Rect";
  $desc = $collectedClasses.Rect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rect.prototype = $desc;
  Rect.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  Rect.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  Rect.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  Rect.prototype.set$x = function(receiver, v) {
    return receiver.x = v;
  };
  Rect.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  Rect.prototype.set$y = function(receiver, v) {
    return receiver.y = v;
  };
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  function SvgDocument() {
  }
  SvgDocument.builtin$cls = "SvgDocument";
  if (!"name" in SvgDocument)
    SvgDocument.name = "SvgDocument";
  $desc = $collectedClasses.SvgDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgDocument.prototype = $desc;
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$viewport = function(receiver) {
    return receiver.viewport;
  };
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGAnimateColorElement() {
  }
  _SVGAnimateColorElement.builtin$cls = "_SVGAnimateColorElement";
  if (!"name" in _SVGAnimateColorElement)
    _SVGAnimateColorElement.name = "_SVGAnimateColorElement";
  $desc = $collectedClasses._SVGAnimateColorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAnimateColorElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function RenderingContext() {
  }
  RenderingContext.builtin$cls = "RenderingContext";
  if (!"name" in RenderingContext)
    RenderingContext.name = "RenderingContext";
  $desc = $collectedClasses.RenderingContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RenderingContext.prototype = $desc;
  function BoundClosure$i4(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i4.builtin$cls = "BoundClosure$i4";
  $desc = $collectedClasses.BoundClosure$i4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i4.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  function ByteBuffer() {
  }
  ByteBuffer.builtin$cls = "ByteBuffer";
  if (!"name" in ByteBuffer)
    ByteBuffer.name = "ByteBuffer";
  $desc = $collectedClasses.ByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteBuffer.prototype = $desc;
  function TypedData() {
  }
  TypedData.builtin$cls = "TypedData";
  if (!"name" in TypedData)
    TypedData.name = "TypedData";
  $desc = $collectedClasses.TypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData.prototype = $desc;
  function ByteData() {
  }
  ByteData.builtin$cls = "ByteData";
  if (!"name" in ByteData)
    ByteData.name = "ByteData";
  $desc = $collectedClasses.ByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ByteData.prototype = $desc;
  function Float32List() {
  }
  Float32List.builtin$cls = "Float32List";
  if (!"name" in Float32List)
    Float32List.name = "Float32List";
  $desc = $collectedClasses.Float32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float32List.prototype = $desc;
  function Float64List() {
  }
  Float64List.builtin$cls = "Float64List";
  if (!"name" in Float64List)
    Float64List.name = "Float64List";
  $desc = $collectedClasses.Float64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Float64List.prototype = $desc;
  function Int16List() {
  }
  Int16List.builtin$cls = "Int16List";
  if (!"name" in Int16List)
    Int16List.name = "Int16List";
  $desc = $collectedClasses.Int16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int16List.prototype = $desc;
  function Int32List() {
  }
  Int32List.builtin$cls = "Int32List";
  if (!"name" in Int32List)
    Int32List.name = "Int32List";
  $desc = $collectedClasses.Int32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int32List.prototype = $desc;
  function Int8List() {
  }
  Int8List.builtin$cls = "Int8List";
  if (!"name" in Int8List)
    Int8List.name = "Int8List";
  $desc = $collectedClasses.Int8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int8List.prototype = $desc;
  function Uint16List() {
  }
  Uint16List.builtin$cls = "Uint16List";
  if (!"name" in Uint16List)
    Uint16List.name = "Uint16List";
  $desc = $collectedClasses.Uint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint16List.prototype = $desc;
  function Uint32List() {
  }
  Uint32List.builtin$cls = "Uint32List";
  if (!"name" in Uint32List)
    Uint32List.name = "Uint32List";
  $desc = $collectedClasses.Uint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint32List.prototype = $desc;
  function Uint8ClampedList() {
  }
  Uint8ClampedList.builtin$cls = "Uint8ClampedList";
  if (!"name" in Uint8ClampedList)
    Uint8ClampedList.name = "Uint8ClampedList";
  $desc = $collectedClasses.Uint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8ClampedList.prototype = $desc;
  function Uint8List() {
  }
  Uint8List.builtin$cls = "Uint8List";
  if (!"name" in Uint8List)
    Uint8List.name = "Uint8List";
  $desc = $collectedClasses.Uint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "bool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "List";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSMutableArray() {
  }
  JSMutableArray.builtin$cls = "JSMutableArray";
  if (!"name" in JSMutableArray)
    JSMutableArray.name = "JSMutableArray";
  $desc = $collectedClasses.JSMutableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSMutableArray.prototype = $desc;
  function JSFixedArray() {
  }
  JSFixedArray.builtin$cls = "JSFixedArray";
  if (!"name" in JSFixedArray)
    JSFixedArray.name = "JSFixedArray";
  $desc = $collectedClasses.JSFixedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSFixedArray.prototype = $desc;
  function JSExtendableArray() {
  }
  JSExtendableArray.builtin$cls = "JSExtendableArray";
  if (!"name" in JSExtendableArray)
    JSExtendableArray.name = "JSExtendableArray";
  $desc = $collectedClasses.JSExtendableArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSExtendableArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "num";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "int";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "double";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "String";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function startRootIsolate_closure(entry_0) {
    this.entry_0 = entry_0;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(entry_1) {
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, replyTo_4) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.replyTo_4 = replyTo_4;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(this_1, message_2) {
    this.this_1 = this_1;
    this.message_2 = message_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _NativeJsSendPort_send__closure(box_0, this_3, shouldSerialize_4) {
    this.box_0 = box_0;
    this.this_3 = this_3;
    this.shouldSerialize_4 = shouldSerialize_4;
  }
  _NativeJsSendPort_send__closure.builtin$cls = "_NativeJsSendPort_send__closure";
  if (!"name" in _NativeJsSendPort_send__closure)
    _NativeJsSendPort_send__closure.name = "_NativeJsSendPort_send__closure";
  $desc = $collectedClasses._NativeJsSendPort_send__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send__closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function _WorkerSendPort_send_closure(this_0, message_1) {
    this.this_0 = this_0;
    this.message_1 = message_1;
  }
  _WorkerSendPort_send_closure.builtin$cls = "_WorkerSendPort_send_closure";
  if (!"name" in _WorkerSendPort_send_closure)
    _WorkerSendPort_send_closure.name = "_WorkerSendPort_send_closure";
  $desc = $collectedClasses._WorkerSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort_send_closure.prototype = $desc;
  function ReceivePortImpl(_id, _controller) {
    this._id = _id;
    this._controller = _controller;
  }
  ReceivePortImpl.builtin$cls = "ReceivePortImpl";
  if (!"name" in ReceivePortImpl)
    ReceivePortImpl.name = "ReceivePortImpl";
  $desc = $collectedClasses.ReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePortImpl.prototype = $desc;
  ReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  ReceivePortImpl.prototype.get$_controller = function() {
    return this._controller;
  };
  function BoundClosure$i0(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i0.builtin$cls = "BoundClosure$i0";
  $desc = $collectedClasses.BoundClosure$i0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i0.prototype = $desc;
  function _waitForPendingPorts_closure(callback_0) {
    this.callback_0 = callback_0;
  }
  _waitForPendingPorts_closure.builtin$cls = "_waitForPendingPorts_closure";
  if (!"name" in _waitForPendingPorts_closure)
    _waitForPendingPorts_closure.name = "_waitForPendingPorts_closure";
  $desc = $collectedClasses._waitForPendingPorts_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _waitForPendingPorts_closure.prototype = $desc;
  function _PendingSendPortFinder(ports, _visited) {
    this.ports = ports;
    this._visited = _visited;
  }
  _PendingSendPortFinder.builtin$cls = "_PendingSendPortFinder";
  if (!"name" in _PendingSendPortFinder)
    _PendingSendPortFinder.name = "_PendingSendPortFinder";
  $desc = $collectedClasses._PendingSendPortFinder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingSendPortFinder.prototype = $desc;
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function BoundClosure$1(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$1.builtin$cls = "BoundClosure$1";
  $desc = $collectedClasses.BoundClosure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$1.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function BoundClosure(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function ContactFilter() {
  }
  ContactFilter.builtin$cls = "ContactFilter";
  if (!"name" in ContactFilter)
    ContactFilter.name = "ContactFilter";
  $desc = $collectedClasses.ContactFilter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactFilter.prototype = $desc;
  function ContactImpulse(normalImpulses, tangentImpulses) {
    this.normalImpulses = normalImpulses;
    this.tangentImpulses = tangentImpulses;
  }
  ContactImpulse.builtin$cls = "ContactImpulse";
  if (!"name" in ContactImpulse)
    ContactImpulse.name = "ContactImpulse";
  $desc = $collectedClasses.ContactImpulse;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactImpulse.prototype = $desc;
  function DebugDraw() {
  }
  DebugDraw.builtin$cls = "DebugDraw";
  if (!"name" in DebugDraw)
    DebugDraw.name = "DebugDraw";
  $desc = $collectedClasses.DebugDraw;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DebugDraw.prototype = $desc;
  function AxisAlignedBox(lowerBound, upperBound) {
    this.lowerBound = lowerBound;
    this.upperBound = upperBound;
  }
  AxisAlignedBox.builtin$cls = "AxisAlignedBox";
  if (!"name" in AxisAlignedBox)
    AxisAlignedBox.name = "AxisAlignedBox";
  $desc = $collectedClasses.AxisAlignedBox;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AxisAlignedBox.prototype = $desc;
  AxisAlignedBox.prototype.get$lowerBound = function() {
    return this.lowerBound;
  };
  function BroadPhase(_tree, proxyCount, moveBuffer, _pairBuffer, _pairCapacity, _pairCount, queryProxy) {
    this._tree = _tree;
    this.proxyCount = proxyCount;
    this.moveBuffer = moveBuffer;
    this._pairBuffer = _pairBuffer;
    this._pairCapacity = _pairCapacity;
    this._pairCount = _pairCount;
    this.queryProxy = queryProxy;
  }
  BroadPhase.builtin$cls = "BroadPhase";
  if (!"name" in BroadPhase)
    BroadPhase.name = "BroadPhase";
  $desc = $collectedClasses.BroadPhase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BroadPhase.prototype = $desc;
  function BroadPhase_updatePairs_closure() {
  }
  BroadPhase_updatePairs_closure.builtin$cls = "BroadPhase_updatePairs_closure";
  if (!"name" in BroadPhase_updatePairs_closure)
    BroadPhase_updatePairs_closure.name = "BroadPhase_updatePairs_closure";
  $desc = $collectedClasses.BroadPhase_updatePairs_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BroadPhase_updatePairs_closure.prototype = $desc;
  function DynamicTree(_root, _nodeCount, _lastLeaf, _insertionCount, _path, _nodeStack, _drawVectors, _nodeCounter, _tempVector, _tempBox, center, deltaOne, deltaTwo) {
    this._root = _root;
    this._nodeCount = _nodeCount;
    this._lastLeaf = _lastLeaf;
    this._insertionCount = _insertionCount;
    this._path = _path;
    this._nodeStack = _nodeStack;
    this._drawVectors = _drawVectors;
    this._nodeCounter = _nodeCounter;
    this._tempVector = _tempVector;
    this._tempBox = _tempBox;
    this.center = center;
    this.deltaOne = deltaOne;
    this.deltaTwo = deltaTwo;
  }
  DynamicTree.builtin$cls = "DynamicTree";
  if (!"name" in DynamicTree)
    DynamicTree.name = "DynamicTree";
  $desc = $collectedClasses.DynamicTree;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicTree.prototype = $desc;
  function DynamicTreeNode(box, parent, next, childOne, childTwo, userData, key) {
    this.box = box;
    this.parent = parent;
    this.next = next;
    this.childOne = childOne;
    this.childTwo = childTwo;
    this.userData = userData;
    this.key = key;
  }
  DynamicTreeNode.builtin$cls = "DynamicTreeNode";
  if (!"name" in DynamicTreeNode)
    DynamicTreeNode.name = "DynamicTreeNode";
  $desc = $collectedClasses.DynamicTreeNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicTreeNode.prototype = $desc;
  DynamicTreeNode.prototype.set$parent = function(receiver, v) {
    return this.parent = v;
  };
  DynamicTreeNode.prototype.get$userData = function() {
    return this.userData;
  };
  DynamicTreeNode.prototype.get$key = function(receiver) {
    return this.key;
  };
  function Pair(proxyA, proxyB) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
  }
  Pair.builtin$cls = "Pair";
  if (!"name" in Pair)
    Pair.name = "Pair";
  $desc = $collectedClasses.Pair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Pair.prototype = $desc;
  Pair.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  Pair.prototype.set$proxyA = function(v) {
    return this.proxyA = v;
  };
  Pair.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  Pair.prototype.set$proxyB = function(v) {
    return this.proxyB = v;
  };
  function Collision(_pool, cache, input, output, results1, results2, incidentEdge, localTangent, localNormal, planePoint, tangent, normal, normal1, v11, v12, clipPoints1, clipPoints2) {
    this._pool = _pool;
    this.cache = cache;
    this.input = input;
    this.output = output;
    this.results1 = results1;
    this.results2 = results2;
    this.incidentEdge = incidentEdge;
    this.localTangent = localTangent;
    this.localNormal = localNormal;
    this.planePoint = planePoint;
    this.tangent = tangent;
    this.normal = normal;
    this.normal1 = normal1;
    this.v11 = v11;
    this.v12 = v12;
    this.clipPoints1 = clipPoints1;
    this.clipPoints2 = clipPoints2;
  }
  Collision.builtin$cls = "Collision";
  if (!"name" in Collision)
    Collision.name = "Collision";
  $desc = $collectedClasses.Collision;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Collision.prototype = $desc;
  function ClipVertex(v, id) {
    this.v = v;
    this.id = id;
  }
  ClipVertex.builtin$cls = "ClipVertex";
  if (!"name" in ClipVertex)
    ClipVertex.name = "ClipVertex";
  $desc = $collectedClasses.ClipVertex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipVertex.prototype = $desc;
  ClipVertex.prototype.get$v = function() {
    return this.v;
  };
  function EdgeResults(separation, edgeIndex) {
    this.separation = separation;
    this.edgeIndex = edgeIndex;
  }
  EdgeResults.builtin$cls = "EdgeResults";
  if (!"name" in EdgeResults)
    EdgeResults.name = "EdgeResults";
  $desc = $collectedClasses.EdgeResults;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EdgeResults.prototype = $desc;
  function ContactID(features) {
    this.features = features;
  }
  ContactID.builtin$cls = "ContactID";
  if (!"name" in ContactID)
    ContactID.name = "ContactID";
  $desc = $collectedClasses.ContactID;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactID.prototype = $desc;
  ContactID.prototype.get$features = function() {
    return this.features;
  };
  function Distance(calls, iters, maxIters, simplex, saveA, saveB, closestPoint, searchDirection, temp, normal) {
    this.calls = calls;
    this.iters = iters;
    this.maxIters = maxIters;
    this.simplex = simplex;
    this.saveA = saveA;
    this.saveB = saveB;
    this.closestPoint = closestPoint;
    this.searchDirection = searchDirection;
    this.temp = temp;
    this.normal = normal;
  }
  Distance.builtin$cls = "Distance";
  if (!"name" in Distance)
    Distance.name = "Distance";
  $desc = $collectedClasses.Distance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Distance.prototype = $desc;
  function DistanceInput(proxyA, proxyB, transformA, transformB, useRadii) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
    this.transformA = transformA;
    this.transformB = transformB;
    this.useRadii = useRadii;
  }
  DistanceInput.builtin$cls = "DistanceInput";
  if (!"name" in DistanceInput)
    DistanceInput.name = "DistanceInput";
  $desc = $collectedClasses.DistanceInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceInput.prototype = $desc;
  DistanceInput.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  DistanceInput.prototype.set$proxyA = function(v) {
    return this.proxyA = v;
  };
  DistanceInput.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  DistanceInput.prototype.set$proxyB = function(v) {
    return this.proxyB = v;
  };
  function DistanceOutput(pointA, pointB, distance, iterations) {
    this.pointA = pointA;
    this.pointB = pointB;
    this.distance = distance;
    this.iterations = iterations;
  }
  DistanceOutput.builtin$cls = "DistanceOutput";
  if (!"name" in DistanceOutput)
    DistanceOutput.name = "DistanceOutput";
  $desc = $collectedClasses.DistanceOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceOutput.prototype = $desc;
  function DistanceProxy(vertices, count, radius) {
    this.vertices = vertices;
    this.count = count;
    this.radius = radius;
  }
  DistanceProxy.builtin$cls = "DistanceProxy";
  if (!"name" in DistanceProxy)
    DistanceProxy.name = "DistanceProxy";
  $desc = $collectedClasses.DistanceProxy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DistanceProxy.prototype = $desc;
  DistanceProxy.prototype.get$vertices = function() {
    return this.vertices;
  };
  DistanceProxy.prototype.get$radius = function() {
    return this.radius;
  };
  function Features(referenceEdge, incidentEdge, incidentVertex, flip) {
    this.referenceEdge = referenceEdge;
    this.incidentEdge = incidentEdge;
    this.incidentVertex = incidentVertex;
    this.flip = flip;
  }
  Features.builtin$cls = "Features";
  if (!"name" in Features)
    Features.name = "Features";
  $desc = $collectedClasses.Features;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Features.prototype = $desc;
  Features.prototype.get$referenceEdge = function() {
    return this.referenceEdge;
  };
  function Manifold(points, localNormal, localPoint, type, pointCount) {
    this.points = points;
    this.localNormal = localNormal;
    this.localPoint = localPoint;
    this.type = type;
    this.pointCount = pointCount;
  }
  Manifold.builtin$cls = "Manifold";
  if (!"name" in Manifold)
    Manifold.name = "Manifold";
  $desc = $collectedClasses.Manifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Manifold.prototype = $desc;
  Manifold.prototype.get$points = function(receiver) {
    return this.points;
  };
  Manifold.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  Manifold.prototype.get$pointCount = function() {
    return this.pointCount;
  };
  function ManifoldPoint(localPoint, normalImpulse, tangentImpulse, id) {
    this.localPoint = localPoint;
    this.normalImpulse = normalImpulse;
    this.tangentImpulse = tangentImpulse;
    this.id = id;
  }
  ManifoldPoint.builtin$cls = "ManifoldPoint";
  if (!"name" in ManifoldPoint)
    ManifoldPoint.name = "ManifoldPoint";
  $desc = $collectedClasses.ManifoldPoint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ManifoldPoint.prototype = $desc;
  ManifoldPoint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  ManifoldPoint.prototype.get$normalImpulse = function() {
    return this.normalImpulse;
  };
  ManifoldPoint.prototype.set$normalImpulse = function(v) {
    return this.normalImpulse = v;
  };
  ManifoldPoint.prototype.get$tangentImpulse = function() {
    return this.tangentImpulse;
  };
  ManifoldPoint.prototype.set$tangentImpulse = function(v) {
    return this.tangentImpulse = v;
  };
  function MassData(mass, center, inertia) {
    this.mass = mass;
    this.center = center;
    this.inertia = inertia;
  }
  MassData.builtin$cls = "MassData";
  if (!"name" in MassData)
    MassData.name = "MassData";
  $desc = $collectedClasses.MassData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MassData.prototype = $desc;
  function PolygonShape(centroid, vertices, normals, vertexCount, type, radius) {
    this.centroid = centroid;
    this.vertices = vertices;
    this.normals = normals;
    this.vertexCount = vertexCount;
    this.type = type;
    this.radius = radius;
  }
  PolygonShape.builtin$cls = "PolygonShape";
  if (!"name" in PolygonShape)
    PolygonShape.name = "PolygonShape";
  $desc = $collectedClasses.PolygonShape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonShape.prototype = $desc;
  function Shape() {
  }
  Shape.builtin$cls = "Shape";
  if (!"name" in Shape)
    Shape.name = "Shape";
  $desc = $collectedClasses.Shape;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Shape.prototype = $desc;
  function Simplex(v1, v2, v3, vertices, count, e13, e23, e12, case2, case22, case3, case33) {
    this.v1 = v1;
    this.v2 = v2;
    this.v3 = v3;
    this.vertices = vertices;
    this.count = count;
    this.e13 = e13;
    this.e23 = e23;
    this.e12 = e12;
    this.case2 = case2;
    this.case22 = case22;
    this.case3 = case3;
    this.case33 = case33;
  }
  Simplex.builtin$cls = "Simplex";
  if (!"name" in Simplex)
    Simplex.name = "Simplex";
  $desc = $collectedClasses.Simplex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Simplex.prototype = $desc;
  function SimplexCache(metric, count, indexA, indexB) {
    this.metric = metric;
    this.count = count;
    this.indexA = indexA;
    this.indexB = indexB;
  }
  SimplexCache.builtin$cls = "SimplexCache";
  if (!"name" in SimplexCache)
    SimplexCache.name = "SimplexCache";
  $desc = $collectedClasses.SimplexCache;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexCache.prototype = $desc;
  function SimplexCache_closure() {
  }
  SimplexCache_closure.builtin$cls = "SimplexCache_closure";
  if (!"name" in SimplexCache_closure)
    SimplexCache_closure.name = "SimplexCache_closure";
  $desc = $collectedClasses.SimplexCache_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexCache_closure.prototype = $desc;
  function SimplexCache_closure0() {
  }
  SimplexCache_closure0.builtin$cls = "SimplexCache_closure0";
  if (!"name" in SimplexCache_closure0)
    SimplexCache_closure0.name = "SimplexCache_closure0";
  $desc = $collectedClasses.SimplexCache_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexCache_closure0.prototype = $desc;
  function SimplexVertex(wA, wB, w, a, indexA, indexB) {
    this.wA = wA;
    this.wB = wB;
    this.w = w;
    this.a = a;
    this.indexA = indexA;
    this.indexB = indexB;
  }
  SimplexVertex.builtin$cls = "SimplexVertex";
  if (!"name" in SimplexVertex)
    SimplexVertex.name = "SimplexVertex";
  $desc = $collectedClasses.SimplexVertex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimplexVertex.prototype = $desc;
  SimplexVertex.prototype.get$wA = function() {
    return this.wA;
  };
  function TimeOfImpact(cache, distanceInput, xfA, xfB, distanceOutput, fcn, indexes, sweepA, sweepB, pool) {
    this.cache = cache;
    this.distanceInput = distanceInput;
    this.xfA = xfA;
    this.xfB = xfB;
    this.distanceOutput = distanceOutput;
    this.fcn = fcn;
    this.indexes = indexes;
    this.sweepA = sweepA;
    this.sweepB = sweepB;
    this.pool = pool;
  }
  TimeOfImpact.builtin$cls = "TimeOfImpact";
  if (!"name" in TimeOfImpact)
    TimeOfImpact.name = "TimeOfImpact";
  $desc = $collectedClasses.TimeOfImpact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpact.prototype = $desc;
  function SeparationFunction(proxyA, proxyB, type, localPoint, axis, sweepA, sweepB, localPointA, localPointB, pointA, pointB, localPointA1, localPointA2, normal, localPointB1, localPointB2, axisA, axisB, temp, xfa, xfb) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
    this.type = type;
    this.localPoint = localPoint;
    this.axis = axis;
    this.sweepA = sweepA;
    this.sweepB = sweepB;
    this.localPointA = localPointA;
    this.localPointB = localPointB;
    this.pointA = pointA;
    this.pointB = pointB;
    this.localPointA1 = localPointA1;
    this.localPointA2 = localPointA2;
    this.normal = normal;
    this.localPointB1 = localPointB1;
    this.localPointB2 = localPointB2;
    this.axisA = axisA;
    this.axisB = axisB;
    this.temp = temp;
    this.xfa = xfa;
    this.xfb = xfb;
  }
  SeparationFunction.builtin$cls = "SeparationFunction";
  if (!"name" in SeparationFunction)
    SeparationFunction.name = "SeparationFunction";
  $desc = $collectedClasses.SeparationFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SeparationFunction.prototype = $desc;
  SeparationFunction.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  SeparationFunction.prototype.set$proxyA = function(v) {
    return this.proxyA = v;
  };
  SeparationFunction.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  SeparationFunction.prototype.set$proxyB = function(v) {
    return this.proxyB = v;
  };
  SeparationFunction.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  function TimeOfImpactInput(proxyA, proxyB, sweepA, sweepB, tMax) {
    this.proxyA = proxyA;
    this.proxyB = proxyB;
    this.sweepA = sweepA;
    this.sweepB = sweepB;
    this.tMax = tMax;
  }
  TimeOfImpactInput.builtin$cls = "TimeOfImpactInput";
  if (!"name" in TimeOfImpactInput)
    TimeOfImpactInput.name = "TimeOfImpactInput";
  $desc = $collectedClasses.TimeOfImpactInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactInput.prototype = $desc;
  TimeOfImpactInput.prototype.get$proxyA = function() {
    return this.proxyA;
  };
  TimeOfImpactInput.prototype.get$proxyB = function() {
    return this.proxyB;
  };
  function TimeOfImpactOutput(state, t) {
    this.state = state;
    this.t = t;
  }
  TimeOfImpactOutput.builtin$cls = "TimeOfImpactOutput";
  if (!"name" in TimeOfImpactOutput)
    TimeOfImpactOutput.name = "TimeOfImpactOutput";
  $desc = $collectedClasses.TimeOfImpactOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactOutput.prototype = $desc;
  function WorldManifold(normal, points, pool3, pool4) {
    this.normal = normal;
    this.points = points;
    this.pool3 = pool3;
    this.pool4 = pool4;
  }
  WorldManifold.builtin$cls = "WorldManifold";
  if (!"name" in WorldManifold)
    WorldManifold.name = "WorldManifold";
  $desc = $collectedClasses.WorldManifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldManifold.prototype = $desc;
  function WorldManifold_closure() {
  }
  WorldManifold_closure.builtin$cls = "WorldManifold_closure";
  if (!"name" in WorldManifold_closure)
    WorldManifold_closure.name = "WorldManifold_closure";
  $desc = $collectedClasses.WorldManifold_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldManifold_closure.prototype = $desc;
  function Sweep(localCenter, centerZero, center, angleZero, angle) {
    this.localCenter = localCenter;
    this.centerZero = centerZero;
    this.center = center;
    this.angleZero = angleZero;
    this.angle = angle;
  }
  Sweep.builtin$cls = "Sweep";
  if (!"name" in Sweep)
    Sweep.name = "Sweep";
  $desc = $collectedClasses.Sweep;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Sweep.prototype = $desc;
  Sweep.prototype.get$localCenter = function() {
    return this.localCenter;
  };
  Sweep.prototype.get$centerZero = function() {
    return this.centerZero;
  };
  function Transform(position, rotation) {
    this.position = position;
    this.rotation = rotation;
  }
  Transform.builtin$cls = "Transform";
  if (!"name" in Transform)
    Transform.name = "Transform";
  $desc = $collectedClasses.Transform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Transform.prototype = $desc;
  Transform.prototype.get$position = function(receiver) {
    return this.position;
  };
  Transform.prototype.get$rotation = function() {
    return this.rotation;
  };
  function ViewportTransform() {
  }
  ViewportTransform.builtin$cls = "ViewportTransform";
  if (!"name" in ViewportTransform)
    ViewportTransform.name = "ViewportTransform";
  $desc = $collectedClasses.ViewportTransform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewportTransform.prototype = $desc;
  function Body(world, flags, contactList, sleepTime, userData, _linearVelocity, _angularVelocity, mass, invMass, next, prev, fixtureList, fixtureCount, jointList, _force, _torque, _inertia, invInertia, linearDamping, angularDamping, _type, islandIndex, originTransform, sweep, _fixDef, _pmd, _pxf, oldCenter, tempCenter) {
    this.world = world;
    this.flags = flags;
    this.contactList = contactList;
    this.sleepTime = sleepTime;
    this.userData = userData;
    this._linearVelocity = _linearVelocity;
    this._angularVelocity = _angularVelocity;
    this.mass = mass;
    this.invMass = invMass;
    this.next = next;
    this.prev = prev;
    this.fixtureList = fixtureList;
    this.fixtureCount = fixtureCount;
    this.jointList = jointList;
    this._force = _force;
    this._torque = _torque;
    this._inertia = _inertia;
    this.invInertia = invInertia;
    this.linearDamping = linearDamping;
    this.angularDamping = angularDamping;
    this._type = _type;
    this.islandIndex = islandIndex;
    this.originTransform = originTransform;
    this.sweep = sweep;
    this._fixDef = _fixDef;
    this._pmd = _pmd;
    this._pxf = _pxf;
    this.oldCenter = oldCenter;
    this.tempCenter = tempCenter;
  }
  Body.builtin$cls = "Body";
  if (!"name" in Body)
    Body.name = "Body";
  $desc = $collectedClasses.Body;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Body.prototype = $desc;
  Body.prototype.get$flags = function() {
    return this.flags;
  };
  Body.prototype.get$contactList = function() {
    return this.contactList;
  };
  Body.prototype.get$userData = function() {
    return this.userData;
  };
  Body.prototype.get$_type = function() {
    return this._type;
  };
  Body.prototype.get$sweep = function() {
    return this.sweep;
  };
  function BodyDef(type, angle, userData, position, linearVelocity, angularVelocity, fixedRotation, isSleeping, bullet, allowSleep, linearDamping, angularDamping, awake, active) {
    this.type = type;
    this.angle = angle;
    this.userData = userData;
    this.position = position;
    this.linearVelocity = linearVelocity;
    this.angularVelocity = angularVelocity;
    this.fixedRotation = fixedRotation;
    this.isSleeping = isSleeping;
    this.bullet = bullet;
    this.allowSleep = allowSleep;
    this.linearDamping = linearDamping;
    this.angularDamping = angularDamping;
    this.awake = awake;
    this.active = active;
  }
  BodyDef.builtin$cls = "BodyDef";
  if (!"name" in BodyDef)
    BodyDef.name = "BodyDef";
  $desc = $collectedClasses.BodyDef;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyDef.prototype = $desc;
  BodyDef.prototype.get$position = function(receiver) {
    return this.position;
  };
  function ContactManager(broadPhase, contactList, contactCount, contactFilter, contactListener, pool) {
    this.broadPhase = broadPhase;
    this.contactList = contactList;
    this.contactCount = contactCount;
    this.contactFilter = contactFilter;
    this.contactListener = contactListener;
    this.pool = pool;
  }
  ContactManager.builtin$cls = "ContactManager";
  if (!"name" in ContactManager)
    ContactManager.name = "ContactManager";
  $desc = $collectedClasses.ContactManager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactManager.prototype = $desc;
  function BoundClosure$2(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$2.builtin$cls = "BoundClosure$2";
  $desc = $collectedClasses.BoundClosure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$2.prototype = $desc;
  function CircleContact(flags, prev, next, edge1, edge2, fixtureA, fixtureB, manifold, toiCount, pool, _oldManifold) {
    this.flags = flags;
    this.prev = prev;
    this.next = next;
    this.edge1 = edge1;
    this.edge2 = edge2;
    this.fixtureA = fixtureA;
    this.fixtureB = fixtureB;
    this.manifold = manifold;
    this.toiCount = toiCount;
    this.pool = pool;
    this._oldManifold = _oldManifold;
  }
  CircleContact.builtin$cls = "CircleContact";
  if (!"name" in CircleContact)
    CircleContact.name = "CircleContact";
  $desc = $collectedClasses.CircleContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleContact.prototype = $desc;
  function Contact(manifold) {
    this.manifold = manifold;
  }
  Contact.builtin$cls = "Contact";
  if (!"name" in Contact)
    Contact.name = "Contact";
  $desc = $collectedClasses.Contact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Contact.prototype = $desc;
  Contact.prototype.get$manifold = function() {
    return this.manifold;
  };
  function ContactConstraint(points, localNormal, localPoint, normal, normalMass, K, bodyA, bodyB, type, radius, friction, restitution, pointCount, manifold) {
    this.points = points;
    this.localNormal = localNormal;
    this.localPoint = localPoint;
    this.normal = normal;
    this.normalMass = normalMass;
    this.K = K;
    this.bodyA = bodyA;
    this.bodyB = bodyB;
    this.type = type;
    this.radius = radius;
    this.friction = friction;
    this.restitution = restitution;
    this.pointCount = pointCount;
    this.manifold = manifold;
  }
  ContactConstraint.builtin$cls = "ContactConstraint";
  if (!"name" in ContactConstraint)
    ContactConstraint.name = "ContactConstraint";
  $desc = $collectedClasses.ContactConstraint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactConstraint.prototype = $desc;
  ContactConstraint.prototype.get$points = function(receiver) {
    return this.points;
  };
  ContactConstraint.prototype.get$localNormal = function() {
    return this.localNormal;
  };
  ContactConstraint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  ContactConstraint.prototype.get$normal = function() {
    return this.normal;
  };
  ContactConstraint.prototype.get$bodyA = function() {
    return this.bodyA;
  };
  ContactConstraint.prototype.set$bodyA = function(v) {
    return this.bodyA = v;
  };
  ContactConstraint.prototype.get$bodyB = function() {
    return this.bodyB;
  };
  ContactConstraint.prototype.set$bodyB = function(v) {
    return this.bodyB = v;
  };
  ContactConstraint.prototype.get$type = function(receiver) {
    return this.type;
  };
  ContactConstraint.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  ContactConstraint.prototype.set$radius = function(v) {
    return this.radius = v;
  };
  ContactConstraint.prototype.get$pointCount = function() {
    return this.pointCount;
  };
  ContactConstraint.prototype.set$pointCount = function(v) {
    return this.pointCount = v;
  };
  ContactConstraint.prototype.get$manifold = function() {
    return this.manifold;
  };
  ContactConstraint.prototype.set$manifold = function(v) {
    return this.manifold = v;
  };
  function ContactConstraint_closure() {
  }
  ContactConstraint_closure.builtin$cls = "ContactConstraint_closure";
  if (!"name" in ContactConstraint_closure)
    ContactConstraint_closure.name = "ContactConstraint_closure";
  $desc = $collectedClasses.ContactConstraint_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactConstraint_closure.prototype = $desc;
  function ContactConstraintPoint(localPoint, rA, rB, normalImpulse, tangentImpulse, normalMass, tangentMass, velocityBias) {
    this.localPoint = localPoint;
    this.rA = rA;
    this.rB = rB;
    this.normalImpulse = normalImpulse;
    this.tangentImpulse = tangentImpulse;
    this.normalMass = normalMass;
    this.tangentMass = tangentMass;
    this.velocityBias = velocityBias;
  }
  ContactConstraintPoint.builtin$cls = "ContactConstraintPoint";
  if (!"name" in ContactConstraintPoint)
    ContactConstraintPoint.name = "ContactConstraintPoint";
  $desc = $collectedClasses.ContactConstraintPoint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactConstraintPoint.prototype = $desc;
  ContactConstraintPoint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  ContactConstraintPoint.prototype.get$rA = function() {
    return this.rA;
  };
  ContactConstraintPoint.prototype.get$rB = function() {
    return this.rB;
  };
  ContactConstraintPoint.prototype.get$normalImpulse = function() {
    return this.normalImpulse;
  };
  ContactConstraintPoint.prototype.set$normalImpulse = function(v) {
    return this.normalImpulse = v;
  };
  ContactConstraintPoint.prototype.get$tangentImpulse = function() {
    return this.tangentImpulse;
  };
  ContactConstraintPoint.prototype.set$tangentImpulse = function(v) {
    return this.tangentImpulse = v;
  };
  ContactConstraintPoint.prototype.get$normalMass = function() {
    return this.normalMass;
  };
  ContactConstraintPoint.prototype.get$tangentMass = function() {
    return this.tangentMass;
  };
  function ContactEdge(other, contact, prev, next) {
    this.other = other;
    this.contact = contact;
    this.prev = prev;
    this.next = next;
  }
  ContactEdge.builtin$cls = "ContactEdge";
  if (!"name" in ContactEdge)
    ContactEdge.name = "ContactEdge";
  $desc = $collectedClasses.ContactEdge;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactEdge.prototype = $desc;
  function ContactRegister(creator, primary) {
    this.creator = creator;
    this.primary = primary;
  }
  ContactRegister.builtin$cls = "ContactRegister";
  if (!"name" in ContactRegister)
    ContactRegister.name = "ContactRegister";
  $desc = $collectedClasses.ContactRegister;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactRegister.prototype = $desc;
  ContactRegister.prototype.get$creator = function() {
    return this.creator;
  };
  function ContactSolver(constraints, constraintCount, worldManifold, tangent, temp1, temp2, P, dv, dv1, dv2, x, d, P1, P2, psolver, rA, rB) {
    this.constraints = constraints;
    this.constraintCount = constraintCount;
    this.worldManifold = worldManifold;
    this.tangent = tangent;
    this.temp1 = temp1;
    this.temp2 = temp2;
    this.P = P;
    this.dv = dv;
    this.dv1 = dv1;
    this.dv2 = dv2;
    this.x = x;
    this.d = d;
    this.P1 = P1;
    this.P2 = P2;
    this.psolver = psolver;
    this.rA = rA;
    this.rB = rB;
  }
  ContactSolver.builtin$cls = "ContactSolver";
  if (!"name" in ContactSolver)
    ContactSolver.name = "ContactSolver";
  $desc = $collectedClasses.ContactSolver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactSolver.prototype = $desc;
  ContactSolver.prototype.get$x = function(receiver) {
    return this.x;
  };
  ContactSolver.prototype.get$rA = function() {
    return this.rA;
  };
  ContactSolver.prototype.get$rB = function() {
    return this.rB;
  };
  function ContactSolver_closure() {
  }
  ContactSolver_closure.builtin$cls = "ContactSolver_closure";
  if (!"name" in ContactSolver_closure)
    ContactSolver_closure.name = "ContactSolver_closure";
  $desc = $collectedClasses.ContactSolver_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContactSolver_closure.prototype = $desc;
  function PositionSolverManifold(normal, point, separation, pointA, pointB, temp, planePoint, clipPoint) {
    this.normal = normal;
    this.point = point;
    this.separation = separation;
    this.pointA = pointA;
    this.pointB = pointB;
    this.temp = temp;
    this.planePoint = planePoint;
    this.clipPoint = clipPoint;
  }
  PositionSolverManifold.builtin$cls = "PositionSolverManifold";
  if (!"name" in PositionSolverManifold)
    PositionSolverManifold.name = "PositionSolverManifold";
  $desc = $collectedClasses.PositionSolverManifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionSolverManifold.prototype = $desc;
  function PolygonAndCircleContact(flags, prev, next, edge1, edge2, fixtureA, fixtureB, manifold, toiCount, pool, _oldManifold) {
    this.flags = flags;
    this.prev = prev;
    this.next = next;
    this.edge1 = edge1;
    this.edge2 = edge2;
    this.fixtureA = fixtureA;
    this.fixtureB = fixtureB;
    this.manifold = manifold;
    this.toiCount = toiCount;
    this.pool = pool;
    this._oldManifold = _oldManifold;
  }
  PolygonAndCircleContact.builtin$cls = "PolygonAndCircleContact";
  if (!"name" in PolygonAndCircleContact)
    PolygonAndCircleContact.name = "PolygonAndCircleContact";
  $desc = $collectedClasses.PolygonAndCircleContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonAndCircleContact.prototype = $desc;
  function PolygonContact(flags, prev, next, edge1, edge2, fixtureA, fixtureB, manifold, toiCount, pool, _oldManifold) {
    this.flags = flags;
    this.prev = prev;
    this.next = next;
    this.edge1 = edge1;
    this.edge2 = edge2;
    this.fixtureA = fixtureA;
    this.fixtureB = fixtureB;
    this.manifold = manifold;
    this.toiCount = toiCount;
    this.pool = pool;
    this._oldManifold = _oldManifold;
  }
  PolygonContact.builtin$cls = "PolygonContact";
  if (!"name" in PolygonContact)
    PolygonContact.name = "PolygonContact";
  $desc = $collectedClasses.PolygonContact;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonContact.prototype = $desc;
  function TimeOfImpactConstraint(localPoints, localNormal, localPoint, type, radius, pointCount, bodyA, bodyB) {
    this.localPoints = localPoints;
    this.localNormal = localNormal;
    this.localPoint = localPoint;
    this.type = type;
    this.radius = radius;
    this.pointCount = pointCount;
    this.bodyA = bodyA;
    this.bodyB = bodyB;
  }
  TimeOfImpactConstraint.builtin$cls = "TimeOfImpactConstraint";
  if (!"name" in TimeOfImpactConstraint)
    TimeOfImpactConstraint.name = "TimeOfImpactConstraint";
  $desc = $collectedClasses.TimeOfImpactConstraint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactConstraint.prototype = $desc;
  TimeOfImpactConstraint.prototype.get$localPoints = function() {
    return this.localPoints;
  };
  TimeOfImpactConstraint.prototype.get$localNormal = function() {
    return this.localNormal;
  };
  TimeOfImpactConstraint.prototype.get$localPoint = function() {
    return this.localPoint;
  };
  TimeOfImpactConstraint.prototype.get$type = function(receiver) {
    return this.type;
  };
  TimeOfImpactConstraint.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  TimeOfImpactConstraint.prototype.set$radius = function(v) {
    return this.radius = v;
  };
  TimeOfImpactConstraint.prototype.get$pointCount = function() {
    return this.pointCount;
  };
  TimeOfImpactConstraint.prototype.set$pointCount = function(v) {
    return this.pointCount = v;
  };
  TimeOfImpactConstraint.prototype.get$bodyA = function() {
    return this.bodyA;
  };
  TimeOfImpactConstraint.prototype.set$bodyA = function(v) {
    return this.bodyA = v;
  };
  TimeOfImpactConstraint.prototype.get$bodyB = function() {
    return this.bodyB;
  };
  TimeOfImpactConstraint.prototype.set$bodyB = function(v) {
    return this.bodyB = v;
  };
  function TimeOfImpactConstraint_closure() {
  }
  TimeOfImpactConstraint_closure.builtin$cls = "TimeOfImpactConstraint_closure";
  if (!"name" in TimeOfImpactConstraint_closure)
    TimeOfImpactConstraint_closure.name = "TimeOfImpactConstraint_closure";
  $desc = $collectedClasses.TimeOfImpactConstraint_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactConstraint_closure.prototype = $desc;
  function TimeOfImpactSolver(constraints, count, toiBody, psm, rA, rB, P, temp) {
    this.constraints = constraints;
    this.count = count;
    this.toiBody = toiBody;
    this.psm = psm;
    this.rA = rA;
    this.rB = rB;
    this.P = P;
    this.temp = temp;
  }
  TimeOfImpactSolver.builtin$cls = "TimeOfImpactSolver";
  if (!"name" in TimeOfImpactSolver)
    TimeOfImpactSolver.name = "TimeOfImpactSolver";
  $desc = $collectedClasses.TimeOfImpactSolver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactSolver.prototype = $desc;
  TimeOfImpactSolver.prototype.get$rA = function() {
    return this.rA;
  };
  TimeOfImpactSolver.prototype.get$rB = function() {
    return this.rB;
  };
  function TimeOfImpactSolver_closure() {
  }
  TimeOfImpactSolver_closure.builtin$cls = "TimeOfImpactSolver_closure";
  if (!"name" in TimeOfImpactSolver_closure)
    TimeOfImpactSolver_closure.name = "TimeOfImpactSolver_closure";
  $desc = $collectedClasses.TimeOfImpactSolver_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactSolver_closure.prototype = $desc;
  function TimeOfImpactSolverManifold(normal, point, separation, pointA, pointB, temp, planePoint, clipPoint) {
    this.normal = normal;
    this.point = point;
    this.separation = separation;
    this.pointA = pointA;
    this.pointB = pointB;
    this.temp = temp;
    this.planePoint = planePoint;
    this.clipPoint = clipPoint;
  }
  TimeOfImpactSolverManifold.builtin$cls = "TimeOfImpactSolverManifold";
  if (!"name" in TimeOfImpactSolverManifold)
    TimeOfImpactSolverManifold.name = "TimeOfImpactSolverManifold";
  $desc = $collectedClasses.TimeOfImpactSolverManifold;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeOfImpactSolverManifold.prototype = $desc;
  function Filter(categoryBits, maskBits, groupIndex) {
    this.categoryBits = categoryBits;
    this.maskBits = maskBits;
    this.groupIndex = groupIndex;
  }
  Filter.builtin$cls = "Filter";
  if (!"name" in Filter)
    Filter.name = "Filter";
  $desc = $collectedClasses.Filter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Filter.prototype = $desc;
  Filter.prototype.get$categoryBits = function() {
    return this.categoryBits;
  };
  function Fixture(box, density, next, body, shape, friction, restitution, proxy, filter, isSensor, userData, _poolOne, _poolTwo) {
    this.box = box;
    this.density = density;
    this.next = next;
    this.body = body;
    this.shape = shape;
    this.friction = friction;
    this.restitution = restitution;
    this.proxy = proxy;
    this.filter = filter;
    this.isSensor = isSensor;
    this.userData = userData;
    this._poolOne = _poolOne;
    this._poolTwo = _poolTwo;
  }
  Fixture.builtin$cls = "Fixture";
  if (!"name" in Fixture)
    Fixture.name = "Fixture";
  $desc = $collectedClasses.Fixture;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Fixture.prototype = $desc;
  Fixture.prototype.get$body = function(receiver) {
    return this.body;
  };
  Fixture.prototype.get$shape = function(receiver) {
    return this.shape;
  };
  Fixture.prototype.get$proxy = function() {
    return this.proxy;
  };
  Fixture.prototype.get$filter = function() {
    return this.filter;
  };
  Fixture.prototype.get$isSensor = function() {
    return this.isSensor;
  };
  function FixtureDef(shape, userData, friction, restitution, density, isSensor, filter) {
    this.shape = shape;
    this.userData = userData;
    this.friction = friction;
    this.restitution = restitution;
    this.density = density;
    this.isSensor = isSensor;
    this.filter = filter;
  }
  FixtureDef.builtin$cls = "FixtureDef";
  if (!"name" in FixtureDef)
    FixtureDef.name = "FixtureDef";
  $desc = $collectedClasses.FixtureDef;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixtureDef.prototype = $desc;
  function Island(listener, bodies, contacts, joints, positions, velocities, bodyCount, jointCount, contactCount, bodyCapacity, contactCapacity, jointCapacity, positionIterationCount, _contactSolver, _translation, impulse) {
    this.listener = listener;
    this.bodies = bodies;
    this.contacts = contacts;
    this.joints = joints;
    this.positions = positions;
    this.velocities = velocities;
    this.bodyCount = bodyCount;
    this.jointCount = jointCount;
    this.contactCount = contactCount;
    this.bodyCapacity = bodyCapacity;
    this.contactCapacity = contactCapacity;
    this.jointCapacity = jointCapacity;
    this.positionIterationCount = positionIterationCount;
    this._contactSolver = _contactSolver;
    this._translation = _translation;
    this.impulse = impulse;
  }
  Island.builtin$cls = "Island";
  if (!"name" in Island)
    Island.name = "Island";
  $desc = $collectedClasses.Island;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Island.prototype = $desc;
  function Position(x, a) {
    this.x = x;
    this.a = a;
  }
  Position.builtin$cls = "Position";
  if (!"name" in Position)
    Position.name = "Position";
  $desc = $collectedClasses.Position;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Position.prototype = $desc;
  Position.prototype.get$x = function(receiver) {
    return this.x;
  };
  Position.prototype.set$x = function(receiver, v) {
    return this.x = v;
  };
  function Velocity(v, a) {
    this.v = v;
    this.a = a;
  }
  Velocity.builtin$cls = "Velocity";
  if (!"name" in Velocity)
    Velocity.name = "Velocity";
  $desc = $collectedClasses.Velocity;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Velocity.prototype = $desc;
  function Joint() {
  }
  Joint.builtin$cls = "Joint";
  if (!"name" in Joint)
    Joint.name = "Joint";
  $desc = $collectedClasses.Joint;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Joint.prototype = $desc;
  function TimeStep(dt, inv_dt, dtRatio, velocityIterations, positionIterations, warmStarting) {
    this.dt = dt;
    this.inv_dt = inv_dt;
    this.dtRatio = dtRatio;
    this.velocityIterations = velocityIterations;
    this.positionIterations = positionIterations;
    this.warmStarting = warmStarting;
  }
  TimeStep.builtin$cls = "TimeStep";
  if (!"name" in TimeStep)
    TimeStep.name = "TimeStep";
  $desc = $collectedClasses.TimeStep;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimeStep.prototype = $desc;
  function World(_flags, _contactManager, _bodyList, _jointList, _bodyCount, _jointCount, _gravity, _allowSleep, _debugDraw, _fixtureDestructionListener, _jointDestructionListener, _pool, _inverseTimestep, _warmStarting, _continuousPhysics, _contactStacks, center, axis, timestep, cA, cB, wqwrapper, toiInput, toiOutput, backup, toiSolver, contacts, island, stack) {
    this._flags = _flags;
    this._contactManager = _contactManager;
    this._bodyList = _bodyList;
    this._jointList = _jointList;
    this._bodyCount = _bodyCount;
    this._jointCount = _jointCount;
    this._gravity = _gravity;
    this._allowSleep = _allowSleep;
    this._debugDraw = _debugDraw;
    this._fixtureDestructionListener = _fixtureDestructionListener;
    this._jointDestructionListener = _jointDestructionListener;
    this._pool = _pool;
    this._inverseTimestep = _inverseTimestep;
    this._warmStarting = _warmStarting;
    this._continuousPhysics = _continuousPhysics;
    this._contactStacks = _contactStacks;
    this.center = center;
    this.axis = axis;
    this.timestep = timestep;
    this.cA = cA;
    this.cB = cB;
    this.wqwrapper = wqwrapper;
    this.toiInput = toiInput;
    this.toiOutput = toiOutput;
    this.backup = backup;
    this.toiSolver = toiSolver;
    this.contacts = contacts;
    this.island = island;
    this.stack = stack;
  }
  World.builtin$cls = "World";
  if (!"name" in World)
    World.name = "World";
  $desc = $collectedClasses.World;
  if ($desc instanceof Array)
    $desc = $desc[1];
  World.prototype = $desc;
  function WorldQueryWrapper(broadPhase, callback) {
    this.broadPhase = broadPhase;
    this.callback = callback;
  }
  WorldQueryWrapper.builtin$cls = "WorldQueryWrapper";
  if (!"name" in WorldQueryWrapper)
    WorldQueryWrapper.name = "WorldQueryWrapper";
  $desc = $collectedClasses.WorldQueryWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldQueryWrapper.prototype = $desc;
  function DefaultWorldPool(collision, timeOfImpact, distance) {
    this.collision = collision;
    this.timeOfImpact = timeOfImpact;
    this.distance = distance;
  }
  DefaultWorldPool.builtin$cls = "DefaultWorldPool";
  if (!"name" in DefaultWorldPool)
    DefaultWorldPool.name = "DefaultWorldPool";
  $desc = $collectedClasses.DefaultWorldPool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefaultWorldPool.prototype = $desc;
  function CanvasDraw(ctx, flags, viewportTransform) {
    this.ctx = ctx;
    this.flags = flags;
    this.viewportTransform = viewportTransform;
  }
  CanvasDraw.builtin$cls = "CanvasDraw";
  if (!"name" in CanvasDraw)
    CanvasDraw.name = "CanvasDraw";
  $desc = $collectedClasses.CanvasDraw;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasDraw.prototype = $desc;
  function CanvasViewportTransform(yFlip, extents, scale, center) {
    this.yFlip = yFlip;
    this.extents = extents;
    this.scale = scale;
    this.center = center;
  }
  CanvasViewportTransform.builtin$cls = "CanvasViewportTransform";
  if (!"name" in CanvasViewportTransform)
    CanvasViewportTransform.name = "CanvasViewportTransform";
  $desc = $collectedClasses.CanvasViewportTransform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasViewportTransform.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(_source, _f) {
    this._source = _source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_wait_handleError(box_0) {
    this.box_0 = box_0;
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_handleError.prototype = $desc;
  function Future_wait_closure(box_0, pos_1) {
    this.box_0 = box_0;
    this.pos_1 = pos_1;
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  function BoundClosure$20(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$20.builtin$cls = "BoundClosure$20";
  $desc = $collectedClasses.BoundClosure$20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$20.prototype = $desc;
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainFutures_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainFutures_closure.builtin$cls = "_Future__chainFutures_closure";
  if (!"name" in _Future__chainFutures_closure)
    _Future__chainFutures_closure.name = "_Future__chainFutures_closure";
  $desc = $collectedClasses._Future__chainFutures_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure.prototype = $desc;
  function _Future__chainFutures_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainFutures_closure0.builtin$cls = "_Future__chainFutures_closure0";
  if (!"name" in _Future__chainFutures_closure0)
    _Future__chainFutures_closure0.name = "_Future__chainFutures_closure0";
  $desc = $collectedClasses._Future__chainFutures_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainFutures_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, value_1) {
    this.this_0 = this_0;
    this.value_1 = value_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_closure(box_2, listener_3) {
    this.box_2 = box_2;
    this.listener_3 = listener_3;
  }
  _Future__propagateToListeners_closure.builtin$cls = "_Future__propagateToListeners_closure";
  if (!"name" in _Future__propagateToListeners_closure)
    _Future__propagateToListeners_closure.name = "_Future__propagateToListeners_closure";
  $desc = $collectedClasses._Future__propagateToListeners_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure.prototype = $desc;
  function _Future__propagateToListeners_closure0(box_2, box_1, hasError_4, listener_5) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_4 = hasError_4;
    this.listener_5 = listener_5;
  }
  _Future__propagateToListeners_closure0.builtin$cls = "_Future__propagateToListeners_closure0";
  if (!"name" in _Future__propagateToListeners_closure0)
    _Future__propagateToListeners_closure0.name = "_Future__propagateToListeners_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_closure0.prototype = $desc;
  function _Future__propagateToListeners__closure(box_2, listener_6) {
    this.box_2 = box_2;
    this.listener_6 = listener_6;
  }
  _Future__propagateToListeners__closure.builtin$cls = "_Future__propagateToListeners__closure";
  if (!"name" in _Future__propagateToListeners__closure)
    _Future__propagateToListeners__closure.name = "_Future__propagateToListeners__closure";
  $desc = $collectedClasses._Future__propagateToListeners__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure.prototype = $desc;
  function _Future__propagateToListeners__closure0(box_0, listener_7) {
    this.box_0 = box_0;
    this.listener_7 = listener_7;
  }
  _Future__propagateToListeners__closure0.builtin$cls = "_Future__propagateToListeners__closure0";
  if (!"name" in _Future__propagateToListeners__closure0)
    _Future__propagateToListeners__closure0.name = "_Future__propagateToListeners__closure0";
  $desc = $collectedClasses._Future__propagateToListeners__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners__closure0.prototype = $desc;
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_first_closure(box_0, this_1, future_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.future_2 = future_2;
  }
  Stream_first_closure.builtin$cls = "Stream_first_closure";
  if (!"name" in Stream_first_closure)
    Stream_first_closure.name = "Stream_first_closure";
  $desc = $collectedClasses.Stream_first_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure.prototype = $desc;
  function Stream_first_closure0(future_3) {
    this.future_3 = future_3;
  }
  Stream_first_closure0.builtin$cls = "Stream_first_closure0";
  if (!"name" in Stream_first_closure0)
    Stream_first_closure0.name = "Stream_first_closure0";
  $desc = $collectedClasses.Stream_first_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function _StreamController() {
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController.prototype = $desc;
  function _StreamController__subscribe_closure(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__subscribe_closure.prototype = $desc;
  function _StreamController__recordCancel_complete(this_0) {
    this.this_0 = this_0;
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  function _SyncStreamControllerDispatch() {
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamControllerDispatch() {
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _AsyncStreamController.builtin$cls = "_AsyncStreamController";
  if (!"name" in _AsyncStreamController)
    _AsyncStreamController.name = "_AsyncStreamController";
  $desc = $collectedClasses._AsyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncStreamController.prototype = $desc;
  _AsyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _AsyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _AsyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _AsyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__AsyncStreamControllerDispatch() {
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
  }
  _SyncStreamController.builtin$cls = "_SyncStreamController";
  if (!"name" in _SyncStreamController)
    _SyncStreamController.name = "_SyncStreamController";
  $desc = $collectedClasses._SyncStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncStreamController.prototype = $desc;
  _SyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _SyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _SyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _SyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__SyncStreamControllerDispatch() {
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  function _ControllerStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_async$_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_controller = _async$_controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  function BoundClosure$0(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$0.builtin$cls = "BoundClosure$0";
  $desc = $collectedClasses.BoundClosure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$0.prototype = $desc;
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _cancelAndValue_closure(future_0, value_1) {
    this.future_0 = future_0;
    this.value_1 = value_1;
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndValue_closure.prototype = $desc;
  function Timer() {
  }
  Timer.builtin$cls = "Timer";
  if (!"name" in Timer)
    Timer.name = "Timer";
  $desc = $collectedClasses.Timer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Timer.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _keys, _offset, _collection$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _collection$_value, _collection$_next, _previous) {
    this._key = _key;
    this._collection$_value = _collection$_value;
    this._collection$_next = _collection$_next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_collection$_value = function() {
    return this._collection$_value;
  };
  LinkedHashMapCell.prototype.set$_collection$_value = function(v) {
    return this._collection$_value = v;
  };
  LinkedHashMapCell.prototype.get$_collection$_next = function() {
    return this._collection$_next;
  };
  LinkedHashMapCell.prototype.set$_collection$_next = function(v) {
    return this._collection$_next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet() {
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_collection$_element, _collection$_next, _previous) {
    this._collection$_element = _collection$_element;
    this._collection$_next = _collection$_next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_collection$_element = function() {
    return this._collection$_element;
  };
  LinkedHashSetCell.prototype.get$_collection$_next = function() {
    return this._collection$_next;
  };
  LinkedHashSetCell.prototype.set$_collection$_next = function(v) {
    return this._collection$_next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function Comparable() {
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comparable.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Console() {
  }
  Console.builtin$cls = "Console";
  if (!"name" in Console)
    Console.name = "Console";
  $desc = $collectedClasses.Console;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Console.prototype = $desc;
  function BoundClosure$i1(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure$i1.builtin$cls = "BoundClosure$i1";
  $desc = $collectedClasses.BoundClosure$i1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure$i1.prototype = $desc;
  function Element_Element$html_closure() {
  }
  Element_Element$html_closure.builtin$cls = "Element_Element$html_closure";
  if (!"name" in Element_Element$html_closure)
    Element_Element$html_closure.name = "Element_Element$html_closure";
  $desc = $collectedClasses.Element_Element$html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element_Element$html_closure.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function Window_animationFrame_closure(completer_0) {
    this.completer_0 = completer_0;
  }
  Window_animationFrame_closure.builtin$cls = "Window_animationFrame_closure";
  if (!"name" in Window_animationFrame_closure)
    Window_animationFrame_closure.name = "Window_animationFrame_closure";
  $desc = $collectedClasses.Window_animationFrame_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window_animationFrame_closure.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function _AttributeMap() {
  }
  _AttributeMap.builtin$cls = "_AttributeMap";
  if (!"name" in _AttributeMap)
    _AttributeMap.name = "_AttributeMap";
  $desc = $collectedClasses._AttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap.prototype = $desc;
  function _ElementAttributeMap(_element) {
    this._element = _element;
  }
  _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
  if (!"name" in _ElementAttributeMap)
    _ElementAttributeMap.name = "_ElementAttributeMap";
  $desc = $collectedClasses._ElementAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementAttributeMap.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _Html5NodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
  if (!"name" in _Html5NodeValidator)
    _Html5NodeValidator.name = "_Html5NodeValidator";
  $desc = $collectedClasses._Html5NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Html5NodeValidator.prototype = $desc;
  _Html5NodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function NodeValidatorBuilder(_validators) {
    this._validators = _validators;
  }
  NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
  if (!"name" in NodeValidatorBuilder)
    NodeValidatorBuilder.name = "NodeValidatorBuilder";
  $desc = $collectedClasses.NodeValidatorBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder.prototype = $desc;
  function NodeValidatorBuilder_allowsElement_closure(element_0) {
    this.element_0 = element_0;
  }
  NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
  if (!"name" in NodeValidatorBuilder_allowsElement_closure)
    NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowsAttribute_closure(element_0, attributeName_1, value_2) {
    this.element_0 = element_0;
    this.attributeName_1 = attributeName_1;
    this.value_2 = value_2;
  }
  NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
  if (!"name" in NodeValidatorBuilder_allowsAttribute_closure)
    NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsAttribute_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
  function _SimpleNodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
  if (!"name" in _SimpleNodeValidator)
    _SimpleNodeValidator.name = "_SimpleNodeValidator";
  $desc = $collectedClasses._SimpleNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNodeValidator.prototype = $desc;
  _SimpleNodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this._templateAttrs = _templateAttrs;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
  if (!"name" in _TemplatingNodeValidator)
    _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
  $desc = $collectedClasses._TemplatingNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator_closure() {
  }
  _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
  if (!"name" in _TemplatingNodeValidator_closure)
    _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
  $desc = $collectedClasses._TemplatingNodeValidator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator_closure.prototype = $desc;
  function _SvgNodeValidator() {
  }
  _SvgNodeValidator.builtin$cls = "_SvgNodeValidator";
  if (!"name" in _SvgNodeValidator)
    _SvgNodeValidator.name = "_SvgNodeValidator";
  $desc = $collectedClasses._SvgNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SvgNodeValidator.prototype = $desc;
  function FixedSizeListIterator(_array, _html$_length, _position, _html$_current) {
    this._array = _array;
    this._html$_length = _html$_length;
    this._position = _position;
    this._html$_current = _html$_current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _LocationWrapper(_ptr) {
    this._ptr = _ptr;
  }
  _LocationWrapper.builtin$cls = "_LocationWrapper";
  if (!"name" in _LocationWrapper)
    _LocationWrapper.name = "_LocationWrapper";
  $desc = $collectedClasses._LocationWrapper;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocationWrapper.prototype = $desc;
  function NodeValidator() {
  }
  NodeValidator.builtin$cls = "NodeValidator";
  if (!"name" in NodeValidator)
    NodeValidator.name = "NodeValidator";
  $desc = $collectedClasses.NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidator.prototype = $desc;
  function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
    this._hiddenAnchor = _hiddenAnchor;
    this._loc = _loc;
  }
  _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
  if (!"name" in _SameOriginUriPolicy)
    _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
  $desc = $collectedClasses._SameOriginUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SameOriginUriPolicy.prototype = $desc;
  function _ValidatingTreeSanitizer(validator) {
    this.validator = validator;
  }
  _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
  if (!"name" in _ValidatingTreeSanitizer)
    _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
  $desc = $collectedClasses._ValidatingTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer.prototype = $desc;
  function _ValidatingTreeSanitizer_sanitizeTree_walk(this_0) {
    this.this_0 = this_0;
  }
  _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  if (!"name" in _ValidatingTreeSanitizer_sanitizeTree_walk)
    _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  $desc = $collectedClasses._ValidatingTreeSanitizer_sanitizeTree_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
  function ReceivePort() {
  }
  ReceivePort.builtin$cls = "ReceivePort";
  if (!"name" in ReceivePort)
    ReceivePort.name = "ReceivePort";
  $desc = $collectedClasses.ReceivePort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReceivePort.prototype = $desc;
  function _Random() {
  }
  _Random.builtin$cls = "_Random";
  if (!"name" in _Random)
    _Random.name = "_Random";
  $desc = $collectedClasses._Random;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Random.prototype = $desc;
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function Rectangle(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rectangle.prototype = $desc;
  Rectangle.prototype.get$left = function() {
    return this.left;
  };
  function TypedData_ListMixin() {
  }
  TypedData_ListMixin.builtin$cls = "TypedData_ListMixin";
  if (!"name" in TypedData_ListMixin)
    TypedData_ListMixin.name = "TypedData_ListMixin";
  $desc = $collectedClasses.TypedData_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin() {
  }
  TypedData_ListMixin_FixedLengthListMixin.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin)
    TypedData_ListMixin_FixedLengthListMixin.name = "TypedData_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin.prototype = $desc;
  function TypedData_ListMixin0() {
  }
  TypedData_ListMixin0.builtin$cls = "TypedData_ListMixin0";
  if (!"name" in TypedData_ListMixin0)
    TypedData_ListMixin0.name = "TypedData_ListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin0.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin0() {
  }
  TypedData_ListMixin_FixedLengthListMixin0.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin0";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin0)
    TypedData_ListMixin_FixedLengthListMixin0.name = "TypedData_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function TypedData_ListMixin1() {
  }
  TypedData_ListMixin1.builtin$cls = "TypedData_ListMixin1";
  if (!"name" in TypedData_ListMixin1)
    TypedData_ListMixin1.name = "TypedData_ListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin1.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin1() {
  }
  TypedData_ListMixin_FixedLengthListMixin1.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin1";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin1)
    TypedData_ListMixin_FixedLengthListMixin1.name = "TypedData_ListMixin_FixedLengthListMixin1";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin1.prototype = $desc;
  function TypedData_ListMixin2() {
  }
  TypedData_ListMixin2.builtin$cls = "TypedData_ListMixin2";
  if (!"name" in TypedData_ListMixin2)
    TypedData_ListMixin2.name = "TypedData_ListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin2.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin2() {
  }
  TypedData_ListMixin_FixedLengthListMixin2.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin2";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin2)
    TypedData_ListMixin_FixedLengthListMixin2.name = "TypedData_ListMixin_FixedLengthListMixin2";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin2.prototype = $desc;
  function TypedData_ListMixin3() {
  }
  TypedData_ListMixin3.builtin$cls = "TypedData_ListMixin3";
  if (!"name" in TypedData_ListMixin3)
    TypedData_ListMixin3.name = "TypedData_ListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin3.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin3() {
  }
  TypedData_ListMixin_FixedLengthListMixin3.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin3";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin3)
    TypedData_ListMixin_FixedLengthListMixin3.name = "TypedData_ListMixin_FixedLengthListMixin3";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin3.prototype = $desc;
  function TypedData_ListMixin4() {
  }
  TypedData_ListMixin4.builtin$cls = "TypedData_ListMixin4";
  if (!"name" in TypedData_ListMixin4)
    TypedData_ListMixin4.name = "TypedData_ListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin4.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin4() {
  }
  TypedData_ListMixin_FixedLengthListMixin4.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin4";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin4)
    TypedData_ListMixin_FixedLengthListMixin4.name = "TypedData_ListMixin_FixedLengthListMixin4";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin4.prototype = $desc;
  function TypedData_ListMixin5() {
  }
  TypedData_ListMixin5.builtin$cls = "TypedData_ListMixin5";
  if (!"name" in TypedData_ListMixin5)
    TypedData_ListMixin5.name = "TypedData_ListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin5.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin5() {
  }
  TypedData_ListMixin_FixedLengthListMixin5.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin5";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin5)
    TypedData_ListMixin_FixedLengthListMixin5.name = "TypedData_ListMixin_FixedLengthListMixin5";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin5.prototype = $desc;
  function TypedData_ListMixin6() {
  }
  TypedData_ListMixin6.builtin$cls = "TypedData_ListMixin6";
  if (!"name" in TypedData_ListMixin6)
    TypedData_ListMixin6.name = "TypedData_ListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin6.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin6() {
  }
  TypedData_ListMixin_FixedLengthListMixin6.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin6";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin6)
    TypedData_ListMixin_FixedLengthListMixin6.name = "TypedData_ListMixin_FixedLengthListMixin6";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin6.prototype = $desc;
  function TypedData_ListMixin7() {
  }
  TypedData_ListMixin7.builtin$cls = "TypedData_ListMixin7";
  if (!"name" in TypedData_ListMixin7)
    TypedData_ListMixin7.name = "TypedData_ListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin7.prototype = $desc;
  function TypedData_ListMixin_FixedLengthListMixin7() {
  }
  TypedData_ListMixin_FixedLengthListMixin7.builtin$cls = "TypedData_ListMixin_FixedLengthListMixin7";
  if (!"name" in TypedData_ListMixin_FixedLengthListMixin7)
    TypedData_ListMixin_FixedLengthListMixin7.name = "TypedData_ListMixin_FixedLengthListMixin7";
  $desc = $collectedClasses.TypedData_ListMixin_FixedLengthListMixin7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedData_ListMixin_FixedLengthListMixin7.prototype = $desc;
  function Int64List() {
  }
  Int64List.builtin$cls = "Int64List";
  if (!"name" in Int64List)
    Int64List.name = "Int64List";
  $desc = $collectedClasses.Int64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Int64List.prototype = $desc;
  function Uint64List() {
  }
  Uint64List.builtin$cls = "Uint64List";
  if (!"name" in Uint64List)
    Uint64List.name = "Uint64List";
  $desc = $collectedClasses.Uint64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uint64List.prototype = $desc;
  function Game(canvas, ctx, frameCount, fpsCounter, keysDown, levels, currentLevel, previousLevel, levelSwapFinishTimestamp, levelSwapStartTimestamp, isGameWon, levelCompleted, gameWonView, levelSwapIndicator, snowFlakes, rng) {
    this.canvas = canvas;
    this.ctx = ctx;
    this.frameCount = frameCount;
    this.fpsCounter = fpsCounter;
    this.keysDown = keysDown;
    this.levels = levels;
    this.currentLevel = currentLevel;
    this.previousLevel = previousLevel;
    this.levelSwapFinishTimestamp = levelSwapFinishTimestamp;
    this.levelSwapStartTimestamp = levelSwapStartTimestamp;
    this.isGameWon = isGameWon;
    this.levelCompleted = levelCompleted;
    this.gameWonView = gameWonView;
    this.levelSwapIndicator = levelSwapIndicator;
    this.snowFlakes = snowFlakes;
    this.rng = rng;
  }
  Game.builtin$cls = "Game";
  if (!"name" in Game)
    Game.name = "Game";
  $desc = $collectedClasses.Game;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game.prototype = $desc;
  function Game_drawSnow_closure(this_0) {
    this.this_0 = this_0;
  }
  Game_drawSnow_closure.builtin$cls = "Game_drawSnow_closure";
  if (!"name" in Game_drawSnow_closure)
    Game_drawSnow_closure.name = "Game_drawSnow_closure";
  $desc = $collectedClasses.Game_drawSnow_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game_drawSnow_closure.prototype = $desc;
  function Game_step_closure(this_0) {
    this.this_0 = this_0;
  }
  Game_step_closure.builtin$cls = "Game_step_closure";
  if (!"name" in Game_step_closure)
    Game_step_closure.name = "Game_step_closure";
  $desc = $collectedClasses.Game_step_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game_step_closure.prototype = $desc;
  function Game__initCanvas_closure(this_0) {
    this.this_0 = this_0;
  }
  Game__initCanvas_closure.builtin$cls = "Game__initCanvas_closure";
  if (!"name" in Game__initCanvas_closure)
    Game__initCanvas_closure.name = "Game__initCanvas_closure";
  $desc = $collectedClasses.Game__initCanvas_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game__initCanvas_closure.prototype = $desc;
  function Game_initialize_closure0(this_0) {
    this.this_0 = this_0;
  }
  Game_initialize_closure0.builtin$cls = "Game_initialize_closure0";
  if (!"name" in Game_initialize_closure0)
    Game_initialize_closure0.name = "Game_initialize_closure0";
  $desc = $collectedClasses.Game_initialize_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game_initialize_closure0.prototype = $desc;
  function Game_initialize_closure(this_1) {
    this.this_1 = this_1;
  }
  Game_initialize_closure.builtin$cls = "Game_initialize_closure";
  if (!"name" in Game_initialize_closure)
    Game_initialize_closure.name = "Game_initialize_closure";
  $desc = $collectedClasses.Game_initialize_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game_initialize_closure.prototype = $desc;
  function Game_waitForImages_closure(this_0) {
    this.this_0 = this_0;
  }
  Game_waitForImages_closure.builtin$cls = "Game_waitForImages_closure";
  if (!"name" in Game_waitForImages_closure)
    Game_waitForImages_closure.name = "Game_waitForImages_closure";
  $desc = $collectedClasses.Game_waitForImages_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game_waitForImages_closure.prototype = $desc;
  function Game_waitForImages_closure0(this_1) {
    this.this_1 = this_1;
  }
  Game_waitForImages_closure0.builtin$cls = "Game_waitForImages_closure0";
  if (!"name" in Game_waitForImages_closure0)
    Game_waitForImages_closure0.name = "Game_waitForImages_closure0";
  $desc = $collectedClasses.Game_waitForImages_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game_waitForImages_closure0.prototype = $desc;
  function Game_run_closure(this_0) {
    this.this_0 = this_0;
  }
  Game_run_closure.builtin$cls = "Game_run_closure";
  if (!"name" in Game_run_closure)
    Game_run_closure.name = "Game_run_closure";
  $desc = $collectedClasses.Game_run_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game_run_closure.prototype = $desc;
  function Game_run_closure0(this_1) {
    this.this_1 = this_1;
  }
  Game_run_closure0.builtin$cls = "Game_run_closure0";
  if (!"name" in Game_run_closure0)
    Game_run_closure0.name = "Game_run_closure0";
  $desc = $collectedClasses.Game_run_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game_run_closure0.prototype = $desc;
  function Game_run_closure1(this_2) {
    this.this_2 = this_2;
  }
  Game_run_closure1.builtin$cls = "Game_run_closure1";
  if (!"name" in Game_run_closure1)
    Game_run_closure1.name = "Game_run_closure1";
  $desc = $collectedClasses.Game_run_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game_run_closure1.prototype = $desc;
  function Game__loadImages_closure() {
  }
  Game__loadImages_closure.builtin$cls = "Game__loadImages_closure";
  if (!"name" in Game__loadImages_closure)
    Game__loadImages_closure.name = "Game__loadImages_closure";
  $desc = $collectedClasses.Game__loadImages_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Game__loadImages_closure.prototype = $desc;
  function Level(world, viewport) {
    this.world = world;
    this.viewport = viewport;
  }
  Level.builtin$cls = "Level";
  if (!"name" in Level)
    Level.name = "Level";
  $desc = $collectedClasses.Level;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level.prototype = $desc;
  Level.prototype.get$world = function() {
    return this.world;
  };
  Level.prototype.get$viewport = function(receiver) {
    return this.viewport;
  };
  function Level_render_closure(this_0, timestamp_1) {
    this.this_0 = this_0;
    this.timestamp_1 = timestamp_1;
  }
  Level_render_closure.builtin$cls = "Level_render_closure";
  if (!"name" in Level_render_closure)
    Level_render_closure.name = "Level_render_closure";
  $desc = $collectedClasses.Level_render_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level_render_closure.prototype = $desc;
  function Level_handleInput_closure(this_0) {
    this.this_0 = this_0;
  }
  Level_handleInput_closure.builtin$cls = "Level_handleInput_closure";
  if (!"name" in Level_handleInput_closure)
    Level_handleInput_closure.name = "Level_handleInput_closure";
  $desc = $collectedClasses.Level_handleInput_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level_handleInput_closure.prototype = $desc;
  function Level1(player, img_background, background_pos, game, ctx, world, viewport, canvasDraw, gameObjectViews, worldBorder, size, ground) {
    this.player = player;
    this.img_background = img_background;
    this.background_pos = background_pos;
    this.game = game;
    this.ctx = ctx;
    this.world = world;
    this.viewport = viewport;
    this.canvasDraw = canvasDraw;
    this.gameObjectViews = gameObjectViews;
    this.worldBorder = worldBorder;
    this.size = size;
    this.ground = ground;
  }
  Level1.builtin$cls = "Level1";
  if (!"name" in Level1)
    Level1.name = "Level1";
  $desc = $collectedClasses.Level1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level1.prototype = $desc;
  Level1.prototype.get$player = function() {
    return this.player;
  };
  function Level2(player, img_background, background_pos, game, ctx, world, viewport, canvasDraw, gameObjectViews, worldBorder, size, ground) {
    this.player = player;
    this.img_background = img_background;
    this.background_pos = background_pos;
    this.game = game;
    this.ctx = ctx;
    this.world = world;
    this.viewport = viewport;
    this.canvasDraw = canvasDraw;
    this.gameObjectViews = gameObjectViews;
    this.worldBorder = worldBorder;
    this.size = size;
    this.ground = ground;
  }
  Level2.builtin$cls = "Level2";
  if (!"name" in Level2)
    Level2.name = "Level2";
  $desc = $collectedClasses.Level2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level2.prototype = $desc;
  Level2.prototype.get$player = function() {
    return this.player;
  };
  function Level3(player, img_background, background_pos, game, ctx, world, viewport, canvasDraw, gameObjectViews, worldBorder, size, ground) {
    this.player = player;
    this.img_background = img_background;
    this.background_pos = background_pos;
    this.game = game;
    this.ctx = ctx;
    this.world = world;
    this.viewport = viewport;
    this.canvasDraw = canvasDraw;
    this.gameObjectViews = gameObjectViews;
    this.worldBorder = worldBorder;
    this.size = size;
    this.ground = ground;
  }
  Level3.builtin$cls = "Level3";
  if (!"name" in Level3)
    Level3.name = "Level3";
  $desc = $collectedClasses.Level3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level3.prototype = $desc;
  Level3.prototype.get$player = function() {
    return this.player;
  };
  function Level4(player, img_background, background_pos, game, ctx, world, viewport, canvasDraw, gameObjectViews, worldBorder, size, ground) {
    this.player = player;
    this.img_background = img_background;
    this.background_pos = background_pos;
    this.game = game;
    this.ctx = ctx;
    this.world = world;
    this.viewport = viewport;
    this.canvasDraw = canvasDraw;
    this.gameObjectViews = gameObjectViews;
    this.worldBorder = worldBorder;
    this.size = size;
    this.ground = ground;
  }
  Level4.builtin$cls = "Level4";
  if (!"name" in Level4)
    Level4.name = "Level4";
  $desc = $collectedClasses.Level4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level4.prototype = $desc;
  Level4.prototype.get$player = function() {
    return this.player;
  };
  function Level5(player, img_background, background_pos, game, ctx, world, viewport, canvasDraw, gameObjectViews, worldBorder, size, ground) {
    this.player = player;
    this.img_background = img_background;
    this.background_pos = background_pos;
    this.game = game;
    this.ctx = ctx;
    this.world = world;
    this.viewport = viewport;
    this.canvasDraw = canvasDraw;
    this.gameObjectViews = gameObjectViews;
    this.worldBorder = worldBorder;
    this.size = size;
    this.ground = ground;
  }
  Level5.builtin$cls = "Level5";
  if (!"name" in Level5)
    Level5.name = "Level5";
  $desc = $collectedClasses.Level5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level5.prototype = $desc;
  Level5.prototype.get$player = function() {
    return this.player;
  };
  function Level6(player, img_background, background_pos, game, ctx, world, viewport, canvasDraw, gameObjectViews, worldBorder, size, ground) {
    this.player = player;
    this.img_background = img_background;
    this.background_pos = background_pos;
    this.game = game;
    this.ctx = ctx;
    this.world = world;
    this.viewport = viewport;
    this.canvasDraw = canvasDraw;
    this.gameObjectViews = gameObjectViews;
    this.worldBorder = worldBorder;
    this.size = size;
    this.ground = ground;
  }
  Level6.builtin$cls = "Level6";
  if (!"name" in Level6)
    Level6.name = "Level6";
  $desc = $collectedClasses.Level6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level6.prototype = $desc;
  Level6.prototype.get$player = function() {
    return this.player;
  };
  function CollisionListener() {
  }
  CollisionListener.builtin$cls = "CollisionListener";
  if (!"name" in CollisionListener)
    CollisionListener.name = "CollisionListener";
  $desc = $collectedClasses.CollisionListener;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CollisionListener.prototype = $desc;
  function GameObject() {
  }
  GameObject.builtin$cls = "GameObject";
  if (!"name" in GameObject)
    GameObject.name = "GameObject";
  $desc = $collectedClasses.GameObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameObject.prototype = $desc;
  function Goal(_body, _level, width, height, _world) {
    this._body = _body;
    this._level = _level;
    this.width = width;
    this.height = height;
    this._world = _world;
  }
  Goal.builtin$cls = "Goal";
  if (!"name" in Goal)
    Goal.name = "Goal";
  $desc = $collectedClasses.Goal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Goal.prototype = $desc;
  Goal.prototype.get$width = function(receiver) {
    return this.width;
  };
  Goal.prototype.set$width = function(receiver, v) {
    return this.width = v;
  };
  Goal.prototype.get$height = function(receiver) {
    return this.height;
  };
  Goal.prototype.set$height = function(receiver, v) {
    return this.height = v;
  };
  function Ground(_body, _world) {
    this._body = _body;
    this._world = _world;
  }
  Ground.builtin$cls = "Ground";
  if (!"name" in Ground)
    Ground.name = "Ground";
  $desc = $collectedClasses.Ground;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Ground.prototype = $desc;
  function Platform(_body, width, height, _world) {
    this._body = _body;
    this.width = width;
    this.height = height;
    this._world = _world;
  }
  Platform.builtin$cls = "Platform";
  if (!"name" in Platform)
    Platform.name = "Platform";
  $desc = $collectedClasses.Platform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Platform.prototype = $desc;
  Platform.prototype.get$width = function(receiver) {
    return this.width;
  };
  Platform.prototype.set$width = function(receiver, v) {
    return this.width = v;
  };
  Platform.prototype.get$height = function(receiver) {
    return this.height;
  };
  Platform.prototype.set$height = function(receiver, v) {
    return this.height = v;
  };
  function WalkablePlatform(_body, width, height, _world) {
    this._body = _body;
    this.width = width;
    this.height = height;
    this._world = _world;
  }
  WalkablePlatform.builtin$cls = "WalkablePlatform";
  if (!"name" in WalkablePlatform)
    WalkablePlatform.name = "WalkablePlatform";
  $desc = $collectedClasses.WalkablePlatform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WalkablePlatform.prototype = $desc;
  function Player(_jumpCharges, _body, _world) {
    this._jumpCharges = _jumpCharges;
    this._body = _body;
    this._world = _world;
  }
  Player.builtin$cls = "Player";
  if (!"name" in Player)
    Player.name = "Player";
  $desc = $collectedClasses.Player;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Player.prototype = $desc;
  function Wall(_body, width, height, _world) {
    this._body = _body;
    this.width = width;
    this.height = height;
    this._world = _world;
  }
  Wall.builtin$cls = "Wall";
  if (!"name" in Wall)
    Wall.name = "Wall";
  $desc = $collectedClasses.Wall;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Wall.prototype = $desc;
  function WorldBorder(_body, size, _world) {
    this._body = _body;
    this.size = size;
    this._world = _world;
  }
  WorldBorder.builtin$cls = "WorldBorder";
  if (!"name" in WorldBorder)
    WorldBorder.name = "WorldBorder";
  $desc = $collectedClasses.WorldBorder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldBorder.prototype = $desc;
  function GameObjectView() {
  }
  GameObjectView.builtin$cls = "GameObjectView";
  if (!"name" in GameObjectView)
    GameObjectView.name = "GameObjectView";
  $desc = $collectedClasses.GameObjectView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameObjectView.prototype = $desc;
  function GameWonView(ctx, img_back_won, rng) {
    this.ctx = ctx;
    this.img_back_won = img_back_won;
    this.rng = rng;
  }
  GameWonView.builtin$cls = "GameWonView";
  if (!"name" in GameWonView)
    GameWonView.name = "GameWonView";
  $desc = $collectedClasses.GameWonView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GameWonView.prototype = $desc;
  function GoalView(obj, pos, size, img, imgOffset, imgSize) {
    this.obj = obj;
    this.pos = pos;
    this.size = size;
    this.img = img;
    this.imgOffset = imgOffset;
    this.imgSize = imgSize;
  }
  GoalView.builtin$cls = "GoalView";
  if (!"name" in GoalView)
    GoalView.name = "GoalView";
  $desc = $collectedClasses.GoalView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GoalView.prototype = $desc;
  function LevelSwapIndicator() {
  }
  LevelSwapIndicator.builtin$cls = "LevelSwapIndicator";
  if (!"name" in LevelSwapIndicator)
    LevelSwapIndicator.name = "LevelSwapIndicator";
  $desc = $collectedClasses.LevelSwapIndicator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LevelSwapIndicator.prototype = $desc;
  function PlatformView(obj, pos, size, img, imgOffset, imgSize) {
    this.obj = obj;
    this.pos = pos;
    this.size = size;
    this.img = img;
    this.imgOffset = imgOffset;
    this.imgSize = imgSize;
  }
  PlatformView.builtin$cls = "PlatformView";
  if (!"name" in PlatformView)
    PlatformView.name = "PlatformView";
  $desc = $collectedClasses.PlatformView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlatformView.prototype = $desc;
  function WalkablePlatformView(obj, pos, size, img, imgOffset, imgSize) {
    this.obj = obj;
    this.pos = pos;
    this.size = size;
    this.img = img;
    this.imgOffset = imgOffset;
    this.imgSize = imgSize;
  }
  WalkablePlatformView.builtin$cls = "WalkablePlatformView";
  if (!"name" in WalkablePlatformView)
    WalkablePlatformView.name = "WalkablePlatformView";
  $desc = $collectedClasses.WalkablePlatformView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WalkablePlatformView.prototype = $desc;
  function PlayerView(_player) {
    this._player = _player;
  }
  PlayerView.builtin$cls = "PlayerView";
  if (!"name" in PlayerView)
    PlayerView.name = "PlayerView";
  $desc = $collectedClasses.PlayerView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlayerView.prototype = $desc;
  function StaticObjectView() {
  }
  StaticObjectView.builtin$cls = "StaticObjectView";
  if (!"name" in StaticObjectView)
    StaticObjectView.name = "StaticObjectView";
  $desc = $collectedClasses.StaticObjectView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StaticObjectView.prototype = $desc;
  function ViewCanvasDraw(ctx, viewport) {
    this.ctx = ctx;
    this.viewport = viewport;
  }
  ViewCanvasDraw.builtin$cls = "ViewCanvasDraw";
  if (!"name" in ViewCanvasDraw)
    ViewCanvasDraw.name = "ViewCanvasDraw";
  $desc = $collectedClasses.ViewCanvasDraw;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewCanvasDraw.prototype = $desc;
  ViewCanvasDraw.prototype.get$viewport = function(receiver) {
    return this.viewport;
  };
  function WallView(obj, pos, size, img, imgOffset, imgSize) {
    this.obj = obj;
    this.pos = pos;
    this.size = size;
    this.img = img;
    this.imgOffset = imgOffset;
    this.imgSize = imgSize;
  }
  WallView.builtin$cls = "WallView";
  if (!"name" in WallView)
    WallView.name = "WallView";
  $desc = $collectedClasses.WallView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WallView.prototype = $desc;
  function WorldBorderView(_worldBorder) {
    this._worldBorder = _worldBorder;
  }
  WorldBorderView.builtin$cls = "WorldBorderView";
  if (!"name" in WorldBorderView)
    WorldBorderView.name = "WorldBorderView";
  $desc = $collectedClasses.WorldBorderView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WorldBorderView.prototype = $desc;
  function Matrix2(storage) {
    this.storage = storage;
  }
  Matrix2.builtin$cls = "Matrix2";
  if (!"name" in Matrix2)
    Matrix2.name = "Matrix2";
  $desc = $collectedClasses.Matrix2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Matrix2.prototype = $desc;
  Matrix2.prototype.get$storage = function() {
    return this.storage;
  };
  function Vector2(storage) {
    this.storage = storage;
  }
  Vector2.builtin$cls = "Vector2";
  if (!"name" in Vector2)
    Vector2.name = "Vector2";
  $desc = $collectedClasses.Vector2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Vector2.prototype = $desc;
  Vector2.prototype.get$storage = function() {
    return this.storage;
  };
  function Closure$2(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$2.builtin$cls = "Closure$2";
  $desc = $collectedClasses.Closure$2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$2.prototype = $desc;
  function Closure$0(call$0, $name) {
    this.call$0 = call$0;
    this.$name = $name;
  }
  Closure$0.builtin$cls = "Closure$0";
  $desc = $collectedClasses.Closure$0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$0.prototype = $desc;
  function Closure$7(call$7, $name) {
    this.call$7 = call$7;
    this.$name = $name;
  }
  Closure$7.builtin$cls = "Closure$7";
  $desc = $collectedClasses.Closure$7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$7.prototype = $desc;
  function Closure$1(call$1, $name) {
    this.call$1 = call$1;
    this.$name = $name;
  }
  Closure$1.builtin$cls = "Closure$1";
  $desc = $collectedClasses.Closure$1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$1.prototype = $desc;
  function Closure$20(call$2, $name) {
    this.call$2 = call$2;
    this.$name = $name;
  }
  Closure$20.builtin$cls = "Closure$20";
  $desc = $collectedClasses.Closure$20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$20.prototype = $desc;
  function Closure$4(call$4, $name) {
    this.call$4 = call$4;
    this.$name = $name;
  }
  Closure$4.builtin$cls = "Closure$4";
  $desc = $collectedClasses.Closure$4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure$4.prototype = $desc;
  return [HtmlElement, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, CanvasElement, CanvasGradient, CanvasPattern, CanvasRenderingContext, CanvasRenderingContext2D, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DocumentType, DomError, DomException, DomImplementation, Element, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, File, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, HtmlDocument, HtmlHtmlElement, IFrameElement, ImageElement, InputElement, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, Location, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiInput, MidiMessageEvent, MidiOutput, MidiPort, ModElement, MouseEvent, Navigator, NavigatorUserMediaError, Node, NodeList, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, Range, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, ScriptElement0, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechRecognitionError, SpeechRecognitionEvent, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TitleElement, TouchEvent, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, _Attr, _Entity, _HTMLAppletElement, _HTMLBaseFontElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _XMLHttpRequestProgressEvent, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedTransformList, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PointList, PolygonElement, PolylineElement, RadialGradientElement, Rect, RectElement, ScriptElement, SetElement, StopElement, StyleElement0, SvgDocument, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGAnimateColorElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, ContextEvent, RenderingContext, BoundClosure$i4, SqlError, ByteBuffer, TypedData, ByteData, Float32List, Float64List, Int16List, Int32List, Int8List, Uint16List, Uint32List, Uint8ClampedList, Uint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSMutableArray, JSFixedArray, JSExtendableArray, JSNumber, JSInt, JSDouble, JSString, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _NativeJsSendPort_send__closure, _WorkerSendPort, _WorkerSendPort_send_closure, ReceivePortImpl, BoundClosure$i0, _waitForPendingPorts_closure, _PendingSendPortFinder, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, BoundClosure$1, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, BoundClosure, TypeImpl, initHooks_closure, initHooks_closure0, initHooks_closure1, ContactFilter, ContactImpulse, DebugDraw, AxisAlignedBox, BroadPhase, BroadPhase_updatePairs_closure, DynamicTree, DynamicTreeNode, Pair, Collision, ClipVertex, EdgeResults, ContactID, Distance, DistanceInput, DistanceOutput, DistanceProxy, Features, Manifold, ManifoldPoint, MassData, PolygonShape, Shape, Simplex, SimplexCache, SimplexCache_closure, SimplexCache_closure0, SimplexVertex, TimeOfImpact, SeparationFunction, TimeOfImpactInput, TimeOfImpactOutput, WorldManifold, WorldManifold_closure, Sweep, Transform, ViewportTransform, Body, BodyDef, ContactManager, BoundClosure$2, CircleContact, Contact, ContactConstraint, ContactConstraint_closure, ContactConstraintPoint, ContactEdge, ContactRegister, ContactSolver, ContactSolver_closure, PositionSolverManifold, PolygonAndCircleContact, PolygonContact, TimeOfImpactConstraint, TimeOfImpactConstraint_closure, TimeOfImpactSolver, TimeOfImpactSolver_closure, TimeOfImpactSolverManifold, Filter, Fixture, FixtureDef, Island, Position, Velocity, Joint, TimeStep, World, WorldQueryWrapper, DefaultWorldPool, CanvasDraw, CanvasViewportTransform, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, FixedLengthListMixin, _AsyncError, Future, Future_wait_handleError, Future_wait_closure, _Completer, _AsyncCompleter, _Future, BoundClosure$20, _Future__addListener_closure, _Future__chainFutures_closure, _Future__chainFutures_closure0, _Future__asyncComplete_closure, _Future__asyncCompleteError_closure, _Future__propagateToListeners_closure, _Future__propagateToListeners_closure0, _Future__propagateToListeners__closure, _Future__propagateToListeners__closure0, Stream, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, Stream_first_closure, Stream_first_closure0, StreamSubscription, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _SyncStreamController, _StreamController__SyncStreamControllerDispatch, _ControllerStream, _ControllerSubscription, BoundClosure$0, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, Timer, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _RootZone, _HashMap, _HashMap_values_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, _HashSetBase, IterableBase, ListBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, NoSuchMethodError_toString_closure, Comparable, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, Expando, Function, Iterator, Null, Object, StackTrace, StringBuffer, Symbol, Console, BoundClosure$i1, Element_Element$html_closure, _ChildNodeListLazy, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, Window_animationFrame_closure, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, _AttributeMap, _ElementAttributeMap, EventStreamProvider, _EventStream, _ElementEventStreamImpl, _EventStreamSubscription, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, _SvgNodeValidator, FixedSizeListIterator, _LocationWrapper, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, ReceivePort, _Random, _RectangleBase, Rectangle, TypedData_ListMixin, TypedData_ListMixin_FixedLengthListMixin, TypedData_ListMixin0, TypedData_ListMixin_FixedLengthListMixin0, TypedData_ListMixin1, TypedData_ListMixin_FixedLengthListMixin1, TypedData_ListMixin2, TypedData_ListMixin_FixedLengthListMixin2, TypedData_ListMixin3, TypedData_ListMixin_FixedLengthListMixin3, TypedData_ListMixin4, TypedData_ListMixin_FixedLengthListMixin4, TypedData_ListMixin5, TypedData_ListMixin_FixedLengthListMixin5, TypedData_ListMixin6, TypedData_ListMixin_FixedLengthListMixin6, TypedData_ListMixin7, TypedData_ListMixin_FixedLengthListMixin7, Int64List, Uint64List, Game, Game_drawSnow_closure, Game_step_closure, Game__initCanvas_closure, Game_initialize_closure0, Game_initialize_closure, Game_waitForImages_closure, Game_waitForImages_closure0, Game_run_closure, Game_run_closure0, Game_run_closure1, Game__loadImages_closure, Level, Level_render_closure, Level_handleInput_closure, Level1, Level2, Level3, Level4, Level5, Level6, CollisionListener, GameObject, Goal, Ground, Platform, WalkablePlatform, Player, Wall, WorldBorder, GameObjectView, GameWonView, GoalView, LevelSwapIndicator, PlatformView, WalkablePlatformView, PlayerView, StaticObjectView, ViewCanvasDraw, WallView, WorldBorderView, Matrix2, Vector2, Closure$2, Closure$0, Closure$7, Closure$1, Closure$20, Closure$4];
}
